/*!
  inputfollow v0.0.1
  undefined
  Released under the MIT License.
*/
var Inputfollow = (function () {
    'use strict';

    var _assign = function __assign() {
      _assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];

          for (var p in s) {
            if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
        }

        return t;
      };

      return _assign.apply(this, arguments);
    };

    /**
     * Check required of target field element's value
     * @param el
     * @returns boolean
     */
    var check = function (el) {
        var tag = el.tagName.toLowerCase();
        var type = el.getAttribute('type');
        var name = el.getAttribute('name');
        if (tag === 'input' && (type === 'radio' || type === 'checkbox')) {
            return (document.querySelectorAll("input[name=\"".concat(name, "\"]:checked")).length >
                0);
        }
        return el.value.replace(/\s/, '') !== '';
    };

    var validate = function (el, rule) {
        var errors = [];
        if (!Array.isArray(rule)) {
            rule = [rule];
        }
        rule.map(function (r) {
            switch (r.type) {
                case 'required':
                    if (!check(el)) {
                        if (r.message) {
                            errors.push({
                                type: r.type,
                                message: r.message,
                            });
                        }
                    }
                    break;
            }
        });
        return errors;
    };

    var createElement = function (el, params, errors) {
        if (!el) {
            throw Error("Not found target field element");
        }
        var name = el.getAttribute('name');
        // let errors: ValidatedError[] = []
        var rule = (function () {
            if (!name || !params.rules || !(name in params.rules)) {
                return null;
            }
            return params.rules[name];
        })();
        var validate$1 = function (init) {
            if (init === void 0) { init = false; }
            if (!rule || !name) {
                return;
            }
            errors[name] = validate(el, rule);
            if (hasError()) {
                if (params.valid_class) {
                    el.classList.remove(params.valid_class);
                }
                if (init !== true) {
                    if (params.error_class) {
                        el.classList.add(params.error_class);
                    }
                }
            }
            else {
                if (params.error_class) {
                    el.classList.remove(params.error_class);
                }
                if (params.valid_class) {
                    el.classList.add(params.valid_class);
                }
            }
        };
        var hasError = function () {
            if (!name) {
                return false;
            }
            return errors[name].length > 0;
        };
        var getErrors = function () {
            if (!name) {
                return [];
            }
            return errors[name];
        };
        el.addEventListener('blur', function () {
            validate$1();
        });
        return { el: el, name: name, rule: rule, validate: validate$1, hasError: hasError, getErrors: getErrors };
    };

    var index = (function (formEl, params) {
        /**
         * Convert formEl to HTMLFormElement if it's string
         */
        if (typeof formEl === 'string') {
            var el = document.querySelector(formEl);
            if (!el) {
                throw new Error("Not found target form element: ".concat(formEl));
            }
            formEl = el;
        }
        if (formEl.tagName !== 'FORM') {
            throw new Error("Target element is not <form> element");
        }
        formEl.addEventListener('submit', function (e) {
            var flag = true;
            validate();
            Object.keys(errors).map(function (key) {
                var error = errors[key];
                flag = flag && error.length <= 0;
            });
            if (!flag) {
                e.preventDefault();
                return false;
            }
            return true;
        });
        /**
         * Find submit button if it's specified
         */
        var submitButton = (function () {
            if (!params.submit_button) {
                return null;
            }
            if (typeof params.submit_button === 'string') {
                return formEl.querySelector(params.submit_button);
            }
            return params.submit_button;
        })();
        /**
         * Arranged params
         */
        var defaultParams = { error_class: 'error', valid_class: 'valid' };
        params = _assign(_assign({}, defaultParams), params);
        /**
         * Prepare Proxy for observing errors values
         */
        var errors = new Proxy({}, {
            set: function (target, p, value, receiver) {
                var set = Reflect.set(target, p, value, receiver);
                if (set && submitButton) {
                    var flag_1 = true;
                    Object.keys(errors).map(function (key) {
                        var error = errors[key];
                        flag_1 = flag_1 && error.length <= 0;
                    });
                    if (flag_1) {
                        submitButton.removeAttribute('disabled');
                    }
                    else {
                        submitButton.setAttribute('disabled', 'disabled');
                    }
                }
                return set;
            },
        });
        /**
         * Preparing Checking Elements
         */
        var inputs = formEl.querySelectorAll('input,textarea,select');
        var elements = [];
        inputs.forEach(function (input) {
            var Element = createElement(input, params, errors);
            if (!Element) {
                return;
            }
            elements.push(Element);
        });
        /**
         * Start validating
         */
        var validate = function (init) {
            if (init === void 0) { init = false; }
            elements.map(function (element) {
                element.validate(init);
            });
        };
        // Initial validate
        validate(true);
        return { formEl: formEl, elements: elements, validate: validate };
    });

    return index;

})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
