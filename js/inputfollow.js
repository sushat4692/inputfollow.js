/*!
  inputfollow.js v0.0.10
  https://github.com/sushat4692/inputfollow.js#readme
  Released under the MIT License.
*/
var InputFollow = (function () {
  'use strict';

  function _arrayLikeToArray(r, a) {
    (null == a || a > r.length) && (a = r.length);
    for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
    return n;
  }
  function _arrayWithHoles(r) {
    if (Array.isArray(r)) return r;
  }
  function _arrayWithoutHoles(r) {
    if (Array.isArray(r)) return _arrayLikeToArray(r);
  }
  function _assertThisInitialized(e) {
    if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return e;
  }
  function asyncGeneratorStep(n, t, e, r, o, a, c) {
    try {
      var i = n[a](c),
        u = i.value;
    } catch (n) {
      return void e(n);
    }
    i.done ? t(u) : Promise.resolve(u).then(r, o);
  }
  function _asyncToGenerator(n) {
    return function () {
      var t = this,
        e = arguments;
      return new Promise(function (r, o) {
        var a = n.apply(t, e);
        function _next(n) {
          asyncGeneratorStep(a, r, o, _next, _throw, "next", n);
        }
        function _throw(n) {
          asyncGeneratorStep(a, r, o, _next, _throw, "throw", n);
        }
        _next(void 0);
      });
    };
  }
  function _callSuper(t, o, e) {
    return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e));
  }
  function _classCallCheck(a, n) {
    if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function");
  }
  function _construct(t, e, r) {
    if (_isNativeReflectConstruct()) return Reflect.construct.apply(null, arguments);
    var o = [null];
    o.push.apply(o, e);
    var p = new (t.bind.apply(t, o))();
    return r && _setPrototypeOf(p, r.prototype), p;
  }
  function _defineProperties(e, r) {
    for (var t = 0; t < r.length; t++) {
      var o = r[t];
      o.enumerable = o.enumerable || false, o.configurable = true, "value" in o && (o.writable = true), Object.defineProperty(e, _toPropertyKey(o.key), o);
    }
  }
  function _createClass(e, r, t) {
    return r && _defineProperties(e.prototype, r), Object.defineProperty(e, "prototype", {
      writable: false
    }), e;
  }
  function _createForOfIteratorHelper(r, e) {
    var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
    if (!t) {
      if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e) {
        t && (r = t);
        var n = 0,
          F = function () {};
        return {
          s: F,
          n: function () {
            return n >= r.length ? {
              done: true
            } : {
              done: false,
              value: r[n++]
            };
          },
          e: function (r) {
            throw r;
          },
          f: F
        };
      }
      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var o,
      a = true,
      u = false;
    return {
      s: function () {
        t = t.call(r);
      },
      n: function () {
        var r = t.next();
        return a = r.done, r;
      },
      e: function (r) {
        u = true, o = r;
      },
      f: function () {
        try {
          a || null == t.return || t.return();
        } finally {
          if (u) throw o;
        }
      }
    };
  }
  function _defineProperty(e, r, t) {
    return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {
      value: t,
      enumerable: true,
      configurable: true,
      writable: true
    }) : e[r] = t, e;
  }
  function _getPrototypeOf(t) {
    return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) {
      return t.__proto__ || Object.getPrototypeOf(t);
    }, _getPrototypeOf(t);
  }
  function _inherits(t, e) {
    if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
    t.prototype = Object.create(e && e.prototype, {
      constructor: {
        value: t,
        writable: true,
        configurable: true
      }
    }), Object.defineProperty(t, "prototype", {
      writable: false
    }), e && _setPrototypeOf(t, e);
  }
  function _isNativeFunction(t) {
    try {
      return -1 !== Function.toString.call(t).indexOf("[native code]");
    } catch (n) {
      return "function" == typeof t;
    }
  }
  function _isNativeReflectConstruct() {
    try {
      var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    } catch (t) {}
    return (_isNativeReflectConstruct = function () {
      return !!t;
    })();
  }
  function _iterableToArray(r) {
    if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r);
  }
  function _iterableToArrayLimit(r, l) {
    var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
    if (null != t) {
      var e,
        n,
        i,
        u,
        a = [],
        f = true,
        o = false;
      try {
        if (i = (t = t.call(r)).next, 0 === l) {
          if (Object(t) !== t) return;
          f = !1;
        } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);
      } catch (r) {
        o = true, n = r;
      } finally {
        try {
          if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return;
        } finally {
          if (o) throw n;
        }
      }
      return a;
    }
  }
  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function ownKeys(e, r) {
    var t = Object.keys(e);
    if (Object.getOwnPropertySymbols) {
      var o = Object.getOwnPropertySymbols(e);
      r && (o = o.filter(function (r) {
        return Object.getOwnPropertyDescriptor(e, r).enumerable;
      })), t.push.apply(t, o);
    }
    return t;
  }
  function _objectSpread2(e) {
    for (var r = 1; r < arguments.length; r++) {
      var t = null != arguments[r] ? arguments[r] : {};
      r % 2 ? ownKeys(Object(t), true).forEach(function (r) {
        _defineProperty(e, r, t[r]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {
        Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));
      });
    }
    return e;
  }
  function _possibleConstructorReturn(t, e) {
    if (e && ("object" == typeof e || "function" == typeof e)) return e;
    if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
    return _assertThisInitialized(t);
  }
  function _regenerator() {
    /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */
    var e,
      t,
      r = "function" == typeof Symbol ? Symbol : {},
      n = r.iterator || "@@iterator",
      o = r.toStringTag || "@@toStringTag";
    function i(r, n, o, i) {
      var c = n && n.prototype instanceof Generator ? n : Generator,
        u = Object.create(c.prototype);
      return _regeneratorDefine(u, "_invoke", function (r, n, o) {
        var i,
          c,
          u,
          f = 0,
          p = o || [],
          y = false,
          G = {
            p: 0,
            n: 0,
            v: e,
            a: d,
            f: d.bind(e, 4),
            d: function (t, r) {
              return i = t, c = 0, u = e, G.n = r, a;
            }
          };
        function d(r, n) {
          for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) {
            var o,
              i = p[t],
              d = G.p,
              l = i[2];
            r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0));
          }
          if (o || r > 1) return a;
          throw y = true, n;
        }
        return function (o, p, l) {
          if (f > 1) throw TypeError("Generator is already running");
          for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) {
            i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u);
            try {
              if (f = 2, i) {
                if (c || (o = "next"), t = i[o]) {
                  if (!(t = t.call(i, u))) throw TypeError("iterator result is not an object");
                  if (!t.done) return t;
                  u = t.value, c < 2 && (c = 0);
                } else 1 === c && (t = i.return) && t.call(i), c < 2 && (u = TypeError("The iterator does not provide a '" + o + "' method"), c = 1);
                i = e;
              } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break;
            } catch (t) {
              i = e, c = 1, u = t;
            } finally {
              f = 1;
            }
          }
          return {
            value: t,
            done: y
          };
        };
      }(r, o, i), true), u;
    }
    var a = {};
    function Generator() {}
    function GeneratorFunction() {}
    function GeneratorFunctionPrototype() {}
    t = Object.getPrototypeOf;
    var c = [][n] ? t(t([][n]())) : (_regeneratorDefine(t = {}, n, function () {
        return this;
      }), t),
      u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c);
    function f(e) {
      return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine(e, o, "GeneratorFunction")), e.prototype = Object.create(u), e;
    }
    return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine(u, "constructor", GeneratorFunctionPrototype), _regeneratorDefine(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = "GeneratorFunction", _regeneratorDefine(GeneratorFunctionPrototype, o, "GeneratorFunction"), _regeneratorDefine(u), _regeneratorDefine(u, o, "Generator"), _regeneratorDefine(u, n, function () {
      return this;
    }), _regeneratorDefine(u, "toString", function () {
      return "[object Generator]";
    }), (_regenerator = function () {
      return {
        w: i,
        m: f
      };
    })();
  }
  function _regeneratorDefine(e, r, n, t) {
    var i = Object.defineProperty;
    try {
      i({}, "", {});
    } catch (e) {
      i = 0;
    }
    _regeneratorDefine = function (e, r, n, t) {
      function o(r, n) {
        _regeneratorDefine(e, r, function (e) {
          return this._invoke(r, n, e);
        });
      }
      r ? i ? i(e, r, {
        value: n,
        enumerable: !t,
        configurable: !t,
        writable: !t
      }) : e[r] = n : (o("next", 0), o("throw", 1), o("return", 2));
    }, _regeneratorDefine(e, r, n, t);
  }
  function _setPrototypeOf(t, e) {
    return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) {
      return t.__proto__ = e, t;
    }, _setPrototypeOf(t, e);
  }
  function _slicedToArray(r, e) {
    return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest();
  }
  function _toConsumableArray(r) {
    return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread();
  }
  function _toPrimitive(t, r) {
    if ("object" != typeof t || !t) return t;
    var e = t[Symbol.toPrimitive];
    if (void 0 !== e) {
      var i = e.call(t, r);
      if ("object" != typeof i) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r ? String : Number)(t);
  }
  function _toPropertyKey(t) {
    var i = _toPrimitive(t, "string");
    return "symbol" == typeof i ? i : i + "";
  }
  function _typeof(o) {
    "@babel/helpers - typeof";

    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
      return typeof o;
    } : function (o) {
      return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
    }, _typeof(o);
  }
  function _unsupportedIterableToArray(r, a) {
    if (r) {
      if ("string" == typeof r) return _arrayLikeToArray(r, a);
      var t = {}.toString.call(r).slice(8, -1);
      return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
    }
  }
  function _wrapNativeSuper(t) {
    var r = "function" == typeof Map ? new Map() : void 0;
    return _wrapNativeSuper = function (t) {
      if (null === t || !_isNativeFunction(t)) return t;
      if ("function" != typeof t) throw new TypeError("Super expression must either be null or a function");
      if (void 0 !== r) {
        if (r.has(t)) return r.get(t);
        r.set(t, Wrapper);
      }
      function Wrapper() {
        return _construct(t, arguments, _getPrototypeOf(this).constructor);
      }
      return Wrapper.prototype = Object.create(t.prototype, {
        constructor: {
          value: Wrapper,
          enumerable: false,
          writable: true,
          configurable: true
        }
      }), _setPrototypeOf(Wrapper, t);
    }, _wrapNativeSuper(t);
  }

  var _assign = function __assign() {
    _assign = Object.assign || function __assign(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
      return t;
    };
    return _assign.apply(this, arguments);
  };
  function __spreadArray(to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar) ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
  }
  typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
  };

  /** A special constant with type `never` */
  var NEVER = Object.freeze({
    status: "aborted"
  });
  function $constructor(name, initializer, params) {
    var _params$Parent;
    function init(inst, def) {
      var _inst$_zod, _a$traits;
      var _a;
      Object.defineProperty(inst, "_zod", {
        value: (_inst$_zod = inst._zod) !== null && _inst$_zod !== void 0 ? _inst$_zod : {},
        enumerable: false
      });
      (_a$traits = (_a = inst._zod).traits) !== null && _a$traits !== void 0 ? _a$traits : _a.traits = new Set();
      inst._zod.traits.add(name);
      initializer(inst, def);
      // support prototype modifications
      for (var k in _.prototype) {
        if (!(k in inst)) Object.defineProperty(inst, k, {
          value: _.prototype[k].bind(inst)
        });
      }
      inst._zod.constr = _;
      inst._zod.def = def;
    }
    // doesn't work if Parent has a constructor with arguments
    var Parent = (_params$Parent = params === null || params === void 0 ? void 0 : params.Parent) !== null && _params$Parent !== void 0 ? _params$Parent : Object;
    var Definition = /*#__PURE__*/function (_Parent) {
      function Definition() {
        _classCallCheck(this, Definition);
        return _callSuper(this, Definition, arguments);
      }
      _inherits(Definition, _Parent);
      return _createClass(Definition);
    }(Parent);
    Object.defineProperty(Definition, "name", {
      value: name
    });
    function _(def) {
      var _a$deferred;
      var _a;
      var inst = params !== null && params !== void 0 && params.Parent ? new Definition() : this;
      init(inst, def);
      (_a$deferred = (_a = inst._zod).deferred) !== null && _a$deferred !== void 0 ? _a$deferred : _a.deferred = [];
      var _iterator = _createForOfIteratorHelper(inst._zod.deferred),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var fn = _step.value;
          fn();
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      return inst;
    }
    Object.defineProperty(_, "init", {
      value: init
    });
    Object.defineProperty(_, Symbol.hasInstance, {
      value: function value(inst) {
        var _inst$_zod2;
        if (params !== null && params !== void 0 && params.Parent && inst instanceof params.Parent) return true;
        return inst === null || inst === void 0 || (_inst$_zod2 = inst._zod) === null || _inst$_zod2 === void 0 || (_inst$_zod2 = _inst$_zod2.traits) === null || _inst$_zod2 === void 0 ? void 0 : _inst$_zod2.has(name);
      }
    });
    Object.defineProperty(_, "name", {
      value: name
    });
    return _;
  }
  //////////////////////////////   UTILITIES   ///////////////////////////////////////
  var $brand = Symbol("zod_brand");
  var $ZodAsyncError = /*#__PURE__*/function (_Error) {
    function $ZodAsyncError() {
      _classCallCheck(this, $ZodAsyncError);
      return _callSuper(this, $ZodAsyncError, ["Encountered Promise during synchronous parse. Use .parseAsync() instead."]);
    }
    _inherits($ZodAsyncError, _Error);
    return _createClass($ZodAsyncError);
  }(/*#__PURE__*/_wrapNativeSuper(Error));
  var $ZodEncodeError = /*#__PURE__*/function (_Error2) {
    function $ZodEncodeError(name) {
      var _this;
      _classCallCheck(this, $ZodEncodeError);
      _this = _callSuper(this, $ZodEncodeError, ["Encountered unidirectional transform during encode: ".concat(name)]);
      _this.name = "ZodEncodeError";
      return _this;
    }
    _inherits($ZodEncodeError, _Error2);
    return _createClass($ZodEncodeError);
  }(/*#__PURE__*/_wrapNativeSuper(Error));
  var globalConfig = {};
  function config(newConfig) {
    if (newConfig) Object.assign(globalConfig, newConfig);
    return globalConfig;
  }

  // functions
  function assertEqual(val) {
    return val;
  }
  function assertNotEqual(val) {
    return val;
  }
  function assertIs(_arg) {}
  function assertNever(_x) {
    throw new Error();
  }
  function assert(_) {}
  function getEnumValues(entries) {
    var numericValues = Object.values(entries).filter(function (v) {
      return typeof v === "number";
    });
    var values = Object.entries(entries).filter(function (_ref) {
      var _ref2 = _slicedToArray(_ref, 2),
        k = _ref2[0];
        _ref2[1];
      return numericValues.indexOf(+k) === -1;
    }).map(function (_ref3) {
      var _ref4 = _slicedToArray(_ref3, 2);
        _ref4[0];
        var v = _ref4[1];
      return v;
    });
    return values;
  }
  function joinValues(array) {
    var separator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "|";
    return array.map(function (val) {
      return stringifyPrimitive(val);
    }).join(separator);
  }
  function jsonStringifyReplacer(_, value) {
    if (typeof value === "bigint") return value.toString();
    return value;
  }
  function cached(getter) {
    return {
      get value() {
        {
          var value = getter();
          Object.defineProperty(this, "value", {
            value: value
          });
          return value;
        }
      }
    };
  }
  function nullish$1(input) {
    return input === null || input === undefined;
  }
  function cleanRegex(source) {
    var start = source.startsWith("^") ? 1 : 0;
    var end = source.endsWith("$") ? source.length - 1 : source.length;
    return source.slice(start, end);
  }
  function floatSafeRemainder(val, step) {
    var valDecCount = (val.toString().split(".")[1] || "").length;
    var stepString = step.toString();
    var stepDecCount = (stepString.split(".")[1] || "").length;
    if (stepDecCount === 0 && /\d?e-\d?/.test(stepString)) {
      var match = stepString.match(/\d?e-(\d?)/);
      if (match !== null && match !== void 0 && match[1]) {
        stepDecCount = Number.parseInt(match[1]);
      }
    }
    var decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;
    var valInt = Number.parseInt(val.toFixed(decCount).replace(".", ""));
    var stepInt = Number.parseInt(step.toFixed(decCount).replace(".", ""));
    return valInt % stepInt / Math.pow(10, decCount);
  }
  var EVALUATING = Symbol("evaluating");
  function defineLazy(object, key, getter) {
    var value = undefined;
    Object.defineProperty(object, key, {
      get: function get() {
        if (value === EVALUATING) {
          // Circular reference detected, return undefined to break the cycle
          return undefined;
        }
        if (value === undefined) {
          value = EVALUATING;
          value = getter();
        }
        return value;
      },
      set: function set(v) {
        Object.defineProperty(object, key, {
          value: v
          // configurable: true,
        });
        // object[key] = v;
      },
      configurable: true
    });
  }
  function objectClone(obj) {
    return Object.create(Object.getPrototypeOf(obj), Object.getOwnPropertyDescriptors(obj));
  }
  function assignProp(target, prop, value) {
    Object.defineProperty(target, prop, {
      value: value,
      writable: true,
      enumerable: true,
      configurable: true
    });
  }
  function mergeDefs() {
    var mergedDescriptors = {};
    for (var _len = arguments.length, defs = new Array(_len), _key = 0; _key < _len; _key++) {
      defs[_key] = arguments[_key];
    }
    for (var _i = 0, _defs = defs; _i < _defs.length; _i++) {
      var def = _defs[_i];
      var descriptors = Object.getOwnPropertyDescriptors(def);
      Object.assign(mergedDescriptors, descriptors);
    }
    return Object.defineProperties({}, mergedDescriptors);
  }
  function cloneDef(schema) {
    return mergeDefs(schema._zod.def);
  }
  function getElementAtPath(obj, path) {
    if (!path) return obj;
    return path.reduce(function (acc, key) {
      return acc === null || acc === void 0 ? void 0 : acc[key];
    }, obj);
  }
  function promiseAllObject(promisesObj) {
    var keys = Object.keys(promisesObj);
    var promises = keys.map(function (key) {
      return promisesObj[key];
    });
    return Promise.all(promises).then(function (results) {
      var resolvedObj = {};
      for (var i = 0; i < keys.length; i++) {
        resolvedObj[keys[i]] = results[i];
      }
      return resolvedObj;
    });
  }
  function randomString() {
    var length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;
    var chars = "abcdefghijklmnopqrstuvwxyz";
    var str = "";
    for (var i = 0; i < length; i++) {
      str += chars[Math.floor(Math.random() * chars.length)];
    }
    return str;
  }
  function esc(str) {
    return JSON.stringify(str);
  }
  var captureStackTrace = "captureStackTrace" in Error ? Error.captureStackTrace : function () {};
  function isObject(data) {
    return _typeof(data) === "object" && data !== null && !Array.isArray(data);
  }
  var allowsEval = cached(function () {
    var _navigator;
    // @ts-ignore
    if (typeof navigator !== "undefined" && (_navigator = navigator) !== null && _navigator !== void 0 && (_navigator = _navigator.userAgent) !== null && _navigator !== void 0 && _navigator.includes("Cloudflare")) {
      return false;
    }
    try {
      var F = Function;
      new F("");
      return true;
    } catch (_) {
      return false;
    }
  });
  function isPlainObject(o) {
    if (isObject(o) === false) return false;
    // modified constructor
    var ctor = o.constructor;
    if (ctor === undefined) return true;
    // modified prototype
    var prot = ctor.prototype;
    if (isObject(prot) === false) return false;
    // ctor doesn't have static `isPrototypeOf`
    if (Object.prototype.hasOwnProperty.call(prot, "isPrototypeOf") === false) {
      return false;
    }
    return true;
  }
  function shallowClone(o) {
    if (isPlainObject(o)) return _objectSpread2({}, o);
    if (Array.isArray(o)) return _toConsumableArray(o);
    return o;
  }
  function numKeys(data) {
    var keyCount = 0;
    for (var key in data) {
      if (Object.prototype.hasOwnProperty.call(data, key)) {
        keyCount++;
      }
    }
    return keyCount;
  }
  var getParsedType = function getParsedType(data) {
    var t = _typeof(data);
    switch (t) {
      case "undefined":
        return "undefined";
      case "string":
        return "string";
      case "number":
        return Number.isNaN(data) ? "nan" : "number";
      case "boolean":
        return "boolean";
      case "function":
        return "function";
      case "bigint":
        return "bigint";
      case "symbol":
        return "symbol";
      case "object":
        if (Array.isArray(data)) {
          return "array";
        }
        if (data === null) {
          return "null";
        }
        if (data.then && typeof data.then === "function" && data["catch"] && typeof data["catch"] === "function") {
          return "promise";
        }
        if (typeof Map !== "undefined" && data instanceof Map) {
          return "map";
        }
        if (typeof Set !== "undefined" && data instanceof Set) {
          return "set";
        }
        if (typeof Date !== "undefined" && data instanceof Date) {
          return "date";
        }
        // @ts-ignore
        if (typeof File !== "undefined" && data instanceof File) {
          return "file";
        }
        return "object";
      default:
        throw new Error("Unknown data type: ".concat(t));
    }
  };
  var propertyKeyTypes = new Set(["string", "number", "symbol"]);
  var primitiveTypes = new Set(["string", "number", "bigint", "boolean", "symbol", "undefined"]);
  function escapeRegex(str) {
    return str.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
  }
  // zod-specific utils
  function clone(inst, def, params) {
    var cl = new inst._zod.constr(def !== null && def !== void 0 ? def : inst._zod.def);
    if (!def || params !== null && params !== void 0 && params.parent) cl._zod.parent = inst;
    return cl;
  }
  function normalizeParams(_params) {
    var params = _params;
    if (!params) return {};
    if (typeof params === "string") return {
      error: function error() {
        return params;
      }
    };
    if ((params === null || params === void 0 ? void 0 : params.message) !== undefined) {
      if ((params === null || params === void 0 ? void 0 : params.error) !== undefined) throw new Error("Cannot specify both `message` and `error` params");
      params.error = params.message;
    }
    delete params.message;
    if (typeof params.error === "string") return _objectSpread2(_objectSpread2({}, params), {}, {
      error: function error() {
        return params.error;
      }
    });
    return params;
  }
  function createTransparentProxy(getter) {
    var target;
    return new Proxy({}, {
      get: function get(_, prop, receiver) {
        target !== null && target !== void 0 ? target : target = getter();
        return Reflect.get(target, prop, receiver);
      },
      set: function set(_, prop, value, receiver) {
        target !== null && target !== void 0 ? target : target = getter();
        return Reflect.set(target, prop, value, receiver);
      },
      has: function has(_, prop) {
        target !== null && target !== void 0 ? target : target = getter();
        return Reflect.has(target, prop);
      },
      deleteProperty: function deleteProperty(_, prop) {
        target !== null && target !== void 0 ? target : target = getter();
        return Reflect.deleteProperty(target, prop);
      },
      ownKeys: function ownKeys(_) {
        target !== null && target !== void 0 ? target : target = getter();
        return Reflect.ownKeys(target);
      },
      getOwnPropertyDescriptor: function getOwnPropertyDescriptor(_, prop) {
        target !== null && target !== void 0 ? target : target = getter();
        return Reflect.getOwnPropertyDescriptor(target, prop);
      },
      defineProperty: function defineProperty(_, prop, descriptor) {
        target !== null && target !== void 0 ? target : target = getter();
        return Reflect.defineProperty(target, prop, descriptor);
      }
    });
  }
  function stringifyPrimitive(value) {
    if (typeof value === "bigint") return value.toString() + "n";
    if (typeof value === "string") return "\"".concat(value, "\"");
    return "".concat(value);
  }
  function optionalKeys(shape) {
    return Object.keys(shape).filter(function (k) {
      return shape[k]._zod.optin === "optional" && shape[k]._zod.optout === "optional";
    });
  }
  var NUMBER_FORMAT_RANGES = {
    safeint: [Number.MIN_SAFE_INTEGER, Number.MAX_SAFE_INTEGER],
    int32: [-2147483648, 2147483647],
    uint32: [0, 4294967295],
    float32: [-34028234663852886e22, 3.4028234663852886e38],
    float64: [-Number.MAX_VALUE, Number.MAX_VALUE]
  };
  var BIGINT_FORMAT_RANGES = {
    int64: [/* @__PURE__*/BigInt("-9223372036854775808"), /* @__PURE__*/BigInt("9223372036854775807")],
    uint64: [/* @__PURE__*/BigInt(0), /* @__PURE__*/BigInt("18446744073709551615")]
  };
  function pick(schema, mask) {
    var currDef = schema._zod.def;
    var def = mergeDefs(schema._zod.def, {
      get shape() {
        var newShape = {};
        for (var key in mask) {
          if (!(key in currDef.shape)) {
            throw new Error("Unrecognized key: \"".concat(key, "\""));
          }
          if (!mask[key]) continue;
          newShape[key] = currDef.shape[key];
        }
        assignProp(this, "shape", newShape); // self-caching
        return newShape;
      },
      checks: []
    });
    return clone(schema, def);
  }
  function omit(schema, mask) {
    var currDef = schema._zod.def;
    var def = mergeDefs(schema._zod.def, {
      get shape() {
        var newShape = _objectSpread2({}, schema._zod.def.shape);
        for (var key in mask) {
          if (!(key in currDef.shape)) {
            throw new Error("Unrecognized key: \"".concat(key, "\""));
          }
          if (!mask[key]) continue;
          delete newShape[key];
        }
        assignProp(this, "shape", newShape); // self-caching
        return newShape;
      },
      checks: []
    });
    return clone(schema, def);
  }
  function extend(schema, shape) {
    if (!isPlainObject(shape)) {
      throw new Error("Invalid input to extend: expected a plain object");
    }
    var checks = schema._zod.def.checks;
    var hasChecks = checks && checks.length > 0;
    if (hasChecks) {
      throw new Error("Object schemas containing refinements cannot be extended. Use `.safeExtend()` instead.");
    }
    var def = mergeDefs(schema._zod.def, {
      get shape() {
        var _shape = _objectSpread2(_objectSpread2({}, schema._zod.def.shape), shape);
        assignProp(this, "shape", _shape); // self-caching
        return _shape;
      },
      checks: []
    });
    return clone(schema, def);
  }
  function safeExtend(schema, shape) {
    if (!isPlainObject(shape)) {
      throw new Error("Invalid input to safeExtend: expected a plain object");
    }
    var def = _objectSpread2(_objectSpread2({}, schema._zod.def), {}, {
      get shape() {
        var _shape = _objectSpread2(_objectSpread2({}, schema._zod.def.shape), shape);
        assignProp(this, "shape", _shape); // self-caching
        return _shape;
      },
      checks: schema._zod.def.checks
    });
    return clone(schema, def);
  }
  function merge(a, b) {
    var def = mergeDefs(a._zod.def, {
      get shape() {
        var _shape = _objectSpread2(_objectSpread2({}, a._zod.def.shape), b._zod.def.shape);
        assignProp(this, "shape", _shape); // self-caching
        return _shape;
      },
      get catchall() {
        return b._zod.def.catchall;
      },
      checks: [] // delete existing checks
    });
    return clone(a, def);
  }
  function partial(Class, schema, mask) {
    var def = mergeDefs(schema._zod.def, {
      get shape() {
        var oldShape = schema._zod.def.shape;
        var shape = _objectSpread2({}, oldShape);
        if (mask) {
          for (var key in mask) {
            if (!(key in oldShape)) {
              throw new Error("Unrecognized key: \"".concat(key, "\""));
            }
            if (!mask[key]) continue;
            // if (oldShape[key]!._zod.optin === "optional") continue;
            shape[key] = Class ? new Class({
              type: "optional",
              innerType: oldShape[key]
            }) : oldShape[key];
          }
        } else {
          for (var _key2 in oldShape) {
            // if (oldShape[key]!._zod.optin === "optional") continue;
            shape[_key2] = Class ? new Class({
              type: "optional",
              innerType: oldShape[_key2]
            }) : oldShape[_key2];
          }
        }
        assignProp(this, "shape", shape); // self-caching
        return shape;
      },
      checks: []
    });
    return clone(schema, def);
  }
  function required(Class, schema, mask) {
    var def = mergeDefs(schema._zod.def, {
      get shape() {
        var oldShape = schema._zod.def.shape;
        var shape = _objectSpread2({}, oldShape);
        if (mask) {
          for (var key in mask) {
            if (!(key in shape)) {
              throw new Error("Unrecognized key: \"".concat(key, "\""));
            }
            if (!mask[key]) continue;
            // overwrite with non-optional
            shape[key] = new Class({
              type: "nonoptional",
              innerType: oldShape[key]
            });
          }
        } else {
          for (var _key3 in oldShape) {
            // overwrite with non-optional
            shape[_key3] = new Class({
              type: "nonoptional",
              innerType: oldShape[_key3]
            });
          }
        }
        assignProp(this, "shape", shape); // self-caching
        return shape;
      },
      checks: []
    });
    return clone(schema, def);
  }
  // invalid_type | too_big | too_small | invalid_format | not_multiple_of | unrecognized_keys | invalid_union | invalid_key | invalid_element | invalid_value | custom
  function aborted(x) {
    var startIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    if (x.aborted === true) return true;
    for (var i = startIndex; i < x.issues.length; i++) {
      var _x$issues$i;
      if (((_x$issues$i = x.issues[i]) === null || _x$issues$i === void 0 ? void 0 : _x$issues$i["continue"]) !== true) {
        return true;
      }
    }
    return false;
  }
  function prefixIssues(path, issues) {
    return issues.map(function (iss) {
      var _a$path;
      var _a;
      (_a$path = (_a = iss).path) !== null && _a$path !== void 0 ? _a$path : _a.path = [];
      iss.path.unshift(path);
      return iss;
    });
  }
  function unwrapMessage(message) {
    return typeof message === "string" ? message : message === null || message === void 0 ? void 0 : message.message;
  }
  function finalizeIssue(iss, ctx, config) {
    var _iss$path;
    var full = _objectSpread2(_objectSpread2({}, iss), {}, {
      path: (_iss$path = iss.path) !== null && _iss$path !== void 0 ? _iss$path : []
    });
    // for backwards compatibility
    if (!iss.message) {
      var _ref5, _ref6, _ref7, _unwrapMessage, _iss$inst, _iss$inst$error, _ctx$error, _config$customError, _config$localeError;
      var message = (_ref5 = (_ref6 = (_ref7 = (_unwrapMessage = unwrapMessage((_iss$inst = iss.inst) === null || _iss$inst === void 0 || (_iss$inst = _iss$inst._zod.def) === null || _iss$inst === void 0 || (_iss$inst$error = _iss$inst.error) === null || _iss$inst$error === void 0 ? void 0 : _iss$inst$error.call(_iss$inst, iss))) !== null && _unwrapMessage !== void 0 ? _unwrapMessage : unwrapMessage(ctx === null || ctx === void 0 || (_ctx$error = ctx.error) === null || _ctx$error === void 0 ? void 0 : _ctx$error.call(ctx, iss))) !== null && _ref7 !== void 0 ? _ref7 : unwrapMessage((_config$customError = config.customError) === null || _config$customError === void 0 ? void 0 : _config$customError.call(config, iss))) !== null && _ref6 !== void 0 ? _ref6 : unwrapMessage((_config$localeError = config.localeError) === null || _config$localeError === void 0 ? void 0 : _config$localeError.call(config, iss))) !== null && _ref5 !== void 0 ? _ref5 : "Invalid input";
      full.message = message;
    }
    // delete (full as any).def;
    delete full.inst;
    delete full["continue"];
    if (!(ctx !== null && ctx !== void 0 && ctx.reportInput)) {
      delete full.input;
    }
    return full;
  }
  function getSizableOrigin(input) {
    if (input instanceof Set) return "set";
    if (input instanceof Map) return "map";
    // @ts-ignore
    if (input instanceof File) return "file";
    return "unknown";
  }
  function getLengthableOrigin(input) {
    if (Array.isArray(input)) return "array";
    if (typeof input === "string") return "string";
    return "unknown";
  }
  function issue() {
    for (var _len2 = arguments.length, args = new Array(_len2), _key4 = 0; _key4 < _len2; _key4++) {
      args[_key4] = arguments[_key4];
    }
    var iss = args[0],
      input = args[1],
      inst = args[2];
    if (typeof iss === "string") {
      return {
        message: iss,
        code: "custom",
        input: input,
        inst: inst
      };
    }
    return _objectSpread2({}, iss);
  }
  function cleanEnum(obj) {
    return Object.entries(obj).filter(function (_ref8) {
      var _ref9 = _slicedToArray(_ref8, 2),
        k = _ref9[0];
        _ref9[1];
      // return true if NaN, meaning it's not a number, thus a string key
      return Number.isNaN(Number.parseInt(k, 10));
    }).map(function (el) {
      return el[1];
    });
  }
  // Codec utility functions
  function base64ToUint8Array(base64) {
    var binaryString = atob(base64);
    var bytes = new Uint8Array(binaryString.length);
    for (var i = 0; i < binaryString.length; i++) {
      bytes[i] = binaryString.charCodeAt(i);
    }
    return bytes;
  }
  function uint8ArrayToBase64(bytes) {
    var binaryString = "";
    for (var i = 0; i < bytes.length; i++) {
      binaryString += String.fromCharCode(bytes[i]);
    }
    return btoa(binaryString);
  }
  function base64urlToUint8Array(base64url) {
    var base64 = base64url.replace(/-/g, "+").replace(/_/g, "/");
    var padding = "=".repeat((4 - base64.length % 4) % 4);
    return base64ToUint8Array(base64 + padding);
  }
  function uint8ArrayToBase64url(bytes) {
    return uint8ArrayToBase64(bytes).replace(/\+/g, "-").replace(/\//g, "_").replace(/=/g, "");
  }
  function hexToUint8Array(hex) {
    var cleanHex = hex.replace(/^0x/, "");
    if (cleanHex.length % 2 !== 0) {
      throw new Error("Invalid hex string length");
    }
    var bytes = new Uint8Array(cleanHex.length / 2);
    for (var i = 0; i < cleanHex.length; i += 2) {
      bytes[i / 2] = Number.parseInt(cleanHex.slice(i, i + 2), 16);
    }
    return bytes;
  }
  function uint8ArrayToHex(bytes) {
    return Array.from(bytes).map(function (b) {
      return b.toString(16).padStart(2, "0");
    }).join("");
  }
  // instanceof
  var Class = /*#__PURE__*/_createClass(function Class() {
    _classCallCheck(this, Class);
  });

  var util = /*#__PURE__*/Object.freeze({
    __proto__: null,
    BIGINT_FORMAT_RANGES: BIGINT_FORMAT_RANGES,
    Class: Class,
    NUMBER_FORMAT_RANGES: NUMBER_FORMAT_RANGES,
    aborted: aborted,
    allowsEval: allowsEval,
    assert: assert,
    assertEqual: assertEqual,
    assertIs: assertIs,
    assertNever: assertNever,
    assertNotEqual: assertNotEqual,
    assignProp: assignProp,
    base64ToUint8Array: base64ToUint8Array,
    base64urlToUint8Array: base64urlToUint8Array,
    cached: cached,
    captureStackTrace: captureStackTrace,
    cleanEnum: cleanEnum,
    cleanRegex: cleanRegex,
    clone: clone,
    cloneDef: cloneDef,
    createTransparentProxy: createTransparentProxy,
    defineLazy: defineLazy,
    esc: esc,
    escapeRegex: escapeRegex,
    extend: extend,
    finalizeIssue: finalizeIssue,
    floatSafeRemainder: floatSafeRemainder,
    getElementAtPath: getElementAtPath,
    getEnumValues: getEnumValues,
    getLengthableOrigin: getLengthableOrigin,
    getParsedType: getParsedType,
    getSizableOrigin: getSizableOrigin,
    hexToUint8Array: hexToUint8Array,
    isObject: isObject,
    isPlainObject: isPlainObject,
    issue: issue,
    joinValues: joinValues,
    jsonStringifyReplacer: jsonStringifyReplacer,
    merge: merge,
    mergeDefs: mergeDefs,
    normalizeParams: normalizeParams,
    nullish: nullish$1,
    numKeys: numKeys,
    objectClone: objectClone,
    omit: omit,
    optionalKeys: optionalKeys,
    partial: partial,
    pick: pick,
    prefixIssues: prefixIssues,
    primitiveTypes: primitiveTypes,
    promiseAllObject: promiseAllObject,
    propertyKeyTypes: propertyKeyTypes,
    randomString: randomString,
    required: required,
    safeExtend: safeExtend,
    shallowClone: shallowClone,
    stringifyPrimitive: stringifyPrimitive,
    uint8ArrayToBase64: uint8ArrayToBase64,
    uint8ArrayToBase64url: uint8ArrayToBase64url,
    uint8ArrayToHex: uint8ArrayToHex,
    unwrapMessage: unwrapMessage
  });

  var initializer$1 = function initializer(inst, def) {
    inst.name = "$ZodError";
    Object.defineProperty(inst, "_zod", {
      value: inst._zod,
      enumerable: false
    });
    Object.defineProperty(inst, "issues", {
      value: def,
      enumerable: false
    });
    inst.message = JSON.stringify(def, jsonStringifyReplacer, 2);
    Object.defineProperty(inst, "toString", {
      value: function value() {
        return inst.message;
      },
      enumerable: false
    });
  };
  var $ZodError = $constructor("$ZodError", initializer$1);
  var $ZodRealError = $constructor("$ZodError", initializer$1, {
    Parent: Error
  });
  function flattenError(error) {
    var mapper = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (issue) {
      return issue.message;
    };
    var fieldErrors = {};
    var formErrors = [];
    var _iterator = _createForOfIteratorHelper(error.issues),
      _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var sub = _step.value;
        if (sub.path.length > 0) {
          fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];
          fieldErrors[sub.path[0]].push(mapper(sub));
        } else {
          formErrors.push(mapper(sub));
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
    return {
      formErrors: formErrors,
      fieldErrors: fieldErrors
    };
  }
  function formatError(error) {
    var mapper = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (issue) {
      return issue.message;
    };
    var fieldErrors = {
      _errors: []
    };
    var _processError = function processError(error) {
      var _iterator2 = _createForOfIteratorHelper(error.issues),
        _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var issue = _step2.value;
          if (issue.code === "invalid_union" && issue.errors.length) {
            issue.errors.map(function (issues) {
              return _processError({
                issues: issues
              });
            });
          } else if (issue.code === "invalid_key") {
            _processError({
              issues: issue.issues
            });
          } else if (issue.code === "invalid_element") {
            _processError({
              issues: issue.issues
            });
          } else if (issue.path.length === 0) {
            fieldErrors._errors.push(mapper(issue));
          } else {
            var curr = fieldErrors;
            var i = 0;
            while (i < issue.path.length) {
              var el = issue.path[i];
              var terminal = i === issue.path.length - 1;
              if (!terminal) {
                curr[el] = curr[el] || {
                  _errors: []
                };
              } else {
                curr[el] = curr[el] || {
                  _errors: []
                };
                curr[el]._errors.push(mapper(issue));
              }
              curr = curr[el];
              i++;
            }
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    };
    _processError(error);
    return fieldErrors;
  }
  function treeifyError(error) {
    var mapper = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (issue) {
      return issue.message;
    };
    var result = {
      errors: []
    };
    var _processError2 = function processError(error) {
      var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
      var _a, _b;
      var _iterator3 = _createForOfIteratorHelper(error.issues),
        _step3;
      try {
        var _loop = function _loop() {
          var issue = _step3.value;
          if (issue.code === "invalid_union" && issue.errors.length) {
            // regular union error
            issue.errors.map(function (issues) {
              return _processError2({
                issues: issues
              }, issue.path);
            });
          } else if (issue.code === "invalid_key") {
            _processError2({
              issues: issue.issues
            }, issue.path);
          } else if (issue.code === "invalid_element") {
            _processError2({
              issues: issue.issues
            }, issue.path);
          } else {
            var fullpath = [].concat(_toConsumableArray(path), _toConsumableArray(issue.path));
            if (fullpath.length === 0) {
              result.errors.push(mapper(issue));
              return 1; // continue
            }
            var curr = result;
            var i = 0;
            while (i < fullpath.length) {
              var el = fullpath[i];
              var terminal = i === fullpath.length - 1;
              if (typeof el === "string") {
                var _curr$properties, _a$el;
                (_curr$properties = curr.properties) !== null && _curr$properties !== void 0 ? _curr$properties : curr.properties = {};
                (_a$el = (_a = curr.properties)[el]) !== null && _a$el !== void 0 ? _a$el : _a[el] = {
                  errors: []
                };
                curr = curr.properties[el];
              } else {
                var _curr$items, _b$el;
                (_curr$items = curr.items) !== null && _curr$items !== void 0 ? _curr$items : curr.items = [];
                (_b$el = (_b = curr.items)[el]) !== null && _b$el !== void 0 ? _b$el : _b[el] = {
                  errors: []
                };
                curr = curr.items[el];
              }
              if (terminal) {
                curr.errors.push(mapper(issue));
              }
              i++;
            }
          }
        };
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          if (_loop()) continue;
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
    };
    _processError2(error);
    return result;
  }
  /** Format a ZodError as a human-readable string in the following form.
   *
   * From
   *
   * ```ts
   * ZodError {
   *   issues: [
   *     {
   *       expected: 'string',
   *       code: 'invalid_type',
   *       path: [ 'username' ],
   *       message: 'Invalid input: expected string'
   *     },
   *     {
   *       expected: 'number',
   *       code: 'invalid_type',
   *       path: [ 'favoriteNumbers', 1 ],
   *       message: 'Invalid input: expected number'
   *     }
   *   ];
   * }
   * ```
   *
   * to
   *
   * ```
   * username
   *   ✖ Expected number, received string at "username
   * favoriteNumbers[0]
   *   ✖ Invalid input: expected number
   * ```
   */
  function toDotPath(_path) {
    var segs = [];
    var path = _path.map(function (seg) {
      return _typeof(seg) === "object" ? seg.key : seg;
    });
    var _iterator4 = _createForOfIteratorHelper(path),
      _step4;
    try {
      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
        var seg = _step4.value;
        if (typeof seg === "number") segs.push("[".concat(seg, "]"));else if (_typeof(seg) === "symbol") segs.push("[".concat(JSON.stringify(String(seg)), "]"));else if (/[^\w$]/.test(seg)) segs.push("[".concat(JSON.stringify(seg), "]"));else {
          if (segs.length) segs.push(".");
          segs.push(seg);
        }
      }
    } catch (err) {
      _iterator4.e(err);
    } finally {
      _iterator4.f();
    }
    return segs.join("");
  }
  function prettifyError(error) {
    var lines = [];
    // sort by path length
    var issues = _toConsumableArray(error.issues).sort(function (a, b) {
      var _a$path, _b$path;
      return ((_a$path = a.path) !== null && _a$path !== void 0 ? _a$path : []).length - ((_b$path = b.path) !== null && _b$path !== void 0 ? _b$path : []).length;
    });
    // Process each issue
    var _iterator5 = _createForOfIteratorHelper(issues),
      _step5;
    try {
      for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
        var _issue$path;
        var issue = _step5.value;
        lines.push("\u2716 ".concat(issue.message));
        if ((_issue$path = issue.path) !== null && _issue$path !== void 0 && _issue$path.length) lines.push("  \u2192 at ".concat(toDotPath(issue.path)));
      }
      // Convert Map to formatted string
    } catch (err) {
      _iterator5.e(err);
    } finally {
      _iterator5.f();
    }
    return lines.join("\n");
  }

  var _parse = function _parse(_Err) {
    return function (schema, value, _ctx, _params) {
      var ctx = _ctx ? Object.assign(_ctx, {
        async: false
      }) : {
        async: false
      };
      var result = schema._zod.run({
        value: value,
        issues: []
      }, ctx);
      if (result instanceof Promise) {
        throw new $ZodAsyncError();
      }
      if (result.issues.length) {
        var _params$Err;
        var e = new ((_params$Err = _params === null || _params === void 0 ? void 0 : _params.Err) !== null && _params$Err !== void 0 ? _params$Err : _Err)(result.issues.map(function (iss) {
          return finalizeIssue(iss, ctx, config());
        }));
        captureStackTrace(e, _params === null || _params === void 0 ? void 0 : _params.callee);
        throw e;
      }
      return result.value;
    };
  };
  var parse$1 = /* @__PURE__*/_parse($ZodRealError);
  var _parseAsync = function _parseAsync(_Err) {
    return /*#__PURE__*/function () {
      var _ref = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee(schema, value, _ctx, params) {
        var ctx, result, _params$Err2, e;
        return _regenerator().w(function (_context) {
          while (1) switch (_context.n) {
            case 0:
              ctx = _ctx ? Object.assign(_ctx, {
                async: true
              }) : {
                async: true
              };
              result = schema._zod.run({
                value: value,
                issues: []
              }, ctx);
              if (!(result instanceof Promise)) {
                _context.n = 2;
                break;
              }
              _context.n = 1;
              return result;
            case 1:
              result = _context.v;
            case 2:
              if (!result.issues.length) {
                _context.n = 3;
                break;
              }
              e = new ((_params$Err2 = params === null || params === void 0 ? void 0 : params.Err) !== null && _params$Err2 !== void 0 ? _params$Err2 : _Err)(result.issues.map(function (iss) {
                return finalizeIssue(iss, ctx, config());
              }));
              captureStackTrace(e, params === null || params === void 0 ? void 0 : params.callee);
              throw e;
            case 3:
              return _context.a(2, result.value);
          }
        }, _callee);
      }));
      return function (_x, _x2, _x3, _x4) {
        return _ref.apply(this, arguments);
      };
    }();
  };
  var parseAsync$1 = /* @__PURE__*/_parseAsync($ZodRealError);
  var _safeParse = function _safeParse(_Err) {
    return function (schema, value, _ctx) {
      var ctx = _ctx ? _objectSpread2(_objectSpread2({}, _ctx), {}, {
        async: false
      }) : {
        async: false
      };
      var result = schema._zod.run({
        value: value,
        issues: []
      }, ctx);
      if (result instanceof Promise) {
        throw new $ZodAsyncError();
      }
      return result.issues.length ? {
        success: false,
        error: new (_Err !== null && _Err !== void 0 ? _Err : $ZodError)(result.issues.map(function (iss) {
          return finalizeIssue(iss, ctx, config());
        }))
      } : {
        success: true,
        data: result.value
      };
    };
  };
  var safeParse$1 = /* @__PURE__*/_safeParse($ZodRealError);
  var _safeParseAsync = function _safeParseAsync(_Err) {
    return /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2(schema, value, _ctx) {
        var ctx, result;
        return _regenerator().w(function (_context2) {
          while (1) switch (_context2.n) {
            case 0:
              ctx = _ctx ? Object.assign(_ctx, {
                async: true
              }) : {
                async: true
              };
              result = schema._zod.run({
                value: value,
                issues: []
              }, ctx);
              if (!(result instanceof Promise)) {
                _context2.n = 2;
                break;
              }
              _context2.n = 1;
              return result;
            case 1:
              result = _context2.v;
            case 2:
              return _context2.a(2, result.issues.length ? {
                success: false,
                error: new _Err(result.issues.map(function (iss) {
                  return finalizeIssue(iss, ctx, config());
                }))
              } : {
                success: true,
                data: result.value
              });
          }
        }, _callee2);
      }));
      return function (_x5, _x6, _x7) {
        return _ref2.apply(this, arguments);
      };
    }();
  };
  var safeParseAsync$1 = /* @__PURE__*/_safeParseAsync($ZodRealError);
  var _encode = function _encode(_Err) {
    return function (schema, value, _ctx) {
      var ctx = _ctx ? Object.assign(_ctx, {
        direction: "backward"
      }) : {
        direction: "backward"
      };
      return _parse(_Err)(schema, value, ctx);
    };
  };
  var encode$1 = /* @__PURE__*/_encode($ZodRealError);
  var _decode = function _decode(_Err) {
    return function (schema, value, _ctx) {
      return _parse(_Err)(schema, value, _ctx);
    };
  };
  var decode$1 = /* @__PURE__*/_decode($ZodRealError);
  var _encodeAsync = function _encodeAsync(_Err) {
    return /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee3(schema, value, _ctx) {
        var ctx;
        return _regenerator().w(function (_context3) {
          while (1) switch (_context3.n) {
            case 0:
              ctx = _ctx ? Object.assign(_ctx, {
                direction: "backward"
              }) : {
                direction: "backward"
              };
              return _context3.a(2, _parseAsync(_Err)(schema, value, ctx));
          }
        }, _callee3);
      }));
      return function (_x8, _x9, _x0) {
        return _ref3.apply(this, arguments);
      };
    }();
  };
  var encodeAsync$1 = /* @__PURE__*/_encodeAsync($ZodRealError);
  var _decodeAsync = function _decodeAsync(_Err) {
    return /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee4(schema, value, _ctx) {
        return _regenerator().w(function (_context4) {
          while (1) switch (_context4.n) {
            case 0:
              return _context4.a(2, _parseAsync(_Err)(schema, value, _ctx));
          }
        }, _callee4);
      }));
      return function (_x1, _x10, _x11) {
        return _ref4.apply(this, arguments);
      };
    }();
  };
  var decodeAsync$1 = /* @__PURE__*/_decodeAsync($ZodRealError);
  var _safeEncode = function _safeEncode(_Err) {
    return function (schema, value, _ctx) {
      var ctx = _ctx ? Object.assign(_ctx, {
        direction: "backward"
      }) : {
        direction: "backward"
      };
      return _safeParse(_Err)(schema, value, ctx);
    };
  };
  var safeEncode$1 = /* @__PURE__*/_safeEncode($ZodRealError);
  var _safeDecode = function _safeDecode(_Err) {
    return function (schema, value, _ctx) {
      return _safeParse(_Err)(schema, value, _ctx);
    };
  };
  var safeDecode$1 = /* @__PURE__*/_safeDecode($ZodRealError);
  var _safeEncodeAsync = function _safeEncodeAsync(_Err) {
    return /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee5(schema, value, _ctx) {
        var ctx;
        return _regenerator().w(function (_context5) {
          while (1) switch (_context5.n) {
            case 0:
              ctx = _ctx ? Object.assign(_ctx, {
                direction: "backward"
              }) : {
                direction: "backward"
              };
              return _context5.a(2, _safeParseAsync(_Err)(schema, value, ctx));
          }
        }, _callee5);
      }));
      return function (_x12, _x13, _x14) {
        return _ref5.apply(this, arguments);
      };
    }();
  };
  var safeEncodeAsync$1 = /* @__PURE__*/_safeEncodeAsync($ZodRealError);
  var _safeDecodeAsync = function _safeDecodeAsync(_Err) {
    return /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee6(schema, value, _ctx) {
        return _regenerator().w(function (_context6) {
          while (1) switch (_context6.n) {
            case 0:
              return _context6.a(2, _safeParseAsync(_Err)(schema, value, _ctx));
          }
        }, _callee6);
      }));
      return function (_x15, _x16, _x17) {
        return _ref6.apply(this, arguments);
      };
    }();
  };
  var safeDecodeAsync$1 = /* @__PURE__*/_safeDecodeAsync($ZodRealError);

  var cuid$1 = /^[cC][^\s-]{8,}$/;
  var cuid2$1 = /^[0-9a-z]+$/;
  var ulid$1 = /^[0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{26}$/;
  var xid$1 = /^[0-9a-vA-V]{20}$/;
  var ksuid$1 = /^[A-Za-z0-9]{27}$/;
  var nanoid$1 = /^[a-zA-Z0-9_-]{21}$/;
  /** ISO 8601-1 duration regex. Does not support the 8601-2 extensions like negative durations or fractional/negative components. */
  var duration$1 = /^P(?:(\d+W)|(?!.*W)(?=\d|T\d)(\d+Y)?(\d+M)?(\d+D)?(T(?=\d)(\d+H)?(\d+M)?(\d+([.,]\d+)?S)?)?)$/;
  /** Implements ISO 8601-2 extensions like explicit +- prefixes, mixing weeks with other units, and fractional/negative components. */
  var extendedDuration = /^[-+]?P(?!$)(?:(?:[-+]?\d+Y)|(?:[-+]?\d+[.,]\d+Y$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:(?:[-+]?\d+W)|(?:[-+]?\d+[.,]\d+W$))?(?:(?:[-+]?\d+D)|(?:[-+]?\d+[.,]\d+D$))?(?:T(?=[\d+-])(?:(?:[-+]?\d+H)|(?:[-+]?\d+[.,]\d+H$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:[-+]?\d+(?:[.,]\d+)?S)?)??$/;
  /** A regex for any UUID-like identifier: 8-4-4-4-12 hex pattern */
  var guid$1 = /^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})$/;
  /** Returns a regex for validating an RFC 9562/4122 UUID.
   *
   * @param version Optionally specify a version 1-8. If no version is specified, all versions are supported. */
  var uuid$1 = function uuid(version) {
    if (!version) return /^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$/;
    return new RegExp("^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-".concat(version, "[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12})$"));
  };
  var uuid4 = /*@__PURE__*/uuid$1(4);
  var uuid6 = /*@__PURE__*/uuid$1(6);
  var uuid7 = /*@__PURE__*/uuid$1(7);
  /** Practical email validation */
  var email$1 = /^(?!\.)(?!.*\.\.)([A-Za-z0-9_'+\-\.]*)[A-Za-z0-9_+-]@([A-Za-z0-9][A-Za-z0-9\-]*\.)+[A-Za-z]{2,}$/;
  /** Equivalent to the HTML5 input[type=email] validation implemented by browsers. Source: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/email */
  var html5Email = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;
  /** The classic emailregex.com regex for RFC 5322-compliant emails */
  var rfc5322Email = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
  /** A loose regex that allows Unicode characters, enforces length limits, and that's about it. */
  var unicodeEmail = /^(?:[\0-\x08\x0E-\x1F!#-\?A-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uD7FF\uE000-\uFEFE\uFF00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]){1,64}@(?:[\0-\x08\x0E-\x1F!-\?A-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uD7FF\uE000-\uFEFE\uFF00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]){1,255}$/;
  var idnEmail = unicodeEmail;
  var browserEmail = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;
  // from https://thekevinscott.com/emojis-in-javascript/#writing-a-regular-expression
  var _emoji$1 = "^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$";
  function emoji$1() {
    return new RegExp(_emoji$1, "u");
  }
  var ipv4$1 = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/;
  var ipv6$1 = /^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$/;
  var cidrv4$1 = /^((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\/([0-9]|[1-2][0-9]|3[0-2])$/;
  var cidrv6$1 = /^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|::|([0-9a-fA-F]{1,4})?::([0-9a-fA-F]{1,4}:?){0,6})\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/;
  // https://stackoverflow.com/questions/7860392/determine-if-string-is-in-base64-using-javascript
  var base64$1 = /^$|^(?:[0-9a-zA-Z+/]{4})*(?:(?:[0-9a-zA-Z+/]{2}==)|(?:[0-9a-zA-Z+/]{3}=))?$/;
  var base64url$1 = /^[A-Za-z0-9_-]*$/;
  // based on https://stackoverflow.com/questions/106179/regular-expression-to-match-dns-hostname-or-ip-address
  // export const hostname: RegExp = /^([a-zA-Z0-9-]+\.)*[a-zA-Z0-9-]+$/;
  var hostname$1 = /^(?=.{1,253}\.?$)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[-0-9a-zA-Z]{0,61}[0-9a-zA-Z])?)*\.?$/;
  var domain = /^([a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?\.)+[a-zA-Z]{2,}$/;
  // https://blog.stevenlevithan.com/archives/validate-phone-number#r4-3 (regex sans spaces)
  var e164$1 = /^\+(?:[0-9]){6,14}[0-9]$/;
  // const dateSource = `((\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\d|30)|(02)-(0[1-9]|1\\d|2[0-8])))`;
  var dateSource = "(?:(?:\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-(?:(?:0[13578]|1[02])-(?:0[1-9]|[12]\\d|3[01])|(?:0[469]|11)-(?:0[1-9]|[12]\\d|30)|(?:02)-(?:0[1-9]|1\\d|2[0-8])))";
  var date$3 = /*@__PURE__*/new RegExp("^".concat(dateSource, "$"));
  function timeSource(args) {
    var hhmm = "(?:[01]\\d|2[0-3]):[0-5]\\d";
    var regex = typeof args.precision === "number" ? args.precision === -1 ? "".concat(hhmm) : args.precision === 0 ? "".concat(hhmm, ":[0-5]\\d") : "".concat(hhmm, ":[0-5]\\d\\.\\d{").concat(args.precision, "}") : "".concat(hhmm, "(?::[0-5]\\d(?:\\.\\d+)?)?");
    return regex;
  }
  function time$1(args) {
    return new RegExp("^".concat(timeSource(args), "$"));
  }
  // Adapted from https://stackoverflow.com/a/3143231
  function datetime$1(args) {
    var time = timeSource({
      precision: args.precision
    });
    var opts = ["Z"];
    if (args.local) opts.push("");
    // if (args.offset) opts.push(`([+-]\\d{2}:\\d{2})`);
    if (args.offset) opts.push("([+-](?:[01]\\d|2[0-3]):[0-5]\\d)");
    var timeRegex = "".concat(time, "(?:").concat(opts.join("|"), ")");
    return new RegExp("^".concat(dateSource, "T(?:").concat(timeRegex, ")$"));
  }
  var string$2 = function string(params) {
    var _params$minimum, _params$maximum;
    var regex = params ? "[\\s\\S]{".concat((_params$minimum = params === null || params === void 0 ? void 0 : params.minimum) !== null && _params$minimum !== void 0 ? _params$minimum : 0, ",").concat((_params$maximum = params === null || params === void 0 ? void 0 : params.maximum) !== null && _params$maximum !== void 0 ? _params$maximum : "", "}") : "[\\s\\S]*";
    return new RegExp("^".concat(regex, "$"));
  };
  var bigint$2 = /^-?\d+n?$/;
  var integer = /^-?\d+$/;
  var number$2 = /^-?\d+(?:\.\d+)?/;
  var _boolean$3 = /^(?:true|false)$/i;
  var _null$2 = /^null$/i;
  var _undefined$2 = /^undefined$/i;
  // regex for string with no uppercase letters
  var lowercase = /^[^A-Z]*$/;
  // regex for string with no lowercase letters
  var uppercase = /^[^a-z]*$/;
  // regex for hexadecimal strings (any length)
  var hex$1 = /^[0-9a-fA-F]*$/;
  // Hash regexes for different algorithms and encodings
  // Helper function to create base64 regex with exact length and padding
  function fixedBase64(bodyLength, padding) {
    return new RegExp("^[A-Za-z0-9+/]{".concat(bodyLength, "}").concat(padding, "$"));
  }
  // Helper function to create base64url regex with exact length (no padding)
  function fixedBase64url(length) {
    return new RegExp("^[A-Za-z0-9_-]{".concat(length, "}$"));
  }
  // MD5 (16 bytes): base64 = 24 chars total (22 + "==")
  var md5_hex = /^[0-9a-fA-F]{32}$/;
  var md5_base64 = /*@__PURE__*/fixedBase64(22, "==");
  var md5_base64url = /*@__PURE__*/fixedBase64url(22);
  // SHA1 (20 bytes): base64 = 28 chars total (27 + "=")
  var sha1_hex = /^[0-9a-fA-F]{40}$/;
  var sha1_base64 = /*@__PURE__*/fixedBase64(27, "=");
  var sha1_base64url = /*@__PURE__*/fixedBase64url(27);
  // SHA256 (32 bytes): base64 = 44 chars total (43 + "=")
  var sha256_hex = /^[0-9a-fA-F]{64}$/;
  var sha256_base64 = /*@__PURE__*/fixedBase64(43, "=");
  var sha256_base64url = /*@__PURE__*/fixedBase64url(43);
  // SHA384 (48 bytes): base64 = 64 chars total (no padding)
  var sha384_hex = /^[0-9a-fA-F]{96}$/;
  var sha384_base64 = /*@__PURE__*/fixedBase64(64, "");
  var sha384_base64url = /*@__PURE__*/fixedBase64url(64);
  // SHA512 (64 bytes): base64 = 88 chars total (86 + "==")
  var sha512_hex = /^[0-9a-fA-F]{128}$/;
  var sha512_base64 = /*@__PURE__*/fixedBase64(86, "==");
  var sha512_base64url = /*@__PURE__*/fixedBase64url(86);

  var regexes = /*#__PURE__*/Object.freeze({
    __proto__: null,
    base64: base64$1,
    base64url: base64url$1,
    bigint: bigint$2,
    boolean: _boolean$3,
    browserEmail: browserEmail,
    cidrv4: cidrv4$1,
    cidrv6: cidrv6$1,
    cuid: cuid$1,
    cuid2: cuid2$1,
    date: date$3,
    datetime: datetime$1,
    domain: domain,
    duration: duration$1,
    e164: e164$1,
    email: email$1,
    emoji: emoji$1,
    extendedDuration: extendedDuration,
    guid: guid$1,
    hex: hex$1,
    hostname: hostname$1,
    html5Email: html5Email,
    idnEmail: idnEmail,
    integer: integer,
    ipv4: ipv4$1,
    ipv6: ipv6$1,
    ksuid: ksuid$1,
    lowercase: lowercase,
    md5_base64: md5_base64,
    md5_base64url: md5_base64url,
    md5_hex: md5_hex,
    nanoid: nanoid$1,
    null: _null$2,
    number: number$2,
    rfc5322Email: rfc5322Email,
    sha1_base64: sha1_base64,
    sha1_base64url: sha1_base64url,
    sha1_hex: sha1_hex,
    sha256_base64: sha256_base64,
    sha256_base64url: sha256_base64url,
    sha256_hex: sha256_hex,
    sha384_base64: sha384_base64,
    sha384_base64url: sha384_base64url,
    sha384_hex: sha384_hex,
    sha512_base64: sha512_base64,
    sha512_base64url: sha512_base64url,
    sha512_hex: sha512_hex,
    string: string$2,
    time: time$1,
    ulid: ulid$1,
    undefined: _undefined$2,
    unicodeEmail: unicodeEmail,
    uppercase: uppercase,
    uuid: uuid$1,
    uuid4: uuid4,
    uuid6: uuid6,
    uuid7: uuid7,
    xid: xid$1
  });

  var $ZodCheck = /*@__PURE__*/$constructor("$ZodCheck", function (inst, def) {
    var _inst$_zod, _a$onattach;
    var _a;
    (_inst$_zod = inst._zod) !== null && _inst$_zod !== void 0 ? _inst$_zod : inst._zod = {};
    inst._zod.def = def;
    (_a$onattach = (_a = inst._zod).onattach) !== null && _a$onattach !== void 0 ? _a$onattach : _a.onattach = [];
  });
  var numericOriginMap = {
    number: "number",
    bigint: "bigint",
    object: "date"
  };
  var $ZodCheckLessThan = /*@__PURE__*/$constructor("$ZodCheckLessThan", function (inst, def) {
    $ZodCheck.init(inst, def);
    var origin = numericOriginMap[_typeof(def.value)];
    inst._zod.onattach.push(function (inst) {
      var _ref;
      var bag = inst._zod.bag;
      var curr = (_ref = def.inclusive ? bag.maximum : bag.exclusiveMaximum) !== null && _ref !== void 0 ? _ref : Number.POSITIVE_INFINITY;
      if (def.value < curr) {
        if (def.inclusive) bag.maximum = def.value;else bag.exclusiveMaximum = def.value;
      }
    });
    inst._zod.check = function (payload) {
      if (def.inclusive ? payload.value <= def.value : payload.value < def.value) {
        return;
      }
      payload.issues.push({
        origin: origin,
        code: "too_big",
        maximum: def.value,
        input: payload.value,
        inclusive: def.inclusive,
        inst: inst,
        "continue": !def.abort
      });
    };
  });
  var $ZodCheckGreaterThan = /*@__PURE__*/$constructor("$ZodCheckGreaterThan", function (inst, def) {
    $ZodCheck.init(inst, def);
    var origin = numericOriginMap[_typeof(def.value)];
    inst._zod.onattach.push(function (inst) {
      var _ref2;
      var bag = inst._zod.bag;
      var curr = (_ref2 = def.inclusive ? bag.minimum : bag.exclusiveMinimum) !== null && _ref2 !== void 0 ? _ref2 : Number.NEGATIVE_INFINITY;
      if (def.value > curr) {
        if (def.inclusive) bag.minimum = def.value;else bag.exclusiveMinimum = def.value;
      }
    });
    inst._zod.check = function (payload) {
      if (def.inclusive ? payload.value >= def.value : payload.value > def.value) {
        return;
      }
      payload.issues.push({
        origin: origin,
        code: "too_small",
        minimum: def.value,
        input: payload.value,
        inclusive: def.inclusive,
        inst: inst,
        "continue": !def.abort
      });
    };
  });
  var $ZodCheckMultipleOf = /*@__PURE__*/$constructor("$ZodCheckMultipleOf", function (inst, def) {
    $ZodCheck.init(inst, def);
    inst._zod.onattach.push(function (inst) {
      var _a$multipleOf;
      var _a;
      (_a$multipleOf = (_a = inst._zod.bag).multipleOf) !== null && _a$multipleOf !== void 0 ? _a$multipleOf : _a.multipleOf = def.value;
    });
    inst._zod.check = function (payload) {
      if (_typeof(payload.value) !== _typeof(def.value)) throw new Error("Cannot mix number and bigint in multiple_of check.");
      var isMultiple = typeof payload.value === "bigint" ? payload.value % def.value === BigInt(0) : floatSafeRemainder(payload.value, def.value) === 0;
      if (isMultiple) return;
      payload.issues.push({
        origin: _typeof(payload.value),
        code: "not_multiple_of",
        divisor: def.value,
        input: payload.value,
        inst: inst,
        "continue": !def.abort
      });
    };
  });
  var $ZodCheckNumberFormat = /*@__PURE__*/$constructor("$ZodCheckNumberFormat", function (inst, def) {
    var _def$format;
    $ZodCheck.init(inst, def); // no format checks
    def.format = def.format || "float64";
    var isInt = (_def$format = def.format) === null || _def$format === void 0 ? void 0 : _def$format.includes("int");
    var origin = isInt ? "int" : "number";
    var _util$NUMBER_FORMAT_R = _slicedToArray(NUMBER_FORMAT_RANGES[def.format], 2),
      minimum = _util$NUMBER_FORMAT_R[0],
      maximum = _util$NUMBER_FORMAT_R[1];
    inst._zod.onattach.push(function (inst) {
      var bag = inst._zod.bag;
      bag.format = def.format;
      bag.minimum = minimum;
      bag.maximum = maximum;
      if (isInt) bag.pattern = integer;
    });
    inst._zod.check = function (payload) {
      var input = payload.value;
      if (isInt) {
        if (!Number.isInteger(input)) {
          // invalid_format issue
          // payload.issues.push({
          //   expected: def.format,
          //   format: def.format,
          //   code: "invalid_format",
          //   input,
          //   inst,
          // });
          // invalid_type issue
          payload.issues.push({
            expected: origin,
            format: def.format,
            code: "invalid_type",
            "continue": false,
            input: input,
            inst: inst
          });
          return;
          // not_multiple_of issue
          // payload.issues.push({
          //   code: "not_multiple_of",
          //   origin: "number",
          //   input,
          //   inst,
          //   divisor: 1,
          // });
        }
        if (!Number.isSafeInteger(input)) {
          if (input > 0) {
            // too_big
            payload.issues.push({
              input: input,
              code: "too_big",
              maximum: Number.MAX_SAFE_INTEGER,
              note: "Integers must be within the safe integer range.",
              inst: inst,
              origin: origin,
              "continue": !def.abort
            });
          } else {
            // too_small
            payload.issues.push({
              input: input,
              code: "too_small",
              minimum: Number.MIN_SAFE_INTEGER,
              note: "Integers must be within the safe integer range.",
              inst: inst,
              origin: origin,
              "continue": !def.abort
            });
          }
          return;
        }
      }
      if (input < minimum) {
        payload.issues.push({
          origin: "number",
          input: input,
          code: "too_small",
          minimum: minimum,
          inclusive: true,
          inst: inst,
          "continue": !def.abort
        });
      }
      if (input > maximum) {
        payload.issues.push({
          origin: "number",
          input: input,
          code: "too_big",
          maximum: maximum,
          inst: inst
        });
      }
    };
  });
  var $ZodCheckBigIntFormat = /*@__PURE__*/$constructor("$ZodCheckBigIntFormat", function (inst, def) {
    $ZodCheck.init(inst, def); // no format checks
    var _util$BIGINT_FORMAT_R = _slicedToArray(BIGINT_FORMAT_RANGES[def.format], 2),
      minimum = _util$BIGINT_FORMAT_R[0],
      maximum = _util$BIGINT_FORMAT_R[1];
    inst._zod.onattach.push(function (inst) {
      var bag = inst._zod.bag;
      bag.format = def.format;
      bag.minimum = minimum;
      bag.maximum = maximum;
    });
    inst._zod.check = function (payload) {
      var input = payload.value;
      if (input < minimum) {
        payload.issues.push({
          origin: "bigint",
          input: input,
          code: "too_small",
          minimum: minimum,
          inclusive: true,
          inst: inst,
          "continue": !def.abort
        });
      }
      if (input > maximum) {
        payload.issues.push({
          origin: "bigint",
          input: input,
          code: "too_big",
          maximum: maximum,
          inst: inst
        });
      }
    };
  });
  var $ZodCheckMaxSize = /*@__PURE__*/$constructor("$ZodCheckMaxSize", function (inst, def) {
    var _a$when;
    var _a;
    $ZodCheck.init(inst, def);
    (_a$when = (_a = inst._zod.def).when) !== null && _a$when !== void 0 ? _a$when : _a.when = function (payload) {
      var val = payload.value;
      return !nullish$1(val) && val.size !== undefined;
    };
    inst._zod.onattach.push(function (inst) {
      var _inst$_zod$bag$maximu;
      var curr = (_inst$_zod$bag$maximu = inst._zod.bag.maximum) !== null && _inst$_zod$bag$maximu !== void 0 ? _inst$_zod$bag$maximu : Number.POSITIVE_INFINITY;
      if (def.maximum < curr) inst._zod.bag.maximum = def.maximum;
    });
    inst._zod.check = function (payload) {
      var input = payload.value;
      var size = input.size;
      if (size <= def.maximum) return;
      payload.issues.push({
        origin: getSizableOrigin(input),
        code: "too_big",
        maximum: def.maximum,
        inclusive: true,
        input: input,
        inst: inst,
        "continue": !def.abort
      });
    };
  });
  var $ZodCheckMinSize = /*@__PURE__*/$constructor("$ZodCheckMinSize", function (inst, def) {
    var _a$when2;
    var _a;
    $ZodCheck.init(inst, def);
    (_a$when2 = (_a = inst._zod.def).when) !== null && _a$when2 !== void 0 ? _a$when2 : _a.when = function (payload) {
      var val = payload.value;
      return !nullish$1(val) && val.size !== undefined;
    };
    inst._zod.onattach.push(function (inst) {
      var _inst$_zod$bag$minimu;
      var curr = (_inst$_zod$bag$minimu = inst._zod.bag.minimum) !== null && _inst$_zod$bag$minimu !== void 0 ? _inst$_zod$bag$minimu : Number.NEGATIVE_INFINITY;
      if (def.minimum > curr) inst._zod.bag.minimum = def.minimum;
    });
    inst._zod.check = function (payload) {
      var input = payload.value;
      var size = input.size;
      if (size >= def.minimum) return;
      payload.issues.push({
        origin: getSizableOrigin(input),
        code: "too_small",
        minimum: def.minimum,
        inclusive: true,
        input: input,
        inst: inst,
        "continue": !def.abort
      });
    };
  });
  var $ZodCheckSizeEquals = /*@__PURE__*/$constructor("$ZodCheckSizeEquals", function (inst, def) {
    var _a$when3;
    var _a;
    $ZodCheck.init(inst, def);
    (_a$when3 = (_a = inst._zod.def).when) !== null && _a$when3 !== void 0 ? _a$when3 : _a.when = function (payload) {
      var val = payload.value;
      return !nullish$1(val) && val.size !== undefined;
    };
    inst._zod.onattach.push(function (inst) {
      var bag = inst._zod.bag;
      bag.minimum = def.size;
      bag.maximum = def.size;
      bag.size = def.size;
    });
    inst._zod.check = function (payload) {
      var input = payload.value;
      var size = input.size;
      if (size === def.size) return;
      var tooBig = size > def.size;
      payload.issues.push(_objectSpread2(_objectSpread2({
        origin: getSizableOrigin(input)
      }, tooBig ? {
        code: "too_big",
        maximum: def.size
      } : {
        code: "too_small",
        minimum: def.size
      }), {}, {
        inclusive: true,
        exact: true,
        input: payload.value,
        inst: inst,
        "continue": !def.abort
      }));
    };
  });
  var $ZodCheckMaxLength = /*@__PURE__*/$constructor("$ZodCheckMaxLength", function (inst, def) {
    var _a$when4;
    var _a;
    $ZodCheck.init(inst, def);
    (_a$when4 = (_a = inst._zod.def).when) !== null && _a$when4 !== void 0 ? _a$when4 : _a.when = function (payload) {
      var val = payload.value;
      return !nullish$1(val) && val.length !== undefined;
    };
    inst._zod.onattach.push(function (inst) {
      var _inst$_zod$bag$maximu2;
      var curr = (_inst$_zod$bag$maximu2 = inst._zod.bag.maximum) !== null && _inst$_zod$bag$maximu2 !== void 0 ? _inst$_zod$bag$maximu2 : Number.POSITIVE_INFINITY;
      if (def.maximum < curr) inst._zod.bag.maximum = def.maximum;
    });
    inst._zod.check = function (payload) {
      var input = payload.value;
      var length = input.length;
      if (length <= def.maximum) return;
      var origin = getLengthableOrigin(input);
      payload.issues.push({
        origin: origin,
        code: "too_big",
        maximum: def.maximum,
        inclusive: true,
        input: input,
        inst: inst,
        "continue": !def.abort
      });
    };
  });
  var $ZodCheckMinLength = /*@__PURE__*/$constructor("$ZodCheckMinLength", function (inst, def) {
    var _a$when5;
    var _a;
    $ZodCheck.init(inst, def);
    (_a$when5 = (_a = inst._zod.def).when) !== null && _a$when5 !== void 0 ? _a$when5 : _a.when = function (payload) {
      var val = payload.value;
      return !nullish$1(val) && val.length !== undefined;
    };
    inst._zod.onattach.push(function (inst) {
      var _inst$_zod$bag$minimu2;
      var curr = (_inst$_zod$bag$minimu2 = inst._zod.bag.minimum) !== null && _inst$_zod$bag$minimu2 !== void 0 ? _inst$_zod$bag$minimu2 : Number.NEGATIVE_INFINITY;
      if (def.minimum > curr) inst._zod.bag.minimum = def.minimum;
    });
    inst._zod.check = function (payload) {
      var input = payload.value;
      var length = input.length;
      if (length >= def.minimum) return;
      var origin = getLengthableOrigin(input);
      payload.issues.push({
        origin: origin,
        code: "too_small",
        minimum: def.minimum,
        inclusive: true,
        input: input,
        inst: inst,
        "continue": !def.abort
      });
    };
  });
  var $ZodCheckLengthEquals = /*@__PURE__*/$constructor("$ZodCheckLengthEquals", function (inst, def) {
    var _a$when6;
    var _a;
    $ZodCheck.init(inst, def);
    (_a$when6 = (_a = inst._zod.def).when) !== null && _a$when6 !== void 0 ? _a$when6 : _a.when = function (payload) {
      var val = payload.value;
      return !nullish$1(val) && val.length !== undefined;
    };
    inst._zod.onattach.push(function (inst) {
      var bag = inst._zod.bag;
      bag.minimum = def.length;
      bag.maximum = def.length;
      bag.length = def.length;
    });
    inst._zod.check = function (payload) {
      var input = payload.value;
      var length = input.length;
      if (length === def.length) return;
      var origin = getLengthableOrigin(input);
      var tooBig = length > def.length;
      payload.issues.push(_objectSpread2(_objectSpread2({
        origin: origin
      }, tooBig ? {
        code: "too_big",
        maximum: def.length
      } : {
        code: "too_small",
        minimum: def.length
      }), {}, {
        inclusive: true,
        exact: true,
        input: payload.value,
        inst: inst,
        "continue": !def.abort
      }));
    };
  });
  var $ZodCheckStringFormat = /*@__PURE__*/$constructor("$ZodCheckStringFormat", function (inst, def) {
    var _a$check, _b$check;
    var _a, _b;
    $ZodCheck.init(inst, def);
    inst._zod.onattach.push(function (inst) {
      var bag = inst._zod.bag;
      bag.format = def.format;
      if (def.pattern) {
        var _bag$patterns;
        (_bag$patterns = bag.patterns) !== null && _bag$patterns !== void 0 ? _bag$patterns : bag.patterns = new Set();
        bag.patterns.add(def.pattern);
      }
    });
    if (def.pattern) (_a$check = (_a = inst._zod).check) !== null && _a$check !== void 0 ? _a$check : _a.check = function (payload) {
      def.pattern.lastIndex = 0;
      if (def.pattern.test(payload.value)) return;
      payload.issues.push(_objectSpread2(_objectSpread2({
        origin: "string",
        code: "invalid_format",
        format: def.format,
        input: payload.value
      }, def.pattern ? {
        pattern: def.pattern.toString()
      } : {}), {}, {
        inst: inst,
        "continue": !def.abort
      }));
    };else (_b$check = (_b = inst._zod).check) !== null && _b$check !== void 0 ? _b$check : _b.check = function () {};
  });
  var $ZodCheckRegex = /*@__PURE__*/$constructor("$ZodCheckRegex", function (inst, def) {
    $ZodCheckStringFormat.init(inst, def);
    inst._zod.check = function (payload) {
      def.pattern.lastIndex = 0;
      if (def.pattern.test(payload.value)) return;
      payload.issues.push({
        origin: "string",
        code: "invalid_format",
        format: "regex",
        input: payload.value,
        pattern: def.pattern.toString(),
        inst: inst,
        "continue": !def.abort
      });
    };
  });
  var $ZodCheckLowerCase = /*@__PURE__*/$constructor("$ZodCheckLowerCase", function (inst, def) {
    var _def$pattern;
    (_def$pattern = def.pattern) !== null && _def$pattern !== void 0 ? _def$pattern : def.pattern = lowercase;
    $ZodCheckStringFormat.init(inst, def);
  });
  var $ZodCheckUpperCase = /*@__PURE__*/$constructor("$ZodCheckUpperCase", function (inst, def) {
    var _def$pattern2;
    (_def$pattern2 = def.pattern) !== null && _def$pattern2 !== void 0 ? _def$pattern2 : def.pattern = uppercase;
    $ZodCheckStringFormat.init(inst, def);
  });
  var $ZodCheckIncludes = /*@__PURE__*/$constructor("$ZodCheckIncludes", function (inst, def) {
    $ZodCheck.init(inst, def);
    var escapedRegex = escapeRegex(def.includes);
    var pattern = new RegExp(typeof def.position === "number" ? "^.{".concat(def.position, "}").concat(escapedRegex) : escapedRegex);
    def.pattern = pattern;
    inst._zod.onattach.push(function (inst) {
      var _bag$patterns2;
      var bag = inst._zod.bag;
      (_bag$patterns2 = bag.patterns) !== null && _bag$patterns2 !== void 0 ? _bag$patterns2 : bag.patterns = new Set();
      bag.patterns.add(pattern);
    });
    inst._zod.check = function (payload) {
      if (payload.value.includes(def.includes, def.position)) return;
      payload.issues.push({
        origin: "string",
        code: "invalid_format",
        format: "includes",
        includes: def.includes,
        input: payload.value,
        inst: inst,
        "continue": !def.abort
      });
    };
  });
  var $ZodCheckStartsWith = /*@__PURE__*/$constructor("$ZodCheckStartsWith", function (inst, def) {
    var _def$pattern3;
    $ZodCheck.init(inst, def);
    var pattern = new RegExp("^".concat(escapeRegex(def.prefix), ".*"));
    (_def$pattern3 = def.pattern) !== null && _def$pattern3 !== void 0 ? _def$pattern3 : def.pattern = pattern;
    inst._zod.onattach.push(function (inst) {
      var _bag$patterns3;
      var bag = inst._zod.bag;
      (_bag$patterns3 = bag.patterns) !== null && _bag$patterns3 !== void 0 ? _bag$patterns3 : bag.patterns = new Set();
      bag.patterns.add(pattern);
    });
    inst._zod.check = function (payload) {
      if (payload.value.startsWith(def.prefix)) return;
      payload.issues.push({
        origin: "string",
        code: "invalid_format",
        format: "starts_with",
        prefix: def.prefix,
        input: payload.value,
        inst: inst,
        "continue": !def.abort
      });
    };
  });
  var $ZodCheckEndsWith = /*@__PURE__*/$constructor("$ZodCheckEndsWith", function (inst, def) {
    var _def$pattern4;
    $ZodCheck.init(inst, def);
    var pattern = new RegExp(".*".concat(escapeRegex(def.suffix), "$"));
    (_def$pattern4 = def.pattern) !== null && _def$pattern4 !== void 0 ? _def$pattern4 : def.pattern = pattern;
    inst._zod.onattach.push(function (inst) {
      var _bag$patterns4;
      var bag = inst._zod.bag;
      (_bag$patterns4 = bag.patterns) !== null && _bag$patterns4 !== void 0 ? _bag$patterns4 : bag.patterns = new Set();
      bag.patterns.add(pattern);
    });
    inst._zod.check = function (payload) {
      if (payload.value.endsWith(def.suffix)) return;
      payload.issues.push({
        origin: "string",
        code: "invalid_format",
        format: "ends_with",
        suffix: def.suffix,
        input: payload.value,
        inst: inst,
        "continue": !def.abort
      });
    };
  });
  ///////////////////////////////////
  /////    $ZodCheckProperty    /////
  ///////////////////////////////////
  function handleCheckPropertyResult(result, payload, property) {
    if (result.issues.length) {
      var _payload$issues;
      (_payload$issues = payload.issues).push.apply(_payload$issues, _toConsumableArray(prefixIssues(property, result.issues)));
    }
  }
  var $ZodCheckProperty = /*@__PURE__*/$constructor("$ZodCheckProperty", function (inst, def) {
    $ZodCheck.init(inst, def);
    inst._zod.check = function (payload) {
      var result = def.schema._zod.run({
        value: payload.value[def.property],
        issues: []
      }, {});
      if (result instanceof Promise) {
        return result.then(function (result) {
          return handleCheckPropertyResult(result, payload, def.property);
        });
      }
      handleCheckPropertyResult(result, payload, def.property);
      return;
    };
  });
  var $ZodCheckMimeType = /*@__PURE__*/$constructor("$ZodCheckMimeType", function (inst, def) {
    $ZodCheck.init(inst, def);
    var mimeSet = new Set(def.mime);
    inst._zod.onattach.push(function (inst) {
      inst._zod.bag.mime = def.mime;
    });
    inst._zod.check = function (payload) {
      if (mimeSet.has(payload.value.type)) return;
      payload.issues.push({
        code: "invalid_value",
        values: def.mime,
        input: payload.value.type,
        inst: inst,
        "continue": !def.abort
      });
    };
  });
  var $ZodCheckOverwrite = /*@__PURE__*/$constructor("$ZodCheckOverwrite", function (inst, def) {
    $ZodCheck.init(inst, def);
    inst._zod.check = function (payload) {
      payload.value = def.tx(payload.value);
    };
  });

  var Doc = /*#__PURE__*/function () {
    function Doc() {
      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      _classCallCheck(this, Doc);
      this.content = [];
      this.indent = 0;
      if (this) this.args = args;
    }
    return _createClass(Doc, [{
      key: "indented",
      value: function indented(fn) {
        this.indent += 1;
        fn(this);
        this.indent -= 1;
      }
    }, {
      key: "write",
      value: function write(arg) {
        var _this = this;
        if (typeof arg === "function") {
          arg(this, {
            execution: "sync"
          });
          arg(this, {
            execution: "async"
          });
          return;
        }
        var content = arg;
        var lines = content.split("\n").filter(function (x) {
          return x;
        });
        var minIndent = Math.min.apply(Math, _toConsumableArray(lines.map(function (x) {
          return x.length - x.trimStart().length;
        })));
        var dedented = lines.map(function (x) {
          return x.slice(minIndent);
        }).map(function (x) {
          return " ".repeat(_this.indent * 2) + x;
        });
        var _iterator = _createForOfIteratorHelper(dedented),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var line = _step.value;
            this.content.push(line);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }
    }, {
      key: "compile",
      value: function compile() {
        var _this$content;
        var F = Function;
        var args = this === null || this === void 0 ? void 0 : this.args;
        var content = (_this$content = this === null || this === void 0 ? void 0 : this.content) !== null && _this$content !== void 0 ? _this$content : [""];
        var lines = _toConsumableArray(content.map(function (x) {
          return "  ".concat(x);
        }));
        // console.log(lines.join("\n"));
        return _construct(F, _toConsumableArray(args).concat([lines.join("\n")]));
      }
    }]);
  }();

  var version = {
    major: 4,
    minor: 1,
    patch: 12
  };

  var $ZodType = /*@__PURE__*/$constructor("$ZodType", function (inst, def) {
    var _inst$_zod$def$checks;
    var _a;
    inst !== null && inst !== void 0 ? inst : inst = {};
    inst._zod.def = def; // set _def property
    inst._zod.bag = inst._zod.bag || {}; // initialize _bag object
    inst._zod.version = version;
    var checks = _toConsumableArray((_inst$_zod$def$checks = inst._zod.def.checks) !== null && _inst$_zod$def$checks !== void 0 ? _inst$_zod$def$checks : []);
    // if inst is itself a checks.$ZodCheck, run it as a check
    if (inst._zod.traits.has("$ZodCheck")) {
      checks.unshift(inst);
    }
    var _iterator = _createForOfIteratorHelper(checks),
      _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var ch = _step.value;
        var _iterator3 = _createForOfIteratorHelper(ch._zod.onattach),
          _step3;
        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var fn = _step3.value;
            fn(inst);
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
    if (checks.length === 0) {
      var _a$deferred, _inst$_zod$deferred;
      // deferred initializer
      // inst._zod.parse is not yet defined
      (_a$deferred = (_a = inst._zod).deferred) !== null && _a$deferred !== void 0 ? _a$deferred : _a.deferred = [];
      (_inst$_zod$deferred = inst._zod.deferred) === null || _inst$_zod$deferred === void 0 || _inst$_zod$deferred.push(function () {
        inst._zod.run = inst._zod.parse;
      });
    } else {
      var runChecks = function runChecks(payload, checks, ctx) {
        var isAborted = aborted(payload);
        var asyncResult;
        var _iterator2 = _createForOfIteratorHelper(checks),
          _step2;
        try {
          var _loop = function _loop() {
              var ch = _step2.value;
              if (ch._zod.def.when) {
                var shouldRun = ch._zod.def.when(payload);
                if (!shouldRun) return 0; // continue
              } else if (isAborted) {
                return 0; // continue
              }
              var currLen = payload.issues.length;
              var _ = ch._zod.check(payload);
              if (_ instanceof Promise && (ctx === null || ctx === void 0 ? void 0 : ctx.async) === false) {
                throw new $ZodAsyncError();
              }
              if (asyncResult || _ instanceof Promise) {
                asyncResult = (asyncResult !== null && asyncResult !== void 0 ? asyncResult : Promise.resolve()).then(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee() {
                  var nextLen;
                  return _regenerator().w(function (_context) {
                    while (1) switch (_context.n) {
                      case 0:
                        _context.n = 1;
                        return _;
                      case 1:
                        nextLen = payload.issues.length;
                        if (!(nextLen === currLen)) {
                          _context.n = 2;
                          break;
                        }
                        return _context.a(2);
                      case 2:
                        if (!isAborted) isAborted = aborted(payload, currLen);
                      case 3:
                        return _context.a(2);
                    }
                  }, _callee);
                })));
              } else {
                var nextLen = payload.issues.length;
                if (nextLen === currLen) return 0; // continue
                if (!isAborted) isAborted = aborted(payload, currLen);
              }
            },
            _ret;
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            _ret = _loop();
            if (_ret === 0) continue;
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
        if (asyncResult) {
          return asyncResult.then(function () {
            return payload;
          });
        }
        return payload;
      };
      // const handleChecksResult = (
      //   checkResult: ParsePayload,
      //   originalResult: ParsePayload,
      //   ctx: ParseContextInternal
      // ): util.MaybeAsync<ParsePayload> => {
      //   // if the checks mutated the value && there are no issues, re-parse the result
      //   if (checkResult.value !== originalResult.value && !checkResult.issues.length)
      //     return inst._zod.parse(checkResult, ctx);
      //   return originalResult;
      // };
      var handleCanaryResult = function handleCanaryResult(canary, payload, ctx) {
        // abort if the canary is aborted
        if (aborted(canary)) {
          canary.aborted = true;
          return canary;
        }
        // run checks first, then
        var checkResult = runChecks(payload, checks, ctx);
        if (checkResult instanceof Promise) {
          if (ctx.async === false) throw new $ZodAsyncError();
          return checkResult.then(function (checkResult) {
            return inst._zod.parse(checkResult, ctx);
          });
        }
        return inst._zod.parse(checkResult, ctx);
      };
      inst._zod.run = function (payload, ctx) {
        if (ctx.skipChecks) {
          return inst._zod.parse(payload, ctx);
        }
        if (ctx.direction === "backward") {
          // run canary
          // initial pass (no checks)
          var canary = inst._zod.parse({
            value: payload.value,
            issues: []
          }, _objectSpread2(_objectSpread2({}, ctx), {}, {
            skipChecks: true
          }));
          if (canary instanceof Promise) {
            return canary.then(function (canary) {
              return handleCanaryResult(canary, payload, ctx);
            });
          }
          return handleCanaryResult(canary, payload, ctx);
        }
        // forward
        var result = inst._zod.parse(payload, ctx);
        if (result instanceof Promise) {
          if (ctx.async === false) throw new $ZodAsyncError();
          return result.then(function (result) {
            return runChecks(result, checks, ctx);
          });
        }
        return runChecks(result, checks, ctx);
      };
    }
    inst["~standard"] = {
      validate: function validate(value) {
        try {
          var _r$error;
          var r = safeParse$1(inst, value);
          return r.success ? {
            value: r.data
          } : {
            issues: (_r$error = r.error) === null || _r$error === void 0 ? void 0 : _r$error.issues
          };
        } catch (_) {
          return safeParseAsync$1(inst, value).then(function (r) {
            var _r$error2;
            return r.success ? {
              value: r.data
            } : {
              issues: (_r$error2 = r.error) === null || _r$error2 === void 0 ? void 0 : _r$error2.issues
            };
          });
        }
      },
      vendor: "zod",
      version: 1
    };
  });
  var $ZodString = /*@__PURE__*/$constructor("$ZodString", function (inst, def) {
    var _pop, _inst$_zod$bag$patter, _inst$_zod$bag;
    $ZodType.init(inst, def);
    inst._zod.pattern = (_pop = _toConsumableArray((_inst$_zod$bag$patter = inst === null || inst === void 0 || (_inst$_zod$bag = inst._zod.bag) === null || _inst$_zod$bag === void 0 ? void 0 : _inst$_zod$bag.patterns) !== null && _inst$_zod$bag$patter !== void 0 ? _inst$_zod$bag$patter : []).pop()) !== null && _pop !== void 0 ? _pop : string$2(inst._zod.bag);
    inst._zod.parse = function (payload, _) {
      if (def.coerce) try {
        payload.value = String(payload.value);
      } catch (_) {}
      if (typeof payload.value === "string") return payload;
      payload.issues.push({
        expected: "string",
        code: "invalid_type",
        input: payload.value,
        inst: inst
      });
      return payload;
    };
  });
  var $ZodStringFormat = /*@__PURE__*/$constructor("$ZodStringFormat", function (inst, def) {
    // check initialization must come first
    $ZodCheckStringFormat.init(inst, def);
    $ZodString.init(inst, def);
  });
  var $ZodGUID = /*@__PURE__*/$constructor("$ZodGUID", function (inst, def) {
    var _def$pattern;
    (_def$pattern = def.pattern) !== null && _def$pattern !== void 0 ? _def$pattern : def.pattern = guid$1;
    $ZodStringFormat.init(inst, def);
  });
  var $ZodUUID = /*@__PURE__*/$constructor("$ZodUUID", function (inst, def) {
    var _def$pattern3;
    if (def.version) {
      var _def$pattern2;
      var versionMap = {
        v1: 1,
        v2: 2,
        v3: 3,
        v4: 4,
        v5: 5,
        v6: 6,
        v7: 7,
        v8: 8
      };
      var v = versionMap[def.version];
      if (v === undefined) throw new Error("Invalid UUID version: \"".concat(def.version, "\""));
      (_def$pattern2 = def.pattern) !== null && _def$pattern2 !== void 0 ? _def$pattern2 : def.pattern = uuid$1(v);
    } else (_def$pattern3 = def.pattern) !== null && _def$pattern3 !== void 0 ? _def$pattern3 : def.pattern = uuid$1();
    $ZodStringFormat.init(inst, def);
  });
  var $ZodEmail = /*@__PURE__*/$constructor("$ZodEmail", function (inst, def) {
    var _def$pattern4;
    (_def$pattern4 = def.pattern) !== null && _def$pattern4 !== void 0 ? _def$pattern4 : def.pattern = email$1;
    $ZodStringFormat.init(inst, def);
  });
  var $ZodURL = /*@__PURE__*/$constructor("$ZodURL", function (inst, def) {
    $ZodStringFormat.init(inst, def);
    inst._zod.check = function (payload) {
      try {
        // Trim whitespace from input
        var trimmed = payload.value.trim();
        // @ts-ignore
        var url = new URL(trimmed);
        if (def.hostname) {
          def.hostname.lastIndex = 0;
          if (!def.hostname.test(url.hostname)) {
            payload.issues.push({
              code: "invalid_format",
              format: "url",
              note: "Invalid hostname",
              pattern: hostname$1.source,
              input: payload.value,
              inst: inst,
              "continue": !def.abort
            });
          }
        }
        if (def.protocol) {
          def.protocol.lastIndex = 0;
          if (!def.protocol.test(url.protocol.endsWith(":") ? url.protocol.slice(0, -1) : url.protocol)) {
            payload.issues.push({
              code: "invalid_format",
              format: "url",
              note: "Invalid protocol",
              pattern: def.protocol.source,
              input: payload.value,
              inst: inst,
              "continue": !def.abort
            });
          }
        }
        // Set the output value based on normalize flag
        if (def.normalize) {
          // Use normalized URL
          payload.value = url.href;
        } else {
          // Preserve the original input (trimmed)
          payload.value = trimmed;
        }
        return;
      } catch (_) {
        payload.issues.push({
          code: "invalid_format",
          format: "url",
          input: payload.value,
          inst: inst,
          "continue": !def.abort
        });
      }
    };
  });
  var $ZodEmoji = /*@__PURE__*/$constructor("$ZodEmoji", function (inst, def) {
    var _def$pattern5;
    (_def$pattern5 = def.pattern) !== null && _def$pattern5 !== void 0 ? _def$pattern5 : def.pattern = emoji$1();
    $ZodStringFormat.init(inst, def);
  });
  var $ZodNanoID = /*@__PURE__*/$constructor("$ZodNanoID", function (inst, def) {
    var _def$pattern6;
    (_def$pattern6 = def.pattern) !== null && _def$pattern6 !== void 0 ? _def$pattern6 : def.pattern = nanoid$1;
    $ZodStringFormat.init(inst, def);
  });
  var $ZodCUID = /*@__PURE__*/$constructor("$ZodCUID", function (inst, def) {
    var _def$pattern7;
    (_def$pattern7 = def.pattern) !== null && _def$pattern7 !== void 0 ? _def$pattern7 : def.pattern = cuid$1;
    $ZodStringFormat.init(inst, def);
  });
  var $ZodCUID2 = /*@__PURE__*/$constructor("$ZodCUID2", function (inst, def) {
    var _def$pattern8;
    (_def$pattern8 = def.pattern) !== null && _def$pattern8 !== void 0 ? _def$pattern8 : def.pattern = cuid2$1;
    $ZodStringFormat.init(inst, def);
  });
  var $ZodULID = /*@__PURE__*/$constructor("$ZodULID", function (inst, def) {
    var _def$pattern9;
    (_def$pattern9 = def.pattern) !== null && _def$pattern9 !== void 0 ? _def$pattern9 : def.pattern = ulid$1;
    $ZodStringFormat.init(inst, def);
  });
  var $ZodXID = /*@__PURE__*/$constructor("$ZodXID", function (inst, def) {
    var _def$pattern0;
    (_def$pattern0 = def.pattern) !== null && _def$pattern0 !== void 0 ? _def$pattern0 : def.pattern = xid$1;
    $ZodStringFormat.init(inst, def);
  });
  var $ZodKSUID = /*@__PURE__*/$constructor("$ZodKSUID", function (inst, def) {
    var _def$pattern1;
    (_def$pattern1 = def.pattern) !== null && _def$pattern1 !== void 0 ? _def$pattern1 : def.pattern = ksuid$1;
    $ZodStringFormat.init(inst, def);
  });
  var $ZodISODateTime = /*@__PURE__*/$constructor("$ZodISODateTime", function (inst, def) {
    var _def$pattern10;
    (_def$pattern10 = def.pattern) !== null && _def$pattern10 !== void 0 ? _def$pattern10 : def.pattern = datetime$1(def);
    $ZodStringFormat.init(inst, def);
  });
  var $ZodISODate = /*@__PURE__*/$constructor("$ZodISODate", function (inst, def) {
    var _def$pattern11;
    (_def$pattern11 = def.pattern) !== null && _def$pattern11 !== void 0 ? _def$pattern11 : def.pattern = date$3;
    $ZodStringFormat.init(inst, def);
  });
  var $ZodISOTime = /*@__PURE__*/$constructor("$ZodISOTime", function (inst, def) {
    var _def$pattern12;
    (_def$pattern12 = def.pattern) !== null && _def$pattern12 !== void 0 ? _def$pattern12 : def.pattern = time$1(def);
    $ZodStringFormat.init(inst, def);
  });
  var $ZodISODuration = /*@__PURE__*/$constructor("$ZodISODuration", function (inst, def) {
    var _def$pattern13;
    (_def$pattern13 = def.pattern) !== null && _def$pattern13 !== void 0 ? _def$pattern13 : def.pattern = duration$1;
    $ZodStringFormat.init(inst, def);
  });
  var $ZodIPv4 = /*@__PURE__*/$constructor("$ZodIPv4", function (inst, def) {
    var _def$pattern14;
    (_def$pattern14 = def.pattern) !== null && _def$pattern14 !== void 0 ? _def$pattern14 : def.pattern = ipv4$1;
    $ZodStringFormat.init(inst, def);
    inst._zod.onattach.push(function (inst) {
      var bag = inst._zod.bag;
      bag.format = "ipv4";
    });
  });
  var $ZodIPv6 = /*@__PURE__*/$constructor("$ZodIPv6", function (inst, def) {
    var _def$pattern15;
    (_def$pattern15 = def.pattern) !== null && _def$pattern15 !== void 0 ? _def$pattern15 : def.pattern = ipv6$1;
    $ZodStringFormat.init(inst, def);
    inst._zod.onattach.push(function (inst) {
      var bag = inst._zod.bag;
      bag.format = "ipv6";
    });
    inst._zod.check = function (payload) {
      try {
        // @ts-ignore
        new URL("http://[".concat(payload.value, "]"));
        // return;
      } catch (_unused) {
        payload.issues.push({
          code: "invalid_format",
          format: "ipv6",
          input: payload.value,
          inst: inst,
          "continue": !def.abort
        });
      }
    };
  });
  var $ZodCIDRv4 = /*@__PURE__*/$constructor("$ZodCIDRv4", function (inst, def) {
    var _def$pattern16;
    (_def$pattern16 = def.pattern) !== null && _def$pattern16 !== void 0 ? _def$pattern16 : def.pattern = cidrv4$1;
    $ZodStringFormat.init(inst, def);
  });
  var $ZodCIDRv6 = /*@__PURE__*/$constructor("$ZodCIDRv6", function (inst, def) {
    var _def$pattern17;
    (_def$pattern17 = def.pattern) !== null && _def$pattern17 !== void 0 ? _def$pattern17 : def.pattern = cidrv6$1; // not used for validation
    $ZodStringFormat.init(inst, def);
    inst._zod.check = function (payload) {
      var parts = payload.value.split("/");
      try {
        if (parts.length !== 2) throw new Error();
        var _parts = _slicedToArray(parts, 2),
          address = _parts[0],
          prefix = _parts[1];
        if (!prefix) throw new Error();
        var prefixNum = Number(prefix);
        if ("".concat(prefixNum) !== prefix) throw new Error();
        if (prefixNum < 0 || prefixNum > 128) throw new Error();
        // @ts-ignore
        new URL("http://[".concat(address, "]"));
      } catch (_unused2) {
        payload.issues.push({
          code: "invalid_format",
          format: "cidrv6",
          input: payload.value,
          inst: inst,
          "continue": !def.abort
        });
      }
    };
  });
  //////////////////////////////   ZodBase64   //////////////////////////////
  function isValidBase64(data) {
    if (data === "") return true;
    if (data.length % 4 !== 0) return false;
    try {
      // @ts-ignore
      atob(data);
      return true;
    } catch (_unused3) {
      return false;
    }
  }
  var $ZodBase64 = /*@__PURE__*/$constructor("$ZodBase64", function (inst, def) {
    var _def$pattern18;
    (_def$pattern18 = def.pattern) !== null && _def$pattern18 !== void 0 ? _def$pattern18 : def.pattern = base64$1;
    $ZodStringFormat.init(inst, def);
    inst._zod.onattach.push(function (inst) {
      inst._zod.bag.contentEncoding = "base64";
    });
    inst._zod.check = function (payload) {
      if (isValidBase64(payload.value)) return;
      payload.issues.push({
        code: "invalid_format",
        format: "base64",
        input: payload.value,
        inst: inst,
        "continue": !def.abort
      });
    };
  });
  //////////////////////////////   ZodBase64   //////////////////////////////
  function isValidBase64URL(data) {
    if (!base64url$1.test(data)) return false;
    var base64 = data.replace(/[-_]/g, function (c) {
      return c === "-" ? "+" : "/";
    });
    var padded = base64.padEnd(Math.ceil(base64.length / 4) * 4, "=");
    return isValidBase64(padded);
  }
  var $ZodBase64URL = /*@__PURE__*/$constructor("$ZodBase64URL", function (inst, def) {
    var _def$pattern19;
    (_def$pattern19 = def.pattern) !== null && _def$pattern19 !== void 0 ? _def$pattern19 : def.pattern = base64url$1;
    $ZodStringFormat.init(inst, def);
    inst._zod.onattach.push(function (inst) {
      inst._zod.bag.contentEncoding = "base64url";
    });
    inst._zod.check = function (payload) {
      if (isValidBase64URL(payload.value)) return;
      payload.issues.push({
        code: "invalid_format",
        format: "base64url",
        input: payload.value,
        inst: inst,
        "continue": !def.abort
      });
    };
  });
  var $ZodE164 = /*@__PURE__*/$constructor("$ZodE164", function (inst, def) {
    var _def$pattern20;
    (_def$pattern20 = def.pattern) !== null && _def$pattern20 !== void 0 ? _def$pattern20 : def.pattern = e164$1;
    $ZodStringFormat.init(inst, def);
  });
  //////////////////////////////   ZodJWT   //////////////////////////////
  function isValidJWT(token) {
    var algorithm = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    try {
      var tokensParts = token.split(".");
      if (tokensParts.length !== 3) return false;
      var _tokensParts = _slicedToArray(tokensParts, 1),
        header = _tokensParts[0];
      if (!header) return false;
      // @ts-ignore
      var parsedHeader = JSON.parse(atob(header));
      if ("typ" in parsedHeader && (parsedHeader === null || parsedHeader === void 0 ? void 0 : parsedHeader.typ) !== "JWT") return false;
      if (!parsedHeader.alg) return false;
      if (algorithm && (!("alg" in parsedHeader) || parsedHeader.alg !== algorithm)) return false;
      return true;
    } catch (_unused4) {
      return false;
    }
  }
  var $ZodJWT = /*@__PURE__*/$constructor("$ZodJWT", function (inst, def) {
    $ZodStringFormat.init(inst, def);
    inst._zod.check = function (payload) {
      if (isValidJWT(payload.value, def.alg)) return;
      payload.issues.push({
        code: "invalid_format",
        format: "jwt",
        input: payload.value,
        inst: inst,
        "continue": !def.abort
      });
    };
  });
  var $ZodCustomStringFormat = /*@__PURE__*/$constructor("$ZodCustomStringFormat", function (inst, def) {
    $ZodStringFormat.init(inst, def);
    inst._zod.check = function (payload) {
      if (def.fn(payload.value)) return;
      payload.issues.push({
        code: "invalid_format",
        format: def.format,
        input: payload.value,
        inst: inst,
        "continue": !def.abort
      });
    };
  });
  var $ZodNumber = /*@__PURE__*/$constructor("$ZodNumber", function (inst, def) {
    var _inst$_zod$bag$patter2;
    $ZodType.init(inst, def);
    inst._zod.pattern = (_inst$_zod$bag$patter2 = inst._zod.bag.pattern) !== null && _inst$_zod$bag$patter2 !== void 0 ? _inst$_zod$bag$patter2 : number$2;
    inst._zod.parse = function (payload, _ctx) {
      if (def.coerce) try {
        payload.value = Number(payload.value);
      } catch (_) {}
      var input = payload.value;
      if (typeof input === "number" && !Number.isNaN(input) && Number.isFinite(input)) {
        return payload;
      }
      var received = typeof input === "number" ? Number.isNaN(input) ? "NaN" : !Number.isFinite(input) ? "Infinity" : undefined : undefined;
      payload.issues.push(_objectSpread2({
        expected: "number",
        code: "invalid_type",
        input: input,
        inst: inst
      }, received ? {
        received: received
      } : {}));
      return payload;
    };
  });
  var $ZodNumberFormat = /*@__PURE__*/$constructor("$ZodNumber", function (inst, def) {
    $ZodCheckNumberFormat.init(inst, def);
    $ZodNumber.init(inst, def); // no format checksp
  });
  var $ZodBoolean = /*@__PURE__*/$constructor("$ZodBoolean", function (inst, def) {
    $ZodType.init(inst, def);
    inst._zod.pattern = _boolean$3;
    inst._zod.parse = function (payload, _ctx) {
      if (def.coerce) try {
        payload.value = Boolean(payload.value);
      } catch (_) {}
      var input = payload.value;
      if (typeof input === "boolean") return payload;
      payload.issues.push({
        expected: "boolean",
        code: "invalid_type",
        input: input,
        inst: inst
      });
      return payload;
    };
  });
  var $ZodBigInt = /*@__PURE__*/$constructor("$ZodBigInt", function (inst, def) {
    $ZodType.init(inst, def);
    inst._zod.pattern = bigint$2;
    inst._zod.parse = function (payload, _ctx) {
      if (def.coerce) try {
        payload.value = BigInt(payload.value);
      } catch (_) {}
      if (typeof payload.value === "bigint") return payload;
      payload.issues.push({
        expected: "bigint",
        code: "invalid_type",
        input: payload.value,
        inst: inst
      });
      return payload;
    };
  });
  var $ZodBigIntFormat = /*@__PURE__*/$constructor("$ZodBigInt", function (inst, def) {
    $ZodCheckBigIntFormat.init(inst, def);
    $ZodBigInt.init(inst, def); // no format checks
  });
  var $ZodSymbol = /*@__PURE__*/$constructor("$ZodSymbol", function (inst, def) {
    $ZodType.init(inst, def);
    inst._zod.parse = function (payload, _ctx) {
      var input = payload.value;
      if (_typeof(input) === "symbol") return payload;
      payload.issues.push({
        expected: "symbol",
        code: "invalid_type",
        input: input,
        inst: inst
      });
      return payload;
    };
  });
  var $ZodUndefined = /*@__PURE__*/$constructor("$ZodUndefined", function (inst, def) {
    $ZodType.init(inst, def);
    inst._zod.pattern = _undefined$2;
    inst._zod.values = new Set([undefined]);
    inst._zod.optin = "optional";
    inst._zod.optout = "optional";
    inst._zod.parse = function (payload, _ctx) {
      var input = payload.value;
      if (typeof input === "undefined") return payload;
      payload.issues.push({
        expected: "undefined",
        code: "invalid_type",
        input: input,
        inst: inst
      });
      return payload;
    };
  });
  var $ZodNull = /*@__PURE__*/$constructor("$ZodNull", function (inst, def) {
    $ZodType.init(inst, def);
    inst._zod.pattern = _null$2;
    inst._zod.values = new Set([null]);
    inst._zod.parse = function (payload, _ctx) {
      var input = payload.value;
      if (input === null) return payload;
      payload.issues.push({
        expected: "null",
        code: "invalid_type",
        input: input,
        inst: inst
      });
      return payload;
    };
  });
  var $ZodAny = /*@__PURE__*/$constructor("$ZodAny", function (inst, def) {
    $ZodType.init(inst, def);
    inst._zod.parse = function (payload) {
      return payload;
    };
  });
  var $ZodUnknown = /*@__PURE__*/$constructor("$ZodUnknown", function (inst, def) {
    $ZodType.init(inst, def);
    inst._zod.parse = function (payload) {
      return payload;
    };
  });
  var $ZodNever = /*@__PURE__*/$constructor("$ZodNever", function (inst, def) {
    $ZodType.init(inst, def);
    inst._zod.parse = function (payload, _ctx) {
      payload.issues.push({
        expected: "never",
        code: "invalid_type",
        input: payload.value,
        inst: inst
      });
      return payload;
    };
  });
  var $ZodVoid = /*@__PURE__*/$constructor("$ZodVoid", function (inst, def) {
    $ZodType.init(inst, def);
    inst._zod.parse = function (payload, _ctx) {
      var input = payload.value;
      if (typeof input === "undefined") return payload;
      payload.issues.push({
        expected: "void",
        code: "invalid_type",
        input: input,
        inst: inst
      });
      return payload;
    };
  });
  var $ZodDate = /*@__PURE__*/$constructor("$ZodDate", function (inst, def) {
    $ZodType.init(inst, def);
    inst._zod.parse = function (payload, _ctx) {
      if (def.coerce) {
        try {
          payload.value = new Date(payload.value);
        } catch (_err) {}
      }
      var input = payload.value;
      var isDate = input instanceof Date;
      var isValidDate = isDate && !Number.isNaN(input.getTime());
      if (isValidDate) return payload;
      payload.issues.push(_objectSpread2(_objectSpread2({
        expected: "date",
        code: "invalid_type",
        input: input
      }, isDate ? {
        received: "Invalid Date"
      } : {}), {}, {
        inst: inst
      }));
      return payload;
    };
  });
  function handleArrayResult(result, _final, index) {
    if (result.issues.length) {
      var _final$issues;
      (_final$issues = _final.issues).push.apply(_final$issues, _toConsumableArray(prefixIssues(index, result.issues)));
    }
    _final.value[index] = result.value;
  }
  var $ZodArray = /*@__PURE__*/$constructor("$ZodArray", function (inst, def) {
    $ZodType.init(inst, def);
    inst._zod.parse = function (payload, ctx) {
      var input = payload.value;
      if (!Array.isArray(input)) {
        payload.issues.push({
          expected: "array",
          code: "invalid_type",
          input: input,
          inst: inst
        });
        return payload;
      }
      payload.value = Array(input.length);
      var proms = [];
      var _loop2 = function _loop2(i) {
        var item = input[i];
        var result = def.element._zod.run({
          value: item,
          issues: []
        }, ctx);
        if (result instanceof Promise) {
          proms.push(result.then(function (result) {
            return handleArrayResult(result, payload, i);
          }));
        } else {
          handleArrayResult(result, payload, i);
        }
      };
      for (var i = 0; i < input.length; i++) {
        _loop2(i);
      }
      if (proms.length) {
        return Promise.all(proms).then(function () {
          return payload;
        });
      }
      return payload; //handleArrayResultsAsync(parseResults, final);
    };
  });
  function handlePropertyResult(result, _final2, key, input) {
    if (result.issues.length) {
      var _final2$issues;
      (_final2$issues = _final2.issues).push.apply(_final2$issues, _toConsumableArray(prefixIssues(key, result.issues)));
    }
    if (result.value === undefined) {
      if (key in input) {
        _final2.value[key] = undefined;
      }
    } else {
      _final2.value[key] = result.value;
    }
  }
  function normalizeDef(def) {
    var keys = Object.keys(def.shape);
    for (var _i = 0, _keys = keys; _i < _keys.length; _i++) {
      var _def$shape;
      var k = _keys[_i];
      if (!((_def$shape = def.shape) !== null && _def$shape !== void 0 && (_def$shape = _def$shape[k]) !== null && _def$shape !== void 0 && (_def$shape = _def$shape._zod) !== null && _def$shape !== void 0 && (_def$shape = _def$shape.traits) !== null && _def$shape !== void 0 && _def$shape.has("$ZodType"))) {
        throw new Error("Invalid element at key \"".concat(k, "\": expected a Zod schema"));
      }
    }
    var okeys = optionalKeys(def.shape);
    return _objectSpread2(_objectSpread2({}, def), {}, {
      keys: keys,
      keySet: new Set(keys),
      numKeys: keys.length,
      optionalKeys: new Set(okeys)
    });
  }
  function handleCatchall(proms, input, payload, ctx, def, inst) {
    var unrecognized = [];
    // iterate over input keys
    var keySet = def.keySet;
    var _catchall = def.catchall._zod;
    var t = _catchall.def.type;
    var _loop3 = function _loop3() {
        var key = _Object$keys[_i2];
        if (keySet.has(key)) return 0; // continue
        if (t === "never") {
          unrecognized.push(key);
          return 0; // continue
        }
        var r = _catchall.run({
          value: input[key],
          issues: []
        }, ctx);
        if (r instanceof Promise) {
          proms.push(r.then(function (r) {
            return handlePropertyResult(r, payload, key, input);
          }));
        } else {
          handlePropertyResult(r, payload, key, input);
        }
      },
      _ret2;
    for (var _i2 = 0, _Object$keys = Object.keys(input); _i2 < _Object$keys.length; _i2++) {
      _ret2 = _loop3();
      if (_ret2 === 0) continue;
    }
    if (unrecognized.length) {
      payload.issues.push({
        code: "unrecognized_keys",
        keys: unrecognized,
        input: input,
        inst: inst
      });
    }
    if (!proms.length) return payload;
    return Promise.all(proms).then(function () {
      return payload;
    });
  }
  var $ZodObject = /*@__PURE__*/$constructor("$ZodObject", function (inst, def) {
    // requires cast because technically $ZodObject doesn't extend
    $ZodType.init(inst, def);
    // const sh = def.shape;
    var desc = Object.getOwnPropertyDescriptor(def, "shape");
    if (!(desc !== null && desc !== void 0 && desc.get)) {
      var sh = def.shape;
      Object.defineProperty(def, "shape", {
        get: function get() {
          var newSh = _objectSpread2({}, sh);
          Object.defineProperty(def, "shape", {
            value: newSh
          });
          return newSh;
        }
      });
    }
    var _normalized = cached(function () {
      return normalizeDef(def);
    });
    defineLazy(inst._zod, "propValues", function () {
      var shape = def.shape;
      var propValues = {};
      for (var key in shape) {
        var field = shape[key]._zod;
        if (field.values) {
          var _propValues$key;
          (_propValues$key = propValues[key]) !== null && _propValues$key !== void 0 ? _propValues$key : propValues[key] = new Set();
          var _iterator4 = _createForOfIteratorHelper(field.values),
            _step4;
          try {
            for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
              var v = _step4.value;
              propValues[key].add(v);
            }
          } catch (err) {
            _iterator4.e(err);
          } finally {
            _iterator4.f();
          }
        }
      }
      return propValues;
    });
    var isObject$1 = isObject;
    var catchall = def.catchall;
    var value;
    inst._zod.parse = function (payload, ctx) {
      value !== null && value !== void 0 ? value : value = _normalized.value;
      var input = payload.value;
      if (!isObject$1(input)) {
        payload.issues.push({
          expected: "object",
          code: "invalid_type",
          input: input,
          inst: inst
        });
        return payload;
      }
      payload.value = {};
      var proms = [];
      var shape = value.shape;
      var _iterator5 = _createForOfIteratorHelper(value.keys),
        _step5;
      try {
        var _loop4 = function _loop4() {
          var key = _step5.value;
          var el = shape[key];
          var r = el._zod.run({
            value: input[key],
            issues: []
          }, ctx);
          if (r instanceof Promise) {
            proms.push(r.then(function (r) {
              return handlePropertyResult(r, payload, key, input);
            }));
          } else {
            handlePropertyResult(r, payload, key, input);
          }
        };
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          _loop4();
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }
      if (!catchall) {
        return proms.length ? Promise.all(proms).then(function () {
          return payload;
        }) : payload;
      }
      return handleCatchall(proms, input, payload, ctx, _normalized.value, inst);
    };
  });
  var $ZodObjectJIT = /*@__PURE__*/$constructor("$ZodObjectJIT", function (inst, def) {
    // requires cast because technically $ZodObject doesn't extend
    $ZodObject.init(inst, def);
    var superParse = inst._zod.parse;
    var _normalized = cached(function () {
      return normalizeDef(def);
    });
    var generateFastpass = function generateFastpass(shape) {
      var doc = new Doc(["shape", "payload", "ctx"]);
      var normalized = _normalized.value;
      var parseStr = function parseStr(key) {
        var k = esc(key);
        return "shape[".concat(k, "]._zod.run({ value: input[").concat(k, "], issues: [] }, ctx)");
      };
      doc.write("const input = payload.value;");
      var ids = Object.create(null);
      var counter = 0;
      var _iterator6 = _createForOfIteratorHelper(normalized.keys),
        _step6;
      try {
        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
          var key = _step6.value;
          ids[key] = "key_".concat(counter++);
        }
        // A: preserve key order {
      } catch (err) {
        _iterator6.e(err);
      } finally {
        _iterator6.f();
      }
      doc.write("const newResult = {};");
      var _iterator7 = _createForOfIteratorHelper(normalized.keys),
        _step7;
      try {
        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
          var _key = _step7.value;
          var id = ids[_key];
          var k = esc(_key);
          doc.write("const ".concat(id, " = ").concat(parseStr(_key), ";"));
          doc.write("\n        if (".concat(id, ".issues.length) {\n          payload.issues = payload.issues.concat(").concat(id, ".issues.map(iss => ({\n            ...iss,\n            path: iss.path ? [").concat(k, ", ...iss.path] : [").concat(k, "]\n          })));\n        }\n        \n        \n        if (").concat(id, ".value === undefined) {\n          if (").concat(k, " in input) {\n            newResult[").concat(k, "] = undefined;\n          }\n        } else {\n          newResult[").concat(k, "] = ").concat(id, ".value;\n        }\n        \n      "));
        }
      } catch (err) {
        _iterator7.e(err);
      } finally {
        _iterator7.f();
      }
      doc.write("payload.value = newResult;");
      doc.write("return payload;");
      var fn = doc.compile();
      return function (payload, ctx) {
        return fn(shape, payload, ctx);
      };
    };
    var fastpass;
    var isObject$1 = isObject;
    var jit = !globalConfig.jitless;
    var allowsEval$1 = allowsEval;
    var fastEnabled = jit && allowsEval$1.value; // && !def.catchall;
    var catchall = def.catchall;
    var value;
    inst._zod.parse = function (payload, ctx) {
      value !== null && value !== void 0 ? value : value = _normalized.value;
      var input = payload.value;
      if (!isObject$1(input)) {
        payload.issues.push({
          expected: "object",
          code: "invalid_type",
          input: input,
          inst: inst
        });
        return payload;
      }
      if (jit && fastEnabled && (ctx === null || ctx === void 0 ? void 0 : ctx.async) === false && ctx.jitless !== true) {
        // always synchronous
        if (!fastpass) fastpass = generateFastpass(def.shape);
        payload = fastpass(payload, ctx);
        if (!catchall) return payload;
        return handleCatchall([], input, payload, ctx, value, inst);
      }
      return superParse(payload, ctx);
    };
  });
  function handleUnionResults(results, _final3, inst, ctx) {
    var _iterator8 = _createForOfIteratorHelper(results),
      _step8;
    try {
      for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
        var result = _step8.value;
        if (result.issues.length === 0) {
          _final3.value = result.value;
          return _final3;
        }
      }
    } catch (err) {
      _iterator8.e(err);
    } finally {
      _iterator8.f();
    }
    var nonaborted = results.filter(function (r) {
      return !aborted(r);
    });
    if (nonaborted.length === 1) {
      _final3.value = nonaborted[0].value;
      return nonaborted[0];
    }
    _final3.issues.push({
      code: "invalid_union",
      input: _final3.value,
      inst: inst,
      errors: results.map(function (result) {
        return result.issues.map(function (iss) {
          return finalizeIssue(iss, ctx, config());
        });
      })
    });
    return _final3;
  }
  var $ZodUnion = /*@__PURE__*/$constructor("$ZodUnion", function (inst, def) {
    $ZodType.init(inst, def);
    defineLazy(inst._zod, "optin", function () {
      return def.options.some(function (o) {
        return o._zod.optin === "optional";
      }) ? "optional" : undefined;
    });
    defineLazy(inst._zod, "optout", function () {
      return def.options.some(function (o) {
        return o._zod.optout === "optional";
      }) ? "optional" : undefined;
    });
    defineLazy(inst._zod, "values", function () {
      if (def.options.every(function (o) {
        return o._zod.values;
      })) {
        return new Set(def.options.flatMap(function (option) {
          return Array.from(option._zod.values);
        }));
      }
      return undefined;
    });
    defineLazy(inst._zod, "pattern", function () {
      if (def.options.every(function (o) {
        return o._zod.pattern;
      })) {
        var patterns = def.options.map(function (o) {
          return o._zod.pattern;
        });
        return new RegExp("^(".concat(patterns.map(function (p) {
          return cleanRegex(p.source);
        }).join("|"), ")$"));
      }
      return undefined;
    });
    var single = def.options.length === 1;
    var first = def.options[0]._zod.run;
    inst._zod.parse = function (payload, ctx) {
      if (single) {
        return first(payload, ctx);
      }
      var async = false;
      var results = [];
      var _iterator9 = _createForOfIteratorHelper(def.options),
        _step9;
      try {
        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
          var option = _step9.value;
          var result = option._zod.run({
            value: payload.value,
            issues: []
          }, ctx);
          if (result instanceof Promise) {
            results.push(result);
            async = true;
          } else {
            if (result.issues.length === 0) return result;
            results.push(result);
          }
        }
      } catch (err) {
        _iterator9.e(err);
      } finally {
        _iterator9.f();
      }
      if (!async) return handleUnionResults(results, payload, inst, ctx);
      return Promise.all(results).then(function (results) {
        return handleUnionResults(results, payload, inst, ctx);
      });
    };
  });
  var $ZodDiscriminatedUnion = /*@__PURE__*/
  $constructor("$ZodDiscriminatedUnion", function (inst, def) {
    $ZodUnion.init(inst, def);
    var _super = inst._zod.parse;
    defineLazy(inst._zod, "propValues", function () {
      var propValues = {};
      var _iterator0 = _createForOfIteratorHelper(def.options),
        _step0;
      try {
        for (_iterator0.s(); !(_step0 = _iterator0.n()).done;) {
          var option = _step0.value;
          var pv = option._zod.propValues;
          if (!pv || Object.keys(pv).length === 0) throw new Error("Invalid discriminated union option at index \"".concat(def.options.indexOf(option), "\""));
          for (var _i3 = 0, _Object$entries = Object.entries(pv); _i3 < _Object$entries.length; _i3++) {
            var _Object$entries$_i = _slicedToArray(_Object$entries[_i3], 2),
              k = _Object$entries$_i[0],
              v = _Object$entries$_i[1];
            if (!propValues[k]) propValues[k] = new Set();
            var _iterator1 = _createForOfIteratorHelper(v),
              _step1;
            try {
              for (_iterator1.s(); !(_step1 = _iterator1.n()).done;) {
                var val = _step1.value;
                propValues[k].add(val);
              }
            } catch (err) {
              _iterator1.e(err);
            } finally {
              _iterator1.f();
            }
          }
        }
      } catch (err) {
        _iterator0.e(err);
      } finally {
        _iterator0.f();
      }
      return propValues;
    });
    var disc = cached(function () {
      var opts = def.options;
      var map = new Map();
      var _iterator10 = _createForOfIteratorHelper(opts),
        _step10;
      try {
        for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
          var _o$_zod$propValues;
          var o = _step10.value;
          var values = (_o$_zod$propValues = o._zod.propValues) === null || _o$_zod$propValues === void 0 ? void 0 : _o$_zod$propValues[def.discriminator];
          if (!values || values.size === 0) throw new Error("Invalid discriminated union option at index \"".concat(def.options.indexOf(o), "\""));
          var _iterator11 = _createForOfIteratorHelper(values),
            _step11;
          try {
            for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
              var v = _step11.value;
              if (map.has(v)) {
                throw new Error("Duplicate discriminator value \"".concat(String(v), "\""));
              }
              map.set(v, o);
            }
          } catch (err) {
            _iterator11.e(err);
          } finally {
            _iterator11.f();
          }
        }
      } catch (err) {
        _iterator10.e(err);
      } finally {
        _iterator10.f();
      }
      return map;
    });
    inst._zod.parse = function (payload, ctx) {
      var input = payload.value;
      if (!isObject(input)) {
        payload.issues.push({
          code: "invalid_type",
          expected: "object",
          input: input,
          inst: inst
        });
        return payload;
      }
      var opt = disc.value.get(input === null || input === void 0 ? void 0 : input[def.discriminator]);
      if (opt) {
        return opt._zod.run(payload, ctx);
      }
      if (def.unionFallback) {
        return _super(payload, ctx);
      }
      // no matching discriminator
      payload.issues.push({
        code: "invalid_union",
        errors: [],
        note: "No matching discriminator",
        discriminator: def.discriminator,
        input: input,
        path: [def.discriminator],
        inst: inst
      });
      return payload;
    };
  });
  var $ZodIntersection = /*@__PURE__*/$constructor("$ZodIntersection", function (inst, def) {
    $ZodType.init(inst, def);
    inst._zod.parse = function (payload, ctx) {
      var input = payload.value;
      var left = def.left._zod.run({
        value: input,
        issues: []
      }, ctx);
      var right = def.right._zod.run({
        value: input,
        issues: []
      }, ctx);
      var async = left instanceof Promise || right instanceof Promise;
      if (async) {
        return Promise.all([left, right]).then(function (_ref2) {
          var _ref3 = _slicedToArray(_ref2, 2),
            left = _ref3[0],
            right = _ref3[1];
          return handleIntersectionResults(payload, left, right);
        });
      }
      return handleIntersectionResults(payload, left, right);
    };
  });
  function mergeValues(a, b) {
    // const aType = parse.t(a);
    // const bType = parse.t(b);
    if (a === b) {
      return {
        valid: true,
        data: a
      };
    }
    if (a instanceof Date && b instanceof Date && +a === +b) {
      return {
        valid: true,
        data: a
      };
    }
    if (isPlainObject(a) && isPlainObject(b)) {
      var bKeys = Object.keys(b);
      var sharedKeys = Object.keys(a).filter(function (key) {
        return bKeys.indexOf(key) !== -1;
      });
      var newObj = _objectSpread2(_objectSpread2({}, a), b);
      var _iterator12 = _createForOfIteratorHelper(sharedKeys),
        _step12;
      try {
        for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
          var key = _step12.value;
          var sharedValue = mergeValues(a[key], b[key]);
          if (!sharedValue.valid) {
            return {
              valid: false,
              mergeErrorPath: [key].concat(_toConsumableArray(sharedValue.mergeErrorPath))
            };
          }
          newObj[key] = sharedValue.data;
        }
      } catch (err) {
        _iterator12.e(err);
      } finally {
        _iterator12.f();
      }
      return {
        valid: true,
        data: newObj
      };
    }
    if (Array.isArray(a) && Array.isArray(b)) {
      if (a.length !== b.length) {
        return {
          valid: false,
          mergeErrorPath: []
        };
      }
      var newArray = [];
      for (var index = 0; index < a.length; index++) {
        var itemA = a[index];
        var itemB = b[index];
        var _sharedValue = mergeValues(itemA, itemB);
        if (!_sharedValue.valid) {
          return {
            valid: false,
            mergeErrorPath: [index].concat(_toConsumableArray(_sharedValue.mergeErrorPath))
          };
        }
        newArray.push(_sharedValue.data);
      }
      return {
        valid: true,
        data: newArray
      };
    }
    return {
      valid: false,
      mergeErrorPath: []
    };
  }
  function handleIntersectionResults(result, left, right) {
    if (left.issues.length) {
      var _result$issues;
      (_result$issues = result.issues).push.apply(_result$issues, _toConsumableArray(left.issues));
    }
    if (right.issues.length) {
      var _result$issues2;
      (_result$issues2 = result.issues).push.apply(_result$issues2, _toConsumableArray(right.issues));
    }
    if (aborted(result)) return result;
    var merged = mergeValues(left.value, right.value);
    if (!merged.valid) {
      throw new Error("Unmergable intersection. Error path: " + "".concat(JSON.stringify(merged.mergeErrorPath)));
    }
    result.value = merged.data;
    return result;
  }
  var $ZodTuple = /*@__PURE__*/$constructor("$ZodTuple", function (inst, def) {
    $ZodType.init(inst, def);
    var items = def.items;
    var optStart = items.length - _toConsumableArray(items).reverse().findIndex(function (item) {
      return item._zod.optin !== "optional";
    });
    inst._zod.parse = function (payload, ctx) {
      var input = payload.value;
      if (!Array.isArray(input)) {
        payload.issues.push({
          input: input,
          inst: inst,
          expected: "tuple",
          code: "invalid_type"
        });
        return payload;
      }
      payload.value = [];
      var proms = [];
      if (!def.rest) {
        var tooBig = input.length > items.length;
        var tooSmall = input.length < optStart - 1;
        if (tooBig || tooSmall) {
          payload.issues.push(_objectSpread2(_objectSpread2({}, tooBig ? {
            code: "too_big",
            maximum: items.length
          } : {
            code: "too_small",
            minimum: items.length
          }), {}, {
            input: input,
            inst: inst,
            origin: "array"
          }));
          return payload;
        }
      }
      var i = -1;
      var _iterator13 = _createForOfIteratorHelper(items),
        _step13;
      try {
        for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {
          var item = _step13.value;
          i++;
          if (i >= input.length) if (i >= optStart) continue;
          var _result = item._zod.run({
            value: input[i],
            issues: []
          }, ctx);
          if (_result instanceof Promise) {
            proms.push(_result.then(function (result) {
              return handleTupleResult(result, payload, i);
            }));
          } else {
            handleTupleResult(_result, payload, i);
          }
        }
      } catch (err) {
        _iterator13.e(err);
      } finally {
        _iterator13.f();
      }
      if (def.rest) {
        var rest = input.slice(items.length);
        var _iterator14 = _createForOfIteratorHelper(rest),
          _step14;
        try {
          for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {
            var el = _step14.value;
            i++;
            var result = def.rest._zod.run({
              value: el,
              issues: []
            }, ctx);
            if (result instanceof Promise) {
              proms.push(result.then(function (result) {
                return handleTupleResult(result, payload, i);
              }));
            } else {
              handleTupleResult(result, payload, i);
            }
          }
        } catch (err) {
          _iterator14.e(err);
        } finally {
          _iterator14.f();
        }
      }
      if (proms.length) return Promise.all(proms).then(function () {
        return payload;
      });
      return payload;
    };
  });
  function handleTupleResult(result, _final4, index) {
    if (result.issues.length) {
      var _final4$issues;
      (_final4$issues = _final4.issues).push.apply(_final4$issues, _toConsumableArray(prefixIssues(index, result.issues)));
    }
    _final4.value[index] = result.value;
  }
  var $ZodRecord = /*@__PURE__*/$constructor("$ZodRecord", function (inst, def) {
    $ZodType.init(inst, def);
    inst._zod.parse = function (payload, ctx) {
      var input = payload.value;
      if (!isPlainObject(input)) {
        payload.issues.push({
          expected: "record",
          code: "invalid_type",
          input: input,
          inst: inst
        });
        return payload;
      }
      var proms = [];
      if (def.keyType._zod.values) {
        var values = def.keyType._zod.values;
        payload.value = {};
        var _iterator15 = _createForOfIteratorHelper(values),
          _step15;
        try {
          var _loop5 = function _loop5() {
            var key = _step15.value;
            if (typeof key === "string" || typeof key === "number" || _typeof(key) === "symbol") {
              var result = def.valueType._zod.run({
                value: input[key],
                issues: []
              }, ctx);
              if (result instanceof Promise) {
                proms.push(result.then(function (result) {
                  if (result.issues.length) {
                    var _payload$issues;
                    (_payload$issues = payload.issues).push.apply(_payload$issues, _toConsumableArray(prefixIssues(key, result.issues)));
                  }
                  payload.value[key] = result.value;
                }));
              } else {
                if (result.issues.length) {
                  var _payload$issues2;
                  (_payload$issues2 = payload.issues).push.apply(_payload$issues2, _toConsumableArray(prefixIssues(key, result.issues)));
                }
                payload.value[key] = result.value;
              }
            }
          };
          for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {
            _loop5();
          }
        } catch (err) {
          _iterator15.e(err);
        } finally {
          _iterator15.f();
        }
        var unrecognized;
        for (var key in input) {
          if (!values.has(key)) {
            unrecognized = unrecognized !== null && unrecognized !== void 0 ? unrecognized : [];
            unrecognized.push(key);
          }
        }
        if (unrecognized && unrecognized.length > 0) {
          payload.issues.push({
            code: "unrecognized_keys",
            input: input,
            inst: inst,
            keys: unrecognized
          });
        }
      } else {
        payload.value = {};
        var _iterator16 = _createForOfIteratorHelper(Reflect.ownKeys(input)),
          _step16;
        try {
          var _loop6 = function _loop6() {
              var key = _step16.value;
              if (key === "__proto__") return 0; // continue
              var keyResult = def.keyType._zod.run({
                value: key,
                issues: []
              }, ctx);
              if (keyResult instanceof Promise) {
                throw new Error("Async schemas not supported in object keys currently");
              }
              if (keyResult.issues.length) {
                payload.issues.push({
                  code: "invalid_key",
                  origin: "record",
                  issues: keyResult.issues.map(function (iss) {
                    return finalizeIssue(iss, ctx, config());
                  }),
                  input: key,
                  path: [key],
                  inst: inst
                });
                payload.value[keyResult.value] = keyResult.value;
                return 0; // continue
              }
              var result = def.valueType._zod.run({
                value: input[key],
                issues: []
              }, ctx);
              if (result instanceof Promise) {
                proms.push(result.then(function (result) {
                  if (result.issues.length) {
                    var _payload$issues3;
                    (_payload$issues3 = payload.issues).push.apply(_payload$issues3, _toConsumableArray(prefixIssues(key, result.issues)));
                  }
                  payload.value[keyResult.value] = result.value;
                }));
              } else {
                if (result.issues.length) {
                  var _payload$issues4;
                  (_payload$issues4 = payload.issues).push.apply(_payload$issues4, _toConsumableArray(prefixIssues(key, result.issues)));
                }
                payload.value[keyResult.value] = result.value;
              }
            },
            _ret3;
          for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {
            _ret3 = _loop6();
            if (_ret3 === 0) continue;
          }
        } catch (err) {
          _iterator16.e(err);
        } finally {
          _iterator16.f();
        }
      }
      if (proms.length) {
        return Promise.all(proms).then(function () {
          return payload;
        });
      }
      return payload;
    };
  });
  var $ZodMap = /*@__PURE__*/$constructor("$ZodMap", function (inst, def) {
    $ZodType.init(inst, def);
    inst._zod.parse = function (payload, ctx) {
      var input = payload.value;
      if (!(input instanceof Map)) {
        payload.issues.push({
          expected: "map",
          code: "invalid_type",
          input: input,
          inst: inst
        });
        return payload;
      }
      var proms = [];
      payload.value = new Map();
      var _iterator17 = _createForOfIteratorHelper(input),
        _step17;
      try {
        var _loop7 = function _loop7() {
          var _step17$value = _slicedToArray(_step17.value, 2),
            key = _step17$value[0],
            value = _step17$value[1];
          var keyResult = def.keyType._zod.run({
            value: key,
            issues: []
          }, ctx);
          var valueResult = def.valueType._zod.run({
            value: value,
            issues: []
          }, ctx);
          if (keyResult instanceof Promise || valueResult instanceof Promise) {
            proms.push(Promise.all([keyResult, valueResult]).then(function (_ref4) {
              var _ref5 = _slicedToArray(_ref4, 2),
                keyResult = _ref5[0],
                valueResult = _ref5[1];
              handleMapResult(keyResult, valueResult, payload, key, input, inst, ctx);
            }));
          } else {
            handleMapResult(keyResult, valueResult, payload, key, input, inst, ctx);
          }
        };
        for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {
          _loop7();
        }
      } catch (err) {
        _iterator17.e(err);
      } finally {
        _iterator17.f();
      }
      if (proms.length) return Promise.all(proms).then(function () {
        return payload;
      });
      return payload;
    };
  });
  function handleMapResult(keyResult, valueResult, _final5, key, input, inst, ctx) {
    if (keyResult.issues.length) {
      if (propertyKeyTypes.has(_typeof(key))) {
        var _final5$issues;
        (_final5$issues = _final5.issues).push.apply(_final5$issues, _toConsumableArray(prefixIssues(key, keyResult.issues)));
      } else {
        _final5.issues.push({
          code: "invalid_key",
          origin: "map",
          input: input,
          inst: inst,
          issues: keyResult.issues.map(function (iss) {
            return finalizeIssue(iss, ctx, config());
          })
        });
      }
    }
    if (valueResult.issues.length) {
      if (propertyKeyTypes.has(_typeof(key))) {
        var _final5$issues2;
        (_final5$issues2 = _final5.issues).push.apply(_final5$issues2, _toConsumableArray(prefixIssues(key, valueResult.issues)));
      } else {
        _final5.issues.push({
          origin: "map",
          code: "invalid_element",
          input: input,
          inst: inst,
          key: key,
          issues: valueResult.issues.map(function (iss) {
            return finalizeIssue(iss, ctx, config());
          })
        });
      }
    }
    _final5.value.set(keyResult.value, valueResult.value);
  }
  var $ZodSet = /*@__PURE__*/$constructor("$ZodSet", function (inst, def) {
    $ZodType.init(inst, def);
    inst._zod.parse = function (payload, ctx) {
      var input = payload.value;
      if (!(input instanceof Set)) {
        payload.issues.push({
          input: input,
          inst: inst,
          expected: "set",
          code: "invalid_type"
        });
        return payload;
      }
      var proms = [];
      payload.value = new Set();
      var _iterator18 = _createForOfIteratorHelper(input),
        _step18;
      try {
        for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {
          var item = _step18.value;
          var result = def.valueType._zod.run({
            value: item,
            issues: []
          }, ctx);
          if (result instanceof Promise) {
            proms.push(result.then(function (result) {
              return handleSetResult(result, payload);
            }));
          } else handleSetResult(result, payload);
        }
      } catch (err) {
        _iterator18.e(err);
      } finally {
        _iterator18.f();
      }
      if (proms.length) return Promise.all(proms).then(function () {
        return payload;
      });
      return payload;
    };
  });
  function handleSetResult(result, _final6) {
    if (result.issues.length) {
      var _final6$issues;
      (_final6$issues = _final6.issues).push.apply(_final6$issues, _toConsumableArray(result.issues));
    }
    _final6.value.add(result.value);
  }
  var $ZodEnum = /*@__PURE__*/$constructor("$ZodEnum", function (inst, def) {
    $ZodType.init(inst, def);
    var values = getEnumValues(def.entries);
    var valuesSet = new Set(values);
    inst._zod.values = valuesSet;
    inst._zod.pattern = new RegExp("^(".concat(values.filter(function (k) {
      return propertyKeyTypes.has(_typeof(k));
    }).map(function (o) {
      return typeof o === "string" ? escapeRegex(o) : o.toString();
    }).join("|"), ")$"));
    inst._zod.parse = function (payload, _ctx) {
      var input = payload.value;
      if (valuesSet.has(input)) {
        return payload;
      }
      payload.issues.push({
        code: "invalid_value",
        values: values,
        input: input,
        inst: inst
      });
      return payload;
    };
  });
  var $ZodLiteral = /*@__PURE__*/$constructor("$ZodLiteral", function (inst, def) {
    $ZodType.init(inst, def);
    if (def.values.length === 0) {
      throw new Error("Cannot create literal schema with no valid values");
    }
    inst._zod.values = new Set(def.values);
    inst._zod.pattern = new RegExp("^(".concat(def.values.map(function (o) {
      return typeof o === "string" ? escapeRegex(o) : o ? escapeRegex(o.toString()) : String(o);
    }).join("|"), ")$"));
    inst._zod.parse = function (payload, _ctx) {
      var input = payload.value;
      if (inst._zod.values.has(input)) {
        return payload;
      }
      payload.issues.push({
        code: "invalid_value",
        values: def.values,
        input: input,
        inst: inst
      });
      return payload;
    };
  });
  var $ZodFile = /*@__PURE__*/$constructor("$ZodFile", function (inst, def) {
    $ZodType.init(inst, def);
    inst._zod.parse = function (payload, _ctx) {
      var input = payload.value;
      // @ts-ignore
      if (input instanceof File) return payload;
      payload.issues.push({
        expected: "file",
        code: "invalid_type",
        input: input,
        inst: inst
      });
      return payload;
    };
  });
  var $ZodTransform = /*@__PURE__*/$constructor("$ZodTransform", function (inst, def) {
    $ZodType.init(inst, def);
    inst._zod.parse = function (payload, ctx) {
      if (ctx.direction === "backward") {
        throw new $ZodEncodeError(inst.constructor.name);
      }
      var _out = def.transform(payload.value, payload);
      if (ctx.async) {
        var output = _out instanceof Promise ? _out : Promise.resolve(_out);
        return output.then(function (output) {
          payload.value = output;
          return payload;
        });
      }
      if (_out instanceof Promise) {
        throw new $ZodAsyncError();
      }
      payload.value = _out;
      return payload;
    };
  });
  function handleOptionalResult(result, input) {
    if (result.issues.length && input === undefined) {
      return {
        issues: [],
        value: undefined
      };
    }
    return result;
  }
  var $ZodOptional = /*@__PURE__*/$constructor("$ZodOptional", function (inst, def) {
    $ZodType.init(inst, def);
    inst._zod.optin = "optional";
    inst._zod.optout = "optional";
    defineLazy(inst._zod, "values", function () {
      return def.innerType._zod.values ? new Set([].concat(_toConsumableArray(def.innerType._zod.values), [undefined])) : undefined;
    });
    defineLazy(inst._zod, "pattern", function () {
      var pattern = def.innerType._zod.pattern;
      return pattern ? new RegExp("^(".concat(cleanRegex(pattern.source), ")?$")) : undefined;
    });
    inst._zod.parse = function (payload, ctx) {
      if (def.innerType._zod.optin === "optional") {
        var result = def.innerType._zod.run(payload, ctx);
        if (result instanceof Promise) return result.then(function (r) {
          return handleOptionalResult(r, payload.value);
        });
        return handleOptionalResult(result, payload.value);
      }
      if (payload.value === undefined) {
        return payload;
      }
      return def.innerType._zod.run(payload, ctx);
    };
  });
  var $ZodNullable = /*@__PURE__*/$constructor("$ZodNullable", function (inst, def) {
    $ZodType.init(inst, def);
    defineLazy(inst._zod, "optin", function () {
      return def.innerType._zod.optin;
    });
    defineLazy(inst._zod, "optout", function () {
      return def.innerType._zod.optout;
    });
    defineLazy(inst._zod, "pattern", function () {
      var pattern = def.innerType._zod.pattern;
      return pattern ? new RegExp("^(".concat(cleanRegex(pattern.source), "|null)$")) : undefined;
    });
    defineLazy(inst._zod, "values", function () {
      return def.innerType._zod.values ? new Set([].concat(_toConsumableArray(def.innerType._zod.values), [null])) : undefined;
    });
    inst._zod.parse = function (payload, ctx) {
      // Forward direction (decode): allow null to pass through
      if (payload.value === null) return payload;
      return def.innerType._zod.run(payload, ctx);
    };
  });
  var $ZodDefault = /*@__PURE__*/$constructor("$ZodDefault", function (inst, def) {
    $ZodType.init(inst, def);
    // inst._zod.qin = "true";
    inst._zod.optin = "optional";
    defineLazy(inst._zod, "values", function () {
      return def.innerType._zod.values;
    });
    inst._zod.parse = function (payload, ctx) {
      if (ctx.direction === "backward") {
        return def.innerType._zod.run(payload, ctx);
      }
      // Forward direction (decode): apply defaults for undefined input
      if (payload.value === undefined) {
        payload.value = def.defaultValue;
        /**
         * $ZodDefault returns the default value immediately in forward direction.
         * It doesn't pass the default value into the validator ("prefault"). There's no reason to pass the default value through validation. The validity of the default is enforced by TypeScript statically. Otherwise, it's the responsibility of the user to ensure the default is valid. In the case of pipes with divergent in/out types, you can specify the default on the `in` schema of your ZodPipe to set a "prefault" for the pipe.   */
        return payload;
      }
      // Forward direction: continue with default handling
      var result = def.innerType._zod.run(payload, ctx);
      if (result instanceof Promise) {
        return result.then(function (result) {
          return handleDefaultResult(result, def);
        });
      }
      return handleDefaultResult(result, def);
    };
  });
  function handleDefaultResult(payload, def) {
    if (payload.value === undefined) {
      payload.value = def.defaultValue;
    }
    return payload;
  }
  var $ZodPrefault = /*@__PURE__*/$constructor("$ZodPrefault", function (inst, def) {
    $ZodType.init(inst, def);
    inst._zod.optin = "optional";
    defineLazy(inst._zod, "values", function () {
      return def.innerType._zod.values;
    });
    inst._zod.parse = function (payload, ctx) {
      if (ctx.direction === "backward") {
        return def.innerType._zod.run(payload, ctx);
      }
      // Forward direction (decode): apply prefault for undefined input
      if (payload.value === undefined) {
        payload.value = def.defaultValue;
      }
      return def.innerType._zod.run(payload, ctx);
    };
  });
  var $ZodNonOptional = /*@__PURE__*/$constructor("$ZodNonOptional", function (inst, def) {
    $ZodType.init(inst, def);
    defineLazy(inst._zod, "values", function () {
      var v = def.innerType._zod.values;
      return v ? new Set(_toConsumableArray(v).filter(function (x) {
        return x !== undefined;
      })) : undefined;
    });
    inst._zod.parse = function (payload, ctx) {
      var result = def.innerType._zod.run(payload, ctx);
      if (result instanceof Promise) {
        return result.then(function (result) {
          return handleNonOptionalResult(result, inst);
        });
      }
      return handleNonOptionalResult(result, inst);
    };
  });
  function handleNonOptionalResult(payload, inst) {
    if (!payload.issues.length && payload.value === undefined) {
      payload.issues.push({
        code: "invalid_type",
        expected: "nonoptional",
        input: payload.value,
        inst: inst
      });
    }
    return payload;
  }
  var $ZodSuccess = /*@__PURE__*/$constructor("$ZodSuccess", function (inst, def) {
    $ZodType.init(inst, def);
    inst._zod.parse = function (payload, ctx) {
      if (ctx.direction === "backward") {
        throw new $ZodEncodeError("ZodSuccess");
      }
      var result = def.innerType._zod.run(payload, ctx);
      if (result instanceof Promise) {
        return result.then(function (result) {
          payload.value = result.issues.length === 0;
          return payload;
        });
      }
      payload.value = result.issues.length === 0;
      return payload;
    };
  });
  var $ZodCatch = /*@__PURE__*/$constructor("$ZodCatch", function (inst, def) {
    $ZodType.init(inst, def);
    defineLazy(inst._zod, "optin", function () {
      return def.innerType._zod.optin;
    });
    defineLazy(inst._zod, "optout", function () {
      return def.innerType._zod.optout;
    });
    defineLazy(inst._zod, "values", function () {
      return def.innerType._zod.values;
    });
    inst._zod.parse = function (payload, ctx) {
      if (ctx.direction === "backward") {
        return def.innerType._zod.run(payload, ctx);
      }
      // Forward direction (decode): apply catch logic
      var result = def.innerType._zod.run(payload, ctx);
      if (result instanceof Promise) {
        return result.then(function (result) {
          payload.value = result.value;
          if (result.issues.length) {
            payload.value = def.catchValue(_objectSpread2(_objectSpread2({}, payload), {}, {
              error: {
                issues: result.issues.map(function (iss) {
                  return finalizeIssue(iss, ctx, config());
                })
              },
              input: payload.value
            }));
            payload.issues = [];
          }
          return payload;
        });
      }
      payload.value = result.value;
      if (result.issues.length) {
        payload.value = def.catchValue(_objectSpread2(_objectSpread2({}, payload), {}, {
          error: {
            issues: result.issues.map(function (iss) {
              return finalizeIssue(iss, ctx, config());
            })
          },
          input: payload.value
        }));
        payload.issues = [];
      }
      return payload;
    };
  });
  var $ZodNaN = /*@__PURE__*/$constructor("$ZodNaN", function (inst, def) {
    $ZodType.init(inst, def);
    inst._zod.parse = function (payload, _ctx) {
      if (typeof payload.value !== "number" || !Number.isNaN(payload.value)) {
        payload.issues.push({
          input: payload.value,
          inst: inst,
          expected: "nan",
          code: "invalid_type"
        });
        return payload;
      }
      return payload;
    };
  });
  var $ZodPipe = /*@__PURE__*/$constructor("$ZodPipe", function (inst, def) {
    $ZodType.init(inst, def);
    defineLazy(inst._zod, "values", function () {
      return def["in"]._zod.values;
    });
    defineLazy(inst._zod, "optin", function () {
      return def["in"]._zod.optin;
    });
    defineLazy(inst._zod, "optout", function () {
      return def.out._zod.optout;
    });
    defineLazy(inst._zod, "propValues", function () {
      return def["in"]._zod.propValues;
    });
    inst._zod.parse = function (payload, ctx) {
      if (ctx.direction === "backward") {
        var right = def.out._zod.run(payload, ctx);
        if (right instanceof Promise) {
          return right.then(function (right) {
            return handlePipeResult(right, def["in"], ctx);
          });
        }
        return handlePipeResult(right, def["in"], ctx);
      }
      var left = def["in"]._zod.run(payload, ctx);
      if (left instanceof Promise) {
        return left.then(function (left) {
          return handlePipeResult(left, def.out, ctx);
        });
      }
      return handlePipeResult(left, def.out, ctx);
    };
  });
  function handlePipeResult(left, next, ctx) {
    if (left.issues.length) {
      // prevent further checks
      left.aborted = true;
      return left;
    }
    return next._zod.run({
      value: left.value,
      issues: left.issues
    }, ctx);
  }
  var $ZodCodec = /*@__PURE__*/$constructor("$ZodCodec", function (inst, def) {
    $ZodType.init(inst, def);
    defineLazy(inst._zod, "values", function () {
      return def["in"]._zod.values;
    });
    defineLazy(inst._zod, "optin", function () {
      return def["in"]._zod.optin;
    });
    defineLazy(inst._zod, "optout", function () {
      return def.out._zod.optout;
    });
    defineLazy(inst._zod, "propValues", function () {
      return def["in"]._zod.propValues;
    });
    inst._zod.parse = function (payload, ctx) {
      var direction = ctx.direction || "forward";
      if (direction === "forward") {
        var left = def["in"]._zod.run(payload, ctx);
        if (left instanceof Promise) {
          return left.then(function (left) {
            return handleCodecAResult(left, def, ctx);
          });
        }
        return handleCodecAResult(left, def, ctx);
      } else {
        var right = def.out._zod.run(payload, ctx);
        if (right instanceof Promise) {
          return right.then(function (right) {
            return handleCodecAResult(right, def, ctx);
          });
        }
        return handleCodecAResult(right, def, ctx);
      }
    };
  });
  function handleCodecAResult(result, def, ctx) {
    if (result.issues.length) {
      // prevent further checks
      result.aborted = true;
      return result;
    }
    var direction = ctx.direction || "forward";
    if (direction === "forward") {
      var transformed = def.transform(result.value, result);
      if (transformed instanceof Promise) {
        return transformed.then(function (value) {
          return handleCodecTxResult(result, value, def.out, ctx);
        });
      }
      return handleCodecTxResult(result, transformed, def.out, ctx);
    } else {
      var _transformed = def.reverseTransform(result.value, result);
      if (_transformed instanceof Promise) {
        return _transformed.then(function (value) {
          return handleCodecTxResult(result, value, def["in"], ctx);
        });
      }
      return handleCodecTxResult(result, _transformed, def["in"], ctx);
    }
  }
  function handleCodecTxResult(left, value, nextSchema, ctx) {
    // Check if transform added any issues
    if (left.issues.length) {
      left.aborted = true;
      return left;
    }
    return nextSchema._zod.run({
      value: value,
      issues: left.issues
    }, ctx);
  }
  var $ZodReadonly = /*@__PURE__*/$constructor("$ZodReadonly", function (inst, def) {
    $ZodType.init(inst, def);
    defineLazy(inst._zod, "propValues", function () {
      return def.innerType._zod.propValues;
    });
    defineLazy(inst._zod, "values", function () {
      return def.innerType._zod.values;
    });
    defineLazy(inst._zod, "optin", function () {
      return def.innerType._zod.optin;
    });
    defineLazy(inst._zod, "optout", function () {
      return def.innerType._zod.optout;
    });
    inst._zod.parse = function (payload, ctx) {
      if (ctx.direction === "backward") {
        return def.innerType._zod.run(payload, ctx);
      }
      var result = def.innerType._zod.run(payload, ctx);
      if (result instanceof Promise) {
        return result.then(handleReadonlyResult);
      }
      return handleReadonlyResult(result);
    };
  });
  function handleReadonlyResult(payload) {
    payload.value = Object.freeze(payload.value);
    return payload;
  }
  var $ZodTemplateLiteral = /*@__PURE__*/$constructor("$ZodTemplateLiteral", function (inst, def) {
    $ZodType.init(inst, def);
    var regexParts = [];
    var _iterator19 = _createForOfIteratorHelper(def.parts),
      _step19;
    try {
      for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {
        var part = _step19.value;
        if (_typeof(part) === "object" && part !== null) {
          // is Zod schema
          if (!part._zod.pattern) {
            // if (!source)
            throw new Error("Invalid template literal part, no pattern found: ".concat(_toConsumableArray(part._zod.traits).shift()));
          }
          var source = part._zod.pattern instanceof RegExp ? part._zod.pattern.source : part._zod.pattern;
          if (!source) throw new Error("Invalid template literal part: ".concat(part._zod.traits));
          var start = source.startsWith("^") ? 1 : 0;
          var end = source.endsWith("$") ? source.length - 1 : source.length;
          regexParts.push(source.slice(start, end));
        } else if (part === null || primitiveTypes.has(_typeof(part))) {
          regexParts.push(escapeRegex("".concat(part)));
        } else {
          throw new Error("Invalid template literal part: ".concat(part));
        }
      }
    } catch (err) {
      _iterator19.e(err);
    } finally {
      _iterator19.f();
    }
    inst._zod.pattern = new RegExp("^".concat(regexParts.join(""), "$"));
    inst._zod.parse = function (payload, _ctx) {
      if (typeof payload.value !== "string") {
        payload.issues.push({
          input: payload.value,
          inst: inst,
          expected: "template_literal",
          code: "invalid_type"
        });
        return payload;
      }
      inst._zod.pattern.lastIndex = 0;
      if (!inst._zod.pattern.test(payload.value)) {
        var _def$format;
        payload.issues.push({
          input: payload.value,
          inst: inst,
          code: "invalid_format",
          format: (_def$format = def.format) !== null && _def$format !== void 0 ? _def$format : "template_literal",
          pattern: inst._zod.pattern.source
        });
        return payload;
      }
      return payload;
    };
  });
  var $ZodFunction = /*@__PURE__*/$constructor("$ZodFunction", function (inst, def) {
    $ZodType.init(inst, def);
    inst._def = def;
    inst._zod.def = def;
    inst.implement = function (func) {
      if (typeof func !== "function") {
        throw new Error("implement() must be called with a function");
      }
      return function () {
        for (var _len = arguments.length, args = new Array(_len), _key2 = 0; _key2 < _len; _key2++) {
          args[_key2] = arguments[_key2];
        }
        var parsedArgs = inst._def.input ? parse$1(inst._def.input, args) : args;
        var result = Reflect.apply(func, this, parsedArgs);
        if (inst._def.output) {
          return parse$1(inst._def.output, result);
        }
        return result;
      };
    };
    inst.implementAsync = function (func) {
      if (typeof func !== "function") {
        throw new Error("implementAsync() must be called with a function");
      }
      return /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2() {
        var _len2,
          args,
          _key3,
          parsedArgs,
          result,
          _args2 = arguments,
          _t;
        return _regenerator().w(function (_context2) {
          while (1) switch (_context2.n) {
            case 0:
              for (_len2 = _args2.length, args = new Array(_len2), _key3 = 0; _key3 < _len2; _key3++) {
                args[_key3] = _args2[_key3];
              }
              if (!inst._def.input) {
                _context2.n = 2;
                break;
              }
              _context2.n = 1;
              return parseAsync$1(inst._def.input, args);
            case 1:
              _t = _context2.v;
              _context2.n = 3;
              break;
            case 2:
              _t = args;
            case 3:
              parsedArgs = _t;
              _context2.n = 4;
              return Reflect.apply(func, this, parsedArgs);
            case 4:
              result = _context2.v;
              if (!inst._def.output) {
                _context2.n = 6;
                break;
              }
              _context2.n = 5;
              return parseAsync$1(inst._def.output, result);
            case 5:
              return _context2.a(2, _context2.v);
            case 6:
              return _context2.a(2, result);
          }
        }, _callee2, this);
      }));
    };
    inst._zod.parse = function (payload, _ctx) {
      if (typeof payload.value !== "function") {
        payload.issues.push({
          code: "invalid_type",
          expected: "function",
          input: payload.value,
          inst: inst
        });
        return payload;
      }
      // Check if output is a promise type to determine if we should use async implementation
      var hasPromiseOutput = inst._def.output && inst._def.output._zod.def.type === "promise";
      if (hasPromiseOutput) {
        payload.value = inst.implementAsync(payload.value);
      } else {
        payload.value = inst.implement(payload.value);
      }
      return payload;
    };
    inst.input = function () {
      var F = inst.constructor;
      if (Array.isArray(arguments.length <= 0 ? undefined : arguments[0])) {
        return new F({
          type: "function",
          input: new $ZodTuple({
            type: "tuple",
            items: arguments.length <= 0 ? undefined : arguments[0],
            rest: arguments.length <= 1 ? undefined : arguments[1]
          }),
          output: inst._def.output
        });
      }
      return new F({
        type: "function",
        input: arguments.length <= 0 ? undefined : arguments[0],
        output: inst._def.output
      });
    };
    inst.output = function (output) {
      var F = inst.constructor;
      return new F({
        type: "function",
        input: inst._def.input,
        output: output
      });
    };
    return inst;
  });
  var $ZodPromise = /*@__PURE__*/$constructor("$ZodPromise", function (inst, def) {
    $ZodType.init(inst, def);
    inst._zod.parse = function (payload, ctx) {
      return Promise.resolve(payload.value).then(function (inner) {
        return def.innerType._zod.run({
          value: inner,
          issues: []
        }, ctx);
      });
    };
  });
  var $ZodLazy = /*@__PURE__*/$constructor("$ZodLazy", function (inst, def) {
    $ZodType.init(inst, def);
    // let _innerType!: any;
    // util.defineLazy(def, "getter", () => {
    //   if (!_innerType) {
    //     _innerType = def.getter();
    //   }
    //   return () => _innerType;
    // });
    defineLazy(inst._zod, "innerType", function () {
      return def.getter();
    });
    defineLazy(inst._zod, "pattern", function () {
      return inst._zod.innerType._zod.pattern;
    });
    defineLazy(inst._zod, "propValues", function () {
      return inst._zod.innerType._zod.propValues;
    });
    defineLazy(inst._zod, "optin", function () {
      var _inst$_zod$innerType$;
      return (_inst$_zod$innerType$ = inst._zod.innerType._zod.optin) !== null && _inst$_zod$innerType$ !== void 0 ? _inst$_zod$innerType$ : undefined;
    });
    defineLazy(inst._zod, "optout", function () {
      var _inst$_zod$innerType$2;
      return (_inst$_zod$innerType$2 = inst._zod.innerType._zod.optout) !== null && _inst$_zod$innerType$2 !== void 0 ? _inst$_zod$innerType$2 : undefined;
    });
    inst._zod.parse = function (payload, ctx) {
      var inner = inst._zod.innerType;
      return inner._zod.run(payload, ctx);
    };
  });
  var $ZodCustom = /*@__PURE__*/$constructor("$ZodCustom", function (inst, def) {
    $ZodCheck.init(inst, def);
    $ZodType.init(inst, def);
    inst._zod.parse = function (payload, _) {
      return payload;
    };
    inst._zod.check = function (payload) {
      var input = payload.value;
      var r = def.fn(input);
      if (r instanceof Promise) {
        return r.then(function (r) {
          return handleRefineResult(r, payload, input, inst);
        });
      }
      handleRefineResult(r, payload, input, inst);
      return;
    };
  });
  function handleRefineResult(result, payload, input, inst) {
    if (!result) {
      var _inst$_zod$def$path;
      var _iss = {
        code: "custom",
        input: input,
        inst: inst,
        // incorporates params.error into issue reporting
        path: _toConsumableArray((_inst$_zod$def$path = inst._zod.def.path) !== null && _inst$_zod$def$path !== void 0 ? _inst$_zod$def$path : []),
        // incorporates params.error into issue reporting
        "continue": !inst._zod.def.abort
        // params: inst._zod.def.params,
      };
      if (inst._zod.def.params) _iss.params = inst._zod.def.params;
      payload.issues.push(issue(_iss));
    }
  }

  var error$I = function error() {
    var Sizable = {
      string: {
        unit: "حرف",
        verb: "أن يحوي"
      },
      file: {
        unit: "بايت",
        verb: "أن يحوي"
      },
      array: {
        unit: "عنصر",
        verb: "أن يحوي"
      },
      set: {
        unit: "عنصر",
        verb: "أن يحوي"
      }
    };
    function getSizing(origin) {
      var _Sizable$origin;
      return (_Sizable$origin = Sizable[origin]) !== null && _Sizable$origin !== void 0 ? _Sizable$origin : null;
    }
    var parsedType = function parsedType(data) {
      var t = _typeof(data);
      switch (t) {
        case "number":
          {
            return Number.isNaN(data) ? "NaN" : "number";
          }
        case "object":
          {
            if (Array.isArray(data)) {
              return "array";
            }
            if (data === null) {
              return "null";
            }
            if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
              return data.constructor.name;
            }
          }
      }
      return t;
    };
    var Nouns = {
      regex: "مدخل",
      email: "بريد إلكتروني",
      url: "رابط",
      emoji: "إيموجي",
      uuid: "UUID",
      uuidv4: "UUIDv4",
      uuidv6: "UUIDv6",
      nanoid: "nanoid",
      guid: "GUID",
      cuid: "cuid",
      cuid2: "cuid2",
      ulid: "ULID",
      xid: "XID",
      ksuid: "KSUID",
      datetime: "تاريخ ووقت بمعيار ISO",
      date: "تاريخ بمعيار ISO",
      time: "وقت بمعيار ISO",
      duration: "مدة بمعيار ISO",
      ipv4: "عنوان IPv4",
      ipv6: "عنوان IPv6",
      cidrv4: "مدى عناوين بصيغة IPv4",
      cidrv6: "مدى عناوين بصيغة IPv6",
      base64: "نَص بترميز base64-encoded",
      base64url: "نَص بترميز base64url-encoded",
      json_string: "نَص على هيئة JSON",
      e164: "رقم هاتف بمعيار E.164",
      jwt: "JWT",
      template_literal: "مدخل"
    };
    return function (issue) {
      switch (issue.code) {
        case "invalid_type":
          return "\u0645\u062F\u062E\u0644\u0627\u062A \u063A\u064A\u0631 \u0645\u0642\u0628\u0648\u0644\u0629: \u064A\u0641\u062A\u0631\u0636 \u0625\u062F\u062E\u0627\u0644 ".concat(issue.expected, "\u060C \u0648\u0644\u0643\u0646 \u062A\u0645 \u0625\u062F\u062E\u0627\u0644 ").concat(parsedType(issue.input));
        case "invalid_value":
          if (issue.values.length === 1) return "\u0645\u062F\u062E\u0644\u0627\u062A \u063A\u064A\u0631 \u0645\u0642\u0628\u0648\u0644\u0629: \u064A\u0641\u062A\u0631\u0636 \u0625\u062F\u062E\u0627\u0644 ".concat(stringifyPrimitive(issue.values[0]));
          return "\u0627\u062E\u062A\u064A\u0627\u0631 \u063A\u064A\u0631 \u0645\u0642\u0628\u0648\u0644: \u064A\u062A\u0648\u0642\u0639 \u0627\u0646\u062A\u0642\u0627\u0621 \u0623\u062D\u062F \u0647\u0630\u0647 \u0627\u0644\u062E\u064A\u0627\u0631\u0627\u062A: ".concat(joinValues(issue.values, "|"));
        case "too_big":
          {
            var _issue$origin, _sizing$unit, _issue$origin2;
            var adj = issue.inclusive ? "<=" : "<";
            var sizing = getSizing(issue.origin);
            if (sizing) return " \u0623\u0643\u0628\u0631 \u0645\u0646 \u0627\u0644\u0644\u0627\u0632\u0645: \u064A\u0641\u062A\u0631\u0636 \u0623\u0646 \u062A\u0643\u0648\u0646 ".concat((_issue$origin = issue.origin) !== null && _issue$origin !== void 0 ? _issue$origin : "القيمة", " ").concat(adj, " ").concat(issue.maximum.toString(), " ").concat((_sizing$unit = sizing.unit) !== null && _sizing$unit !== void 0 ? _sizing$unit : "عنصر");
            return "\u0623\u0643\u0628\u0631 \u0645\u0646 \u0627\u0644\u0644\u0627\u0632\u0645: \u064A\u0641\u062A\u0631\u0636 \u0623\u0646 \u062A\u0643\u0648\u0646 ".concat((_issue$origin2 = issue.origin) !== null && _issue$origin2 !== void 0 ? _issue$origin2 : "القيمة", " ").concat(adj, " ").concat(issue.maximum.toString());
          }
        case "too_small":
          {
            var _adj = issue.inclusive ? ">=" : ">";
            var _sizing = getSizing(issue.origin);
            if (_sizing) {
              return "\u0623\u0635\u063A\u0631 \u0645\u0646 \u0627\u0644\u0644\u0627\u0632\u0645: \u064A\u0641\u062A\u0631\u0636 \u0644\u0640 ".concat(issue.origin, " \u0623\u0646 \u064A\u0643\u0648\u0646 ").concat(_adj, " ").concat(issue.minimum.toString(), " ").concat(_sizing.unit);
            }
            return "\u0623\u0635\u063A\u0631 \u0645\u0646 \u0627\u0644\u0644\u0627\u0632\u0645: \u064A\u0641\u062A\u0631\u0636 \u0644\u0640 ".concat(issue.origin, " \u0623\u0646 \u064A\u0643\u0648\u0646 ").concat(_adj, " ").concat(issue.minimum.toString());
          }
        case "invalid_format":
          {
            var _Nouns$_issue$format;
            var _issue = issue;
            if (_issue.format === "starts_with") return "\u0646\u064E\u0635 \u063A\u064A\u0631 \u0645\u0642\u0628\u0648\u0644: \u064A\u062C\u0628 \u0623\u0646 \u064A\u0628\u062F\u0623 \u0628\u0640 \"".concat(issue.prefix, "\"");
            if (_issue.format === "ends_with") return "\u0646\u064E\u0635 \u063A\u064A\u0631 \u0645\u0642\u0628\u0648\u0644: \u064A\u062C\u0628 \u0623\u0646 \u064A\u0646\u062A\u0647\u064A \u0628\u0640 \"".concat(_issue.suffix, "\"");
            if (_issue.format === "includes") return "\u0646\u064E\u0635 \u063A\u064A\u0631 \u0645\u0642\u0628\u0648\u0644: \u064A\u062C\u0628 \u0623\u0646 \u064A\u062A\u0636\u0645\u0651\u064E\u0646 \"".concat(_issue.includes, "\"");
            if (_issue.format === "regex") return "\u0646\u064E\u0635 \u063A\u064A\u0631 \u0645\u0642\u0628\u0648\u0644: \u064A\u062C\u0628 \u0623\u0646 \u064A\u0637\u0627\u0628\u0642 \u0627\u0644\u0646\u0645\u0637 ".concat(_issue.pattern);
            return "".concat((_Nouns$_issue$format = Nouns[_issue.format]) !== null && _Nouns$_issue$format !== void 0 ? _Nouns$_issue$format : issue.format, " \u063A\u064A\u0631 \u0645\u0642\u0628\u0648\u0644");
          }
        case "not_multiple_of":
          return "\u0631\u0642\u0645 \u063A\u064A\u0631 \u0645\u0642\u0628\u0648\u0644: \u064A\u062C\u0628 \u0623\u0646 \u064A\u0643\u0648\u0646 \u0645\u0646 \u0645\u0636\u0627\u0639\u0641\u0627\u062A ".concat(issue.divisor);
        case "unrecognized_keys":
          return "\u0645\u0639\u0631\u0641".concat(issue.keys.length > 1 ? "ات" : "", " \u063A\u0631\u064A\u0628").concat(issue.keys.length > 1 ? "ة" : "", ": ").concat(joinValues(issue.keys, "، "));
        case "invalid_key":
          return "\u0645\u0639\u0631\u0641 \u063A\u064A\u0631 \u0645\u0642\u0628\u0648\u0644 \u0641\u064A ".concat(issue.origin);
        case "invalid_union":
          return "مدخل غير مقبول";
        case "invalid_element":
          return "\u0645\u062F\u062E\u0644 \u063A\u064A\u0631 \u0645\u0642\u0628\u0648\u0644 \u0641\u064A ".concat(issue.origin);
        default:
          return "مدخل غير مقبول";
      }
    };
  };
  function ar () {
    return {
      localeError: error$I()
    };
  }

  var error$H = function error() {
    var Sizable = {
      string: {
        unit: "simvol",
        verb: "olmalıdır"
      },
      file: {
        unit: "bayt",
        verb: "olmalıdır"
      },
      array: {
        unit: "element",
        verb: "olmalıdır"
      },
      set: {
        unit: "element",
        verb: "olmalıdır"
      }
    };
    function getSizing(origin) {
      var _Sizable$origin;
      return (_Sizable$origin = Sizable[origin]) !== null && _Sizable$origin !== void 0 ? _Sizable$origin : null;
    }
    var parsedType = function parsedType(data) {
      var t = _typeof(data);
      switch (t) {
        case "number":
          {
            return Number.isNaN(data) ? "NaN" : "number";
          }
        case "object":
          {
            if (Array.isArray(data)) {
              return "array";
            }
            if (data === null) {
              return "null";
            }
            if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
              return data.constructor.name;
            }
          }
      }
      return t;
    };
    var Nouns = {
      regex: "input",
      email: "email address",
      url: "URL",
      emoji: "emoji",
      uuid: "UUID",
      uuidv4: "UUIDv4",
      uuidv6: "UUIDv6",
      nanoid: "nanoid",
      guid: "GUID",
      cuid: "cuid",
      cuid2: "cuid2",
      ulid: "ULID",
      xid: "XID",
      ksuid: "KSUID",
      datetime: "ISO datetime",
      date: "ISO date",
      time: "ISO time",
      duration: "ISO duration",
      ipv4: "IPv4 address",
      ipv6: "IPv6 address",
      cidrv4: "IPv4 range",
      cidrv6: "IPv6 range",
      base64: "base64-encoded string",
      base64url: "base64url-encoded string",
      json_string: "JSON string",
      e164: "E.164 number",
      jwt: "JWT",
      template_literal: "input"
    };
    return function (issue) {
      switch (issue.code) {
        case "invalid_type":
          return "Yanl\u0131\u015F d\u0259y\u0259r: g\xF6zl\u0259nil\u0259n ".concat(issue.expected, ", daxil olan ").concat(parsedType(issue.input));
        case "invalid_value":
          if (issue.values.length === 1) return "Yanl\u0131\u015F d\u0259y\u0259r: g\xF6zl\u0259nil\u0259n ".concat(stringifyPrimitive(issue.values[0]));
          return "Yanl\u0131\u015F se\xE7im: a\u015Fa\u011F\u0131dak\u0131lardan biri olmal\u0131d\u0131r: ".concat(joinValues(issue.values, "|"));
        case "too_big":
          {
            var _issue$origin, _sizing$unit, _issue$origin2;
            var adj = issue.inclusive ? "<=" : "<";
            var sizing = getSizing(issue.origin);
            if (sizing) return "\xC7ox b\xF6y\xFCk: g\xF6zl\u0259nil\u0259n ".concat((_issue$origin = issue.origin) !== null && _issue$origin !== void 0 ? _issue$origin : "dəyər", " ").concat(adj).concat(issue.maximum.toString(), " ").concat((_sizing$unit = sizing.unit) !== null && _sizing$unit !== void 0 ? _sizing$unit : "element");
            return "\xC7ox b\xF6y\xFCk: g\xF6zl\u0259nil\u0259n ".concat((_issue$origin2 = issue.origin) !== null && _issue$origin2 !== void 0 ? _issue$origin2 : "dəyər", " ").concat(adj).concat(issue.maximum.toString());
          }
        case "too_small":
          {
            var _adj = issue.inclusive ? ">=" : ">";
            var _sizing = getSizing(issue.origin);
            if (_sizing) return "\xC7ox ki\xE7ik: g\xF6zl\u0259nil\u0259n ".concat(issue.origin, " ").concat(_adj).concat(issue.minimum.toString(), " ").concat(_sizing.unit);
            return "\xC7ox ki\xE7ik: g\xF6zl\u0259nil\u0259n ".concat(issue.origin, " ").concat(_adj).concat(issue.minimum.toString());
          }
        case "invalid_format":
          {
            var _Nouns$_issue$format;
            var _issue = issue;
            if (_issue.format === "starts_with") return "Yanl\u0131\u015F m\u0259tn: \"".concat(_issue.prefix, "\" il\u0259 ba\u015Flamal\u0131d\u0131r");
            if (_issue.format === "ends_with") return "Yanl\u0131\u015F m\u0259tn: \"".concat(_issue.suffix, "\" il\u0259 bitm\u0259lidir");
            if (_issue.format === "includes") return "Yanl\u0131\u015F m\u0259tn: \"".concat(_issue.includes, "\" daxil olmal\u0131d\u0131r");
            if (_issue.format === "regex") return "Yanl\u0131\u015F m\u0259tn: ".concat(_issue.pattern, " \u015Fablonuna uy\u011Fun olmal\u0131d\u0131r");
            return "Yanl\u0131\u015F ".concat((_Nouns$_issue$format = Nouns[_issue.format]) !== null && _Nouns$_issue$format !== void 0 ? _Nouns$_issue$format : issue.format);
          }
        case "not_multiple_of":
          return "Yanl\u0131\u015F \u0259d\u0259d: ".concat(issue.divisor, " il\u0259 b\xF6l\xFCn\u0259 bil\u0259n olmal\u0131d\u0131r");
        case "unrecognized_keys":
          return "Tan\u0131nmayan a\xE7ar".concat(issue.keys.length > 1 ? "lar" : "", ": ").concat(joinValues(issue.keys, ", "));
        case "invalid_key":
          return "".concat(issue.origin, " daxilind\u0259 yanl\u0131\u015F a\xE7ar");
        case "invalid_union":
          return "Yanlış dəyər";
        case "invalid_element":
          return "".concat(issue.origin, " daxilind\u0259 yanl\u0131\u015F d\u0259y\u0259r");
        default:
          return "Yanl\u0131\u015F d\u0259y\u0259r";
      }
    };
  };
  function az () {
    return {
      localeError: error$H()
    };
  }

  function getBelarusianPlural(count, one, few, many) {
    var absCount = Math.abs(count);
    var lastDigit = absCount % 10;
    var lastTwoDigits = absCount % 100;
    if (lastTwoDigits >= 11 && lastTwoDigits <= 19) {
      return many;
    }
    if (lastDigit === 1) {
      return one;
    }
    if (lastDigit >= 2 && lastDigit <= 4) {
      return few;
    }
    return many;
  }
  var error$G = function error() {
    var Sizable = {
      string: {
        unit: {
          one: "сімвал",
          few: "сімвалы",
          many: "сімвалаў"
        },
        verb: "мець"
      },
      array: {
        unit: {
          one: "элемент",
          few: "элементы",
          many: "элементаў"
        },
        verb: "мець"
      },
      set: {
        unit: {
          one: "элемент",
          few: "элементы",
          many: "элементаў"
        },
        verb: "мець"
      },
      file: {
        unit: {
          one: "байт",
          few: "байты",
          many: "байтаў"
        },
        verb: "мець"
      }
    };
    function getSizing(origin) {
      var _Sizable$origin;
      return (_Sizable$origin = Sizable[origin]) !== null && _Sizable$origin !== void 0 ? _Sizable$origin : null;
    }
    var parsedType = function parsedType(data) {
      var t = _typeof(data);
      switch (t) {
        case "number":
          {
            return Number.isNaN(data) ? "NaN" : "лік";
          }
        case "object":
          {
            if (Array.isArray(data)) {
              return "масіў";
            }
            if (data === null) {
              return "null";
            }
            if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
              return data.constructor.name;
            }
          }
      }
      return t;
    };
    var Nouns = {
      regex: "увод",
      email: "email адрас",
      url: "URL",
      emoji: "эмодзі",
      uuid: "UUID",
      uuidv4: "UUIDv4",
      uuidv6: "UUIDv6",
      nanoid: "nanoid",
      guid: "GUID",
      cuid: "cuid",
      cuid2: "cuid2",
      ulid: "ULID",
      xid: "XID",
      ksuid: "KSUID",
      datetime: "ISO дата і час",
      date: "ISO дата",
      time: "ISO час",
      duration: "ISO працягласць",
      ipv4: "IPv4 адрас",
      ipv6: "IPv6 адрас",
      cidrv4: "IPv4 дыяпазон",
      cidrv6: "IPv6 дыяпазон",
      base64: "радок у фармаце base64",
      base64url: "радок у фармаце base64url",
      json_string: "JSON радок",
      e164: "нумар E.164",
      jwt: "JWT",
      template_literal: "увод"
    };
    return function (issue) {
      switch (issue.code) {
        case "invalid_type":
          return "\u041D\u044F\u043F\u0440\u0430\u0432\u0456\u043B\u044C\u043D\u044B \u045E\u0432\u043E\u0434: \u0447\u0430\u043A\u0430\u045E\u0441\u044F ".concat(issue.expected, ", \u0430\u0442\u0440\u044B\u043C\u0430\u043D\u0430 ").concat(parsedType(issue.input));
        case "invalid_value":
          if (issue.values.length === 1) return "\u041D\u044F\u043F\u0440\u0430\u0432\u0456\u043B\u044C\u043D\u044B \u045E\u0432\u043E\u0434: \u0447\u0430\u043A\u0430\u043B\u0430\u0441\u044F ".concat(stringifyPrimitive(issue.values[0]));
          return "\u041D\u044F\u043F\u0440\u0430\u0432\u0456\u043B\u044C\u043D\u044B \u0432\u0430\u0440\u044B\u044F\u043D\u0442: \u0447\u0430\u043A\u0430\u045E\u0441\u044F \u0430\u0434\u0437\u0456\u043D \u0437 ".concat(joinValues(issue.values, "|"));
        case "too_big":
          {
            var _issue$origin2;
            var adj = issue.inclusive ? "<=" : "<";
            var sizing = getSizing(issue.origin);
            if (sizing) {
              var _issue$origin;
              var maxValue = Number(issue.maximum);
              var unit = getBelarusianPlural(maxValue, sizing.unit.one, sizing.unit.few, sizing.unit.many);
              return "\u0417\u0430\u043D\u0430\u0434\u0442\u0430 \u0432\u044F\u043B\u0456\u043A\u0456: \u0447\u0430\u043A\u0430\u043B\u0430\u0441\u044F, \u0448\u0442\u043E ".concat((_issue$origin = issue.origin) !== null && _issue$origin !== void 0 ? _issue$origin : "значэнне", " \u043F\u0430\u0432\u0456\u043D\u043D\u0430 ").concat(sizing.verb, " ").concat(adj).concat(issue.maximum.toString(), " ").concat(unit);
            }
            return "\u0417\u0430\u043D\u0430\u0434\u0442\u0430 \u0432\u044F\u043B\u0456\u043A\u0456: \u0447\u0430\u043A\u0430\u043B\u0430\u0441\u044F, \u0448\u0442\u043E ".concat((_issue$origin2 = issue.origin) !== null && _issue$origin2 !== void 0 ? _issue$origin2 : "значэнне", " \u043F\u0430\u0432\u0456\u043D\u043D\u0430 \u0431\u044B\u0446\u044C ").concat(adj).concat(issue.maximum.toString());
          }
        case "too_small":
          {
            var _adj = issue.inclusive ? ">=" : ">";
            var _sizing = getSizing(issue.origin);
            if (_sizing) {
              var minValue = Number(issue.minimum);
              var _unit = getBelarusianPlural(minValue, _sizing.unit.one, _sizing.unit.few, _sizing.unit.many);
              return "\u0417\u0430\u043D\u0430\u0434\u0442\u0430 \u043C\u0430\u043B\u044B: \u0447\u0430\u043A\u0430\u043B\u0430\u0441\u044F, \u0448\u0442\u043E ".concat(issue.origin, " \u043F\u0430\u0432\u0456\u043D\u043D\u0430 ").concat(_sizing.verb, " ").concat(_adj).concat(issue.minimum.toString(), " ").concat(_unit);
            }
            return "\u0417\u0430\u043D\u0430\u0434\u0442\u0430 \u043C\u0430\u043B\u044B: \u0447\u0430\u043A\u0430\u043B\u0430\u0441\u044F, \u0448\u0442\u043E ".concat(issue.origin, " \u043F\u0430\u0432\u0456\u043D\u043D\u0430 \u0431\u044B\u0446\u044C ").concat(_adj).concat(issue.minimum.toString());
          }
        case "invalid_format":
          {
            var _Nouns$_issue$format;
            var _issue = issue;
            if (_issue.format === "starts_with") return "\u041D\u044F\u043F\u0440\u0430\u0432\u0456\u043B\u044C\u043D\u044B \u0440\u0430\u0434\u043E\u043A: \u043F\u0430\u0432\u0456\u043D\u0435\u043D \u043F\u0430\u0447\u044B\u043D\u0430\u0446\u0446\u0430 \u0437 \"".concat(_issue.prefix, "\"");
            if (_issue.format === "ends_with") return "\u041D\u044F\u043F\u0440\u0430\u0432\u0456\u043B\u044C\u043D\u044B \u0440\u0430\u0434\u043E\u043A: \u043F\u0430\u0432\u0456\u043D\u0435\u043D \u0437\u0430\u043A\u0430\u043D\u0447\u0432\u0430\u0446\u0446\u0430 \u043D\u0430 \"".concat(_issue.suffix, "\"");
            if (_issue.format === "includes") return "\u041D\u044F\u043F\u0440\u0430\u0432\u0456\u043B\u044C\u043D\u044B \u0440\u0430\u0434\u043E\u043A: \u043F\u0430\u0432\u0456\u043D\u0435\u043D \u0437\u043C\u044F\u0448\u0447\u0430\u0446\u044C \"".concat(_issue.includes, "\"");
            if (_issue.format === "regex") return "\u041D\u044F\u043F\u0440\u0430\u0432\u0456\u043B\u044C\u043D\u044B \u0440\u0430\u0434\u043E\u043A: \u043F\u0430\u0432\u0456\u043D\u0435\u043D \u0430\u0434\u043F\u0430\u0432\u044F\u0434\u0430\u0446\u044C \u0448\u0430\u0431\u043B\u043E\u043D\u0443 ".concat(_issue.pattern);
            return "\u041D\u044F\u043F\u0440\u0430\u0432\u0456\u043B\u044C\u043D\u044B ".concat((_Nouns$_issue$format = Nouns[_issue.format]) !== null && _Nouns$_issue$format !== void 0 ? _Nouns$_issue$format : issue.format);
          }
        case "not_multiple_of":
          return "\u041D\u044F\u043F\u0440\u0430\u0432\u0456\u043B\u044C\u043D\u044B \u043B\u0456\u043A: \u043F\u0430\u0432\u0456\u043D\u0435\u043D \u0431\u044B\u0446\u044C \u043A\u0440\u0430\u0442\u043D\u044B\u043C ".concat(issue.divisor);
        case "unrecognized_keys":
          return "\u041D\u0435\u0440\u0430\u0441\u043F\u0430\u0437\u043D\u0430\u043D\u044B ".concat(issue.keys.length > 1 ? "ключы" : "ключ", ": ").concat(joinValues(issue.keys, ", "));
        case "invalid_key":
          return "\u041D\u044F\u043F\u0440\u0430\u0432\u0456\u043B\u044C\u043D\u044B \u043A\u043B\u044E\u0447 \u0443 ".concat(issue.origin);
        case "invalid_union":
          return "Няправільны ўвод";
        case "invalid_element":
          return "\u041D\u044F\u043F\u0440\u0430\u0432\u0456\u043B\u044C\u043D\u0430\u0435 \u0437\u043D\u0430\u0447\u044D\u043D\u043D\u0435 \u045E ".concat(issue.origin);
        default:
          return "\u041D\u044F\u043F\u0440\u0430\u0432\u0456\u043B\u044C\u043D\u044B \u045E\u0432\u043E\u0434";
      }
    };
  };
  function be () {
    return {
      localeError: error$G()
    };
  }

  var parsedType$6 = function parsedType(data) {
    var t = _typeof(data);
    switch (t) {
      case "number":
        {
          return Number.isNaN(data) ? "NaN" : "число";
        }
      case "object":
        {
          if (Array.isArray(data)) {
            return "масив";
          }
          if (data === null) {
            return "null";
          }
          if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
            return data.constructor.name;
          }
        }
    }
    return t;
  };
  var error$F = function error() {
    var Sizable = {
      string: {
        unit: "символа",
        verb: "да съдържа"
      },
      file: {
        unit: "байта",
        verb: "да съдържа"
      },
      array: {
        unit: "елемента",
        verb: "да съдържа"
      },
      set: {
        unit: "елемента",
        verb: "да съдържа"
      }
    };
    function getSizing(origin) {
      var _Sizable$origin;
      return (_Sizable$origin = Sizable[origin]) !== null && _Sizable$origin !== void 0 ? _Sizable$origin : null;
    }
    var Nouns = {
      regex: "вход",
      email: "имейл адрес",
      url: "URL",
      emoji: "емоджи",
      uuid: "UUID",
      uuidv4: "UUIDv4",
      uuidv6: "UUIDv6",
      nanoid: "nanoid",
      guid: "GUID",
      cuid: "cuid",
      cuid2: "cuid2",
      ulid: "ULID",
      xid: "XID",
      ksuid: "KSUID",
      datetime: "ISO време",
      date: "ISO дата",
      time: "ISO време",
      duration: "ISO продължителност",
      ipv4: "IPv4 адрес",
      ipv6: "IPv6 адрес",
      cidrv4: "IPv4 диапазон",
      cidrv6: "IPv6 диапазон",
      base64: "base64-кодиран низ",
      base64url: "base64url-кодиран низ",
      json_string: "JSON низ",
      e164: "E.164 номер",
      jwt: "JWT",
      template_literal: "вход"
    };
    return function (issue) {
      switch (issue.code) {
        case "invalid_type":
          return "\u041D\u0435\u0432\u0430\u043B\u0438\u0434\u0435\u043D \u0432\u0445\u043E\u0434: \u043E\u0447\u0430\u043A\u0432\u0430\u043D ".concat(issue.expected, ", \u043F\u043E\u043B\u0443\u0447\u0435\u043D ").concat(parsedType$6(issue.input));
        case "invalid_value":
          if (issue.values.length === 1) return "\u041D\u0435\u0432\u0430\u043B\u0438\u0434\u0435\u043D \u0432\u0445\u043E\u0434: \u043E\u0447\u0430\u043A\u0432\u0430\u043D ".concat(stringifyPrimitive(issue.values[0]));
          return "\u041D\u0435\u0432\u0430\u043B\u0438\u0434\u043D\u0430 \u043E\u043F\u0446\u0438\u044F: \u043E\u0447\u0430\u043A\u0432\u0430\u043D\u043E \u0435\u0434\u043D\u043E \u043E\u0442 ".concat(joinValues(issue.values, "|"));
        case "too_big":
          {
            var _issue$origin, _sizing$unit, _issue$origin2;
            var adj = issue.inclusive ? "<=" : "<";
            var sizing = getSizing(issue.origin);
            if (sizing) return "\u0422\u0432\u044A\u0440\u0434\u0435 \u0433\u043E\u043B\u044F\u043C\u043E: \u043E\u0447\u0430\u043A\u0432\u0430 \u0441\u0435 ".concat((_issue$origin = issue.origin) !== null && _issue$origin !== void 0 ? _issue$origin : "стойност", " \u0434\u0430 \u0441\u044A\u0434\u044A\u0440\u0436\u0430 ").concat(adj).concat(issue.maximum.toString(), " ").concat((_sizing$unit = sizing.unit) !== null && _sizing$unit !== void 0 ? _sizing$unit : "елемента");
            return "\u0422\u0432\u044A\u0440\u0434\u0435 \u0433\u043E\u043B\u044F\u043C\u043E: \u043E\u0447\u0430\u043A\u0432\u0430 \u0441\u0435 ".concat((_issue$origin2 = issue.origin) !== null && _issue$origin2 !== void 0 ? _issue$origin2 : "стойност", " \u0434\u0430 \u0431\u044A\u0434\u0435 ").concat(adj).concat(issue.maximum.toString());
          }
        case "too_small":
          {
            var _adj = issue.inclusive ? ">=" : ">";
            var _sizing = getSizing(issue.origin);
            if (_sizing) {
              return "\u0422\u0432\u044A\u0440\u0434\u0435 \u043C\u0430\u043B\u043A\u043E: \u043E\u0447\u0430\u043A\u0432\u0430 \u0441\u0435 ".concat(issue.origin, " \u0434\u0430 \u0441\u044A\u0434\u044A\u0440\u0436\u0430 ").concat(_adj).concat(issue.minimum.toString(), " ").concat(_sizing.unit);
            }
            return "\u0422\u0432\u044A\u0440\u0434\u0435 \u043C\u0430\u043B\u043A\u043E: \u043E\u0447\u0430\u043A\u0432\u0430 \u0441\u0435 ".concat(issue.origin, " \u0434\u0430 \u0431\u044A\u0434\u0435 ").concat(_adj).concat(issue.minimum.toString());
          }
        case "invalid_format":
          {
            var _Nouns$_issue$format;
            var _issue = issue;
            if (_issue.format === "starts_with") {
              return "\u041D\u0435\u0432\u0430\u043B\u0438\u0434\u0435\u043D \u043D\u0438\u0437: \u0442\u0440\u044F\u0431\u0432\u0430 \u0434\u0430 \u0437\u0430\u043F\u043E\u0447\u0432\u0430 \u0441 \"".concat(_issue.prefix, "\"");
            }
            if (_issue.format === "ends_with") return "\u041D\u0435\u0432\u0430\u043B\u0438\u0434\u0435\u043D \u043D\u0438\u0437: \u0442\u0440\u044F\u0431\u0432\u0430 \u0434\u0430 \u0437\u0430\u0432\u044A\u0440\u0448\u0432\u0430 \u0441 \"".concat(_issue.suffix, "\"");
            if (_issue.format === "includes") return "\u041D\u0435\u0432\u0430\u043B\u0438\u0434\u0435\u043D \u043D\u0438\u0437: \u0442\u0440\u044F\u0431\u0432\u0430 \u0434\u0430 \u0432\u043A\u043B\u044E\u0447\u0432\u0430 \"".concat(_issue.includes, "\"");
            if (_issue.format === "regex") return "\u041D\u0435\u0432\u0430\u043B\u0438\u0434\u0435\u043D \u043D\u0438\u0437: \u0442\u0440\u044F\u0431\u0432\u0430 \u0434\u0430 \u0441\u044A\u0432\u043F\u0430\u0434\u0430 \u0441 ".concat(_issue.pattern);
            var invalid_adj = "Невалиден";
            if (_issue.format === "emoji") invalid_adj = "Невалидно";
            if (_issue.format === "datetime") invalid_adj = "Невалидно";
            if (_issue.format === "date") invalid_adj = "Невалидна";
            if (_issue.format === "time") invalid_adj = "Невалидно";
            if (_issue.format === "duration") invalid_adj = "Невалидна";
            return "".concat(invalid_adj, " ").concat((_Nouns$_issue$format = Nouns[_issue.format]) !== null && _Nouns$_issue$format !== void 0 ? _Nouns$_issue$format : issue.format);
          }
        case "not_multiple_of":
          return "\u041D\u0435\u0432\u0430\u043B\u0438\u0434\u043D\u043E \u0447\u0438\u0441\u043B\u043E: \u0442\u0440\u044F\u0431\u0432\u0430 \u0434\u0430 \u0431\u044A\u0434\u0435 \u043A\u0440\u0430\u0442\u043D\u043E \u043D\u0430 ".concat(issue.divisor);
        case "unrecognized_keys":
          return "\u041D\u0435\u0440\u0430\u0437\u043F\u043E\u0437\u043D\u0430\u0442".concat(issue.keys.length > 1 ? "и" : "", " \u043A\u043B\u044E\u0447").concat(issue.keys.length > 1 ? "ове" : "", ": ").concat(joinValues(issue.keys, ", "));
        case "invalid_key":
          return "\u041D\u0435\u0432\u0430\u043B\u0438\u0434\u0435\u043D \u043A\u043B\u044E\u0447 \u0432 ".concat(issue.origin);
        case "invalid_union":
          return "Невалиден вход";
        case "invalid_element":
          return "\u041D\u0435\u0432\u0430\u043B\u0438\u0434\u043D\u0430 \u0441\u0442\u043E\u0439\u043D\u043E\u0441\u0442 \u0432 ".concat(issue.origin);
        default:
          return "\u041D\u0435\u0432\u0430\u043B\u0438\u0434\u0435\u043D \u0432\u0445\u043E\u0434";
      }
    };
  };
  function bg () {
    return {
      localeError: error$F()
    };
  }

  var error$E = function error() {
    var Sizable = {
      string: {
        unit: "caràcters",
        verb: "contenir"
      },
      file: {
        unit: "bytes",
        verb: "contenir"
      },
      array: {
        unit: "elements",
        verb: "contenir"
      },
      set: {
        unit: "elements",
        verb: "contenir"
      }
    };
    function getSizing(origin) {
      var _Sizable$origin;
      return (_Sizable$origin = Sizable[origin]) !== null && _Sizable$origin !== void 0 ? _Sizable$origin : null;
    }
    var parsedType = function parsedType(data) {
      var t = _typeof(data);
      switch (t) {
        case "number":
          {
            return Number.isNaN(data) ? "NaN" : "number";
          }
        case "object":
          {
            if (Array.isArray(data)) {
              return "array";
            }
            if (data === null) {
              return "null";
            }
            if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
              return data.constructor.name;
            }
          }
      }
      return t;
    };
    var Nouns = {
      regex: "entrada",
      email: "adreça electrònica",
      url: "URL",
      emoji: "emoji",
      uuid: "UUID",
      uuidv4: "UUIDv4",
      uuidv6: "UUIDv6",
      nanoid: "nanoid",
      guid: "GUID",
      cuid: "cuid",
      cuid2: "cuid2",
      ulid: "ULID",
      xid: "XID",
      ksuid: "KSUID",
      datetime: "data i hora ISO",
      date: "data ISO",
      time: "hora ISO",
      duration: "durada ISO",
      ipv4: "adreça IPv4",
      ipv6: "adreça IPv6",
      cidrv4: "rang IPv4",
      cidrv6: "rang IPv6",
      base64: "cadena codificada en base64",
      base64url: "cadena codificada en base64url",
      json_string: "cadena JSON",
      e164: "número E.164",
      jwt: "JWT",
      template_literal: "entrada"
    };
    return function (issue) {
      switch (issue.code) {
        case "invalid_type":
          return "Tipus inv\xE0lid: s'esperava ".concat(issue.expected, ", s'ha rebut ").concat(parsedType(issue.input));
        // return `Tipus invàlid: s'esperava ${issue.expected}, s'ha rebut ${util.getParsedType(issue.input)}`;
        case "invalid_value":
          if (issue.values.length === 1) return "Valor inv\xE0lid: s'esperava ".concat(stringifyPrimitive(issue.values[0]));
          return "Opci\xF3 inv\xE0lida: s'esperava una de ".concat(joinValues(issue.values, " o "));
        case "too_big":
          {
            var _issue$origin, _sizing$unit, _issue$origin2;
            var adj = issue.inclusive ? "com a màxim" : "menys de";
            var sizing = getSizing(issue.origin);
            if (sizing) return "Massa gran: s'esperava que ".concat((_issue$origin = issue.origin) !== null && _issue$origin !== void 0 ? _issue$origin : "el valor", " contingu\xE9s ").concat(adj, " ").concat(issue.maximum.toString(), " ").concat((_sizing$unit = sizing.unit) !== null && _sizing$unit !== void 0 ? _sizing$unit : "elements");
            return "Massa gran: s'esperava que ".concat((_issue$origin2 = issue.origin) !== null && _issue$origin2 !== void 0 ? _issue$origin2 : "el valor", " fos ").concat(adj, " ").concat(issue.maximum.toString());
          }
        case "too_small":
          {
            var _adj = issue.inclusive ? "com a mínim" : "més de";
            var _sizing = getSizing(issue.origin);
            if (_sizing) {
              return "Massa petit: s'esperava que ".concat(issue.origin, " contingu\xE9s ").concat(_adj, " ").concat(issue.minimum.toString(), " ").concat(_sizing.unit);
            }
            return "Massa petit: s'esperava que ".concat(issue.origin, " fos ").concat(_adj, " ").concat(issue.minimum.toString());
          }
        case "invalid_format":
          {
            var _Nouns$_issue$format;
            var _issue = issue;
            if (_issue.format === "starts_with") {
              return "Format inv\xE0lid: ha de comen\xE7ar amb \"".concat(_issue.prefix, "\"");
            }
            if (_issue.format === "ends_with") return "Format inv\xE0lid: ha d'acabar amb \"".concat(_issue.suffix, "\"");
            if (_issue.format === "includes") return "Format inv\xE0lid: ha d'incloure \"".concat(_issue.includes, "\"");
            if (_issue.format === "regex") return "Format inv\xE0lid: ha de coincidir amb el patr\xF3 ".concat(_issue.pattern);
            return "Format inv\xE0lid per a ".concat((_Nouns$_issue$format = Nouns[_issue.format]) !== null && _Nouns$_issue$format !== void 0 ? _Nouns$_issue$format : issue.format);
          }
        case "not_multiple_of":
          return "N\xFAmero inv\xE0lid: ha de ser m\xFAltiple de ".concat(issue.divisor);
        case "unrecognized_keys":
          return "Clau".concat(issue.keys.length > 1 ? "s" : "", " no reconeguda").concat(issue.keys.length > 1 ? "s" : "", ": ").concat(joinValues(issue.keys, ", "));
        case "invalid_key":
          return "Clau inv\xE0lida a ".concat(issue.origin);
        case "invalid_union":
          return "Entrada invàlida";
        // Could also be "Tipus d'unió invàlid" but "Entrada invàlida" is more general
        case "invalid_element":
          return "Element inv\xE0lid a ".concat(issue.origin);
        default:
          return "Entrada inv\xE0lida";
      }
    };
  };
  function ca () {
    return {
      localeError: error$E()
    };
  }

  var error$D = function error() {
    var Sizable = {
      string: {
        unit: "znaků",
        verb: "mít"
      },
      file: {
        unit: "bajtů",
        verb: "mít"
      },
      array: {
        unit: "prvků",
        verb: "mít"
      },
      set: {
        unit: "prvků",
        verb: "mít"
      }
    };
    function getSizing(origin) {
      var _Sizable$origin;
      return (_Sizable$origin = Sizable[origin]) !== null && _Sizable$origin !== void 0 ? _Sizable$origin : null;
    }
    var parsedType = function parsedType(data) {
      var t = _typeof(data);
      switch (t) {
        case "number":
          {
            return Number.isNaN(data) ? "NaN" : "číslo";
          }
        case "string":
          {
            return "řetězec";
          }
        case "boolean":
          {
            return "boolean";
          }
        case "bigint":
          {
            return "bigint";
          }
        case "function":
          {
            return "funkce";
          }
        case "symbol":
          {
            return "symbol";
          }
        case "undefined":
          {
            return "undefined";
          }
        case "object":
          {
            if (Array.isArray(data)) {
              return "pole";
            }
            if (data === null) {
              return "null";
            }
            if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
              return data.constructor.name;
            }
          }
      }
      return t;
    };
    var Nouns = {
      regex: "regulární výraz",
      email: "e-mailová adresa",
      url: "URL",
      emoji: "emoji",
      uuid: "UUID",
      uuidv4: "UUIDv4",
      uuidv6: "UUIDv6",
      nanoid: "nanoid",
      guid: "GUID",
      cuid: "cuid",
      cuid2: "cuid2",
      ulid: "ULID",
      xid: "XID",
      ksuid: "KSUID",
      datetime: "datum a čas ve formátu ISO",
      date: "datum ve formátu ISO",
      time: "čas ve formátu ISO",
      duration: "doba trvání ISO",
      ipv4: "IPv4 adresa",
      ipv6: "IPv6 adresa",
      cidrv4: "rozsah IPv4",
      cidrv6: "rozsah IPv6",
      base64: "řetězec zakódovaný ve formátu base64",
      base64url: "řetězec zakódovaný ve formátu base64url",
      json_string: "řetězec ve formátu JSON",
      e164: "číslo E.164",
      jwt: "JWT",
      template_literal: "vstup"
    };
    return function (issue) {
      switch (issue.code) {
        case "invalid_type":
          return "Neplatn\xFD vstup: o\u010Dek\xE1v\xE1no ".concat(issue.expected, ", obdr\u017Eeno ").concat(parsedType(issue.input));
        case "invalid_value":
          if (issue.values.length === 1) return "Neplatn\xFD vstup: o\u010Dek\xE1v\xE1no ".concat(stringifyPrimitive(issue.values[0]));
          return "Neplatn\xE1 mo\u017Enost: o\u010Dek\xE1v\xE1na jedna z hodnot ".concat(joinValues(issue.values, "|"));
        case "too_big":
          {
            var _issue$origin2;
            var adj = issue.inclusive ? "<=" : "<";
            var sizing = getSizing(issue.origin);
            if (sizing) {
              var _issue$origin, _sizing$unit;
              return "Hodnota je p\u0159\xEDli\u0161 velk\xE1: ".concat((_issue$origin = issue.origin) !== null && _issue$origin !== void 0 ? _issue$origin : "hodnota", " mus\xED m\xEDt ").concat(adj).concat(issue.maximum.toString(), " ").concat((_sizing$unit = sizing.unit) !== null && _sizing$unit !== void 0 ? _sizing$unit : "prvků");
            }
            return "Hodnota je p\u0159\xEDli\u0161 velk\xE1: ".concat((_issue$origin2 = issue.origin) !== null && _issue$origin2 !== void 0 ? _issue$origin2 : "hodnota", " mus\xED b\xFDt ").concat(adj).concat(issue.maximum.toString());
          }
        case "too_small":
          {
            var _issue$origin4;
            var _adj = issue.inclusive ? ">=" : ">";
            var _sizing = getSizing(issue.origin);
            if (_sizing) {
              var _issue$origin3, _sizing$unit2;
              return "Hodnota je p\u0159\xEDli\u0161 mal\xE1: ".concat((_issue$origin3 = issue.origin) !== null && _issue$origin3 !== void 0 ? _issue$origin3 : "hodnota", " mus\xED m\xEDt ").concat(_adj).concat(issue.minimum.toString(), " ").concat((_sizing$unit2 = _sizing.unit) !== null && _sizing$unit2 !== void 0 ? _sizing$unit2 : "prvků");
            }
            return "Hodnota je p\u0159\xEDli\u0161 mal\xE1: ".concat((_issue$origin4 = issue.origin) !== null && _issue$origin4 !== void 0 ? _issue$origin4 : "hodnota", " mus\xED b\xFDt ").concat(_adj).concat(issue.minimum.toString());
          }
        case "invalid_format":
          {
            var _Nouns$_issue$format;
            var _issue = issue;
            if (_issue.format === "starts_with") return "Neplatn\xFD \u0159et\u011Bzec: mus\xED za\u010D\xEDnat na \"".concat(_issue.prefix, "\"");
            if (_issue.format === "ends_with") return "Neplatn\xFD \u0159et\u011Bzec: mus\xED kon\u010Dit na \"".concat(_issue.suffix, "\"");
            if (_issue.format === "includes") return "Neplatn\xFD \u0159et\u011Bzec: mus\xED obsahovat \"".concat(_issue.includes, "\"");
            if (_issue.format === "regex") return "Neplatn\xFD \u0159et\u011Bzec: mus\xED odpov\xEDdat vzoru ".concat(_issue.pattern);
            return "Neplatn\xFD form\xE1t ".concat((_Nouns$_issue$format = Nouns[_issue.format]) !== null && _Nouns$_issue$format !== void 0 ? _Nouns$_issue$format : issue.format);
          }
        case "not_multiple_of":
          return "Neplatn\xE9 \u010D\xEDslo: mus\xED b\xFDt n\xE1sobkem ".concat(issue.divisor);
        case "unrecognized_keys":
          return "Nezn\xE1m\xE9 kl\xED\u010De: ".concat(joinValues(issue.keys, ", "));
        case "invalid_key":
          return "Neplatn\xFD kl\xED\u010D v ".concat(issue.origin);
        case "invalid_union":
          return "Neplatný vstup";
        case "invalid_element":
          return "Neplatn\xE1 hodnota v ".concat(issue.origin);
        default:
          return "Neplatn\xFD vstup";
      }
    };
  };
  function cs () {
    return {
      localeError: error$D()
    };
  }

  var error$C = function error() {
    var Sizable = {
      string: {
        unit: "tegn",
        verb: "havde"
      },
      file: {
        unit: "bytes",
        verb: "havde"
      },
      array: {
        unit: "elementer",
        verb: "indeholdt"
      },
      set: {
        unit: "elementer",
        verb: "indeholdt"
      }
    };
    var TypeNames = {
      string: "streng",
      number: "tal",
      "boolean": "boolean",
      array: "liste",
      object: "objekt",
      set: "sæt",
      file: "fil"
    };
    function getSizing(origin) {
      var _Sizable$origin;
      return (_Sizable$origin = Sizable[origin]) !== null && _Sizable$origin !== void 0 ? _Sizable$origin : null;
    }
    function getTypeName(type) {
      var _TypeNames$type;
      return (_TypeNames$type = TypeNames[type]) !== null && _TypeNames$type !== void 0 ? _TypeNames$type : type;
    }
    var parsedType = function parsedType(data) {
      var t = _typeof(data);
      switch (t) {
        case "number":
          {
            return Number.isNaN(data) ? "NaN" : "tal";
          }
        case "object":
          {
            if (Array.isArray(data)) {
              return "liste";
            }
            if (data === null) {
              return "null";
            }
            if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
              return data.constructor.name;
            }
            return "objekt";
          }
      }
      return t;
    };
    var Nouns = {
      regex: "input",
      email: "e-mailadresse",
      url: "URL",
      emoji: "emoji",
      uuid: "UUID",
      uuidv4: "UUIDv4",
      uuidv6: "UUIDv6",
      nanoid: "nanoid",
      guid: "GUID",
      cuid: "cuid",
      cuid2: "cuid2",
      ulid: "ULID",
      xid: "XID",
      ksuid: "KSUID",
      datetime: "ISO dato- og klokkeslæt",
      date: "ISO-dato",
      time: "ISO-klokkeslæt",
      duration: "ISO-varighed",
      ipv4: "IPv4-område",
      ipv6: "IPv6-område",
      cidrv4: "IPv4-spektrum",
      cidrv6: "IPv6-spektrum",
      base64: "base64-kodet streng",
      base64url: "base64url-kodet streng",
      json_string: "JSON-streng",
      e164: "E.164-nummer",
      jwt: "JWT",
      template_literal: "input"
    };
    return function (issue) {
      switch (issue.code) {
        case "invalid_type":
          return "Ugyldigt input: forventede ".concat(getTypeName(issue.expected), ", fik ").concat(getTypeName(parsedType(issue.input)));
        case "invalid_value":
          if (issue.values.length === 1) return "Ugyldig v\xE6rdi: forventede ".concat(stringifyPrimitive(issue.values[0]));
          return "Ugyldigt valg: forventede en af f\xF8lgende ".concat(joinValues(issue.values, "|"));
        case "too_big":
          {
            var _sizing$unit;
            var adj = issue.inclusive ? "<=" : "<";
            var sizing = getSizing(issue.origin);
            var origin = getTypeName(issue.origin);
            if (sizing) return "For stor: forventede ".concat(origin !== null && origin !== void 0 ? origin : "value", " ").concat(sizing.verb, " ").concat(adj, " ").concat(issue.maximum.toString(), " ").concat((_sizing$unit = sizing.unit) !== null && _sizing$unit !== void 0 ? _sizing$unit : "elementer");
            return "For stor: forventede ".concat(origin !== null && origin !== void 0 ? origin : "value", " havde ").concat(adj, " ").concat(issue.maximum.toString());
          }
        case "too_small":
          {
            var _adj = issue.inclusive ? ">=" : ">";
            var _sizing = getSizing(issue.origin);
            var _origin = getTypeName(issue.origin);
            if (_sizing) {
              return "For lille: forventede ".concat(_origin, " ").concat(_sizing.verb, " ").concat(_adj, " ").concat(issue.minimum.toString(), " ").concat(_sizing.unit);
            }
            return "For lille: forventede ".concat(_origin, " havde ").concat(_adj, " ").concat(issue.minimum.toString());
          }
        case "invalid_format":
          {
            var _Nouns$_issue$format;
            var _issue = issue;
            if (_issue.format === "starts_with") return "Ugyldig streng: skal starte med \"".concat(_issue.prefix, "\"");
            if (_issue.format === "ends_with") return "Ugyldig streng: skal ende med \"".concat(_issue.suffix, "\"");
            if (_issue.format === "includes") return "Ugyldig streng: skal indeholde \"".concat(_issue.includes, "\"");
            if (_issue.format === "regex") return "Ugyldig streng: skal matche m\xF8nsteret ".concat(_issue.pattern);
            return "Ugyldig ".concat((_Nouns$_issue$format = Nouns[_issue.format]) !== null && _Nouns$_issue$format !== void 0 ? _Nouns$_issue$format : issue.format);
          }
        case "not_multiple_of":
          return "Ugyldigt tal: skal v\xE6re deleligt med ".concat(issue.divisor);
        case "unrecognized_keys":
          return "".concat(issue.keys.length > 1 ? "Ukendte nøgler" : "Ukendt nøgle", ": ").concat(joinValues(issue.keys, ", "));
        case "invalid_key":
          return "Ugyldig n\xF8gle i ".concat(issue.origin);
        case "invalid_union":
          return "Ugyldigt input: matcher ingen af de tilladte typer";
        case "invalid_element":
          return "Ugyldig v\xE6rdi i ".concat(issue.origin);
        default:
          return "Ugyldigt input";
      }
    };
  };
  function da () {
    return {
      localeError: error$C()
    };
  }

  var error$B = function error() {
    var Sizable = {
      string: {
        unit: "Zeichen",
        verb: "zu haben"
      },
      file: {
        unit: "Bytes",
        verb: "zu haben"
      },
      array: {
        unit: "Elemente",
        verb: "zu haben"
      },
      set: {
        unit: "Elemente",
        verb: "zu haben"
      }
    };
    function getSizing(origin) {
      var _Sizable$origin;
      return (_Sizable$origin = Sizable[origin]) !== null && _Sizable$origin !== void 0 ? _Sizable$origin : null;
    }
    var parsedType = function parsedType(data) {
      var t = _typeof(data);
      switch (t) {
        case "number":
          {
            return Number.isNaN(data) ? "NaN" : "Zahl";
          }
        case "object":
          {
            if (Array.isArray(data)) {
              return "Array";
            }
            if (data === null) {
              return "null";
            }
            if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
              return data.constructor.name;
            }
          }
      }
      return t;
    };
    var Nouns = {
      regex: "Eingabe",
      email: "E-Mail-Adresse",
      url: "URL",
      emoji: "Emoji",
      uuid: "UUID",
      uuidv4: "UUIDv4",
      uuidv6: "UUIDv6",
      nanoid: "nanoid",
      guid: "GUID",
      cuid: "cuid",
      cuid2: "cuid2",
      ulid: "ULID",
      xid: "XID",
      ksuid: "KSUID",
      datetime: "ISO-Datum und -Uhrzeit",
      date: "ISO-Datum",
      time: "ISO-Uhrzeit",
      duration: "ISO-Dauer",
      ipv4: "IPv4-Adresse",
      ipv6: "IPv6-Adresse",
      cidrv4: "IPv4-Bereich",
      cidrv6: "IPv6-Bereich",
      base64: "Base64-codierter String",
      base64url: "Base64-URL-codierter String",
      json_string: "JSON-String",
      e164: "E.164-Nummer",
      jwt: "JWT",
      template_literal: "Eingabe"
    };
    return function (issue) {
      switch (issue.code) {
        case "invalid_type":
          return "Ung\xFCltige Eingabe: erwartet ".concat(issue.expected, ", erhalten ").concat(parsedType(issue.input));
        case "invalid_value":
          if (issue.values.length === 1) return "Ung\xFCltige Eingabe: erwartet ".concat(stringifyPrimitive(issue.values[0]));
          return "Ung\xFCltige Option: erwartet eine von ".concat(joinValues(issue.values, "|"));
        case "too_big":
          {
            var _issue$origin, _sizing$unit, _issue$origin2;
            var adj = issue.inclusive ? "<=" : "<";
            var sizing = getSizing(issue.origin);
            if (sizing) return "Zu gro\xDF: erwartet, dass ".concat((_issue$origin = issue.origin) !== null && _issue$origin !== void 0 ? _issue$origin : "Wert", " ").concat(adj).concat(issue.maximum.toString(), " ").concat((_sizing$unit = sizing.unit) !== null && _sizing$unit !== void 0 ? _sizing$unit : "Elemente", " hat");
            return "Zu gro\xDF: erwartet, dass ".concat((_issue$origin2 = issue.origin) !== null && _issue$origin2 !== void 0 ? _issue$origin2 : "Wert", " ").concat(adj).concat(issue.maximum.toString(), " ist");
          }
        case "too_small":
          {
            var _adj = issue.inclusive ? ">=" : ">";
            var _sizing = getSizing(issue.origin);
            if (_sizing) {
              return "Zu klein: erwartet, dass ".concat(issue.origin, " ").concat(_adj).concat(issue.minimum.toString(), " ").concat(_sizing.unit, " hat");
            }
            return "Zu klein: erwartet, dass ".concat(issue.origin, " ").concat(_adj).concat(issue.minimum.toString(), " ist");
          }
        case "invalid_format":
          {
            var _Nouns$_issue$format;
            var _issue = issue;
            if (_issue.format === "starts_with") return "Ung\xFCltiger String: muss mit \"".concat(_issue.prefix, "\" beginnen");
            if (_issue.format === "ends_with") return "Ung\xFCltiger String: muss mit \"".concat(_issue.suffix, "\" enden");
            if (_issue.format === "includes") return "Ung\xFCltiger String: muss \"".concat(_issue.includes, "\" enthalten");
            if (_issue.format === "regex") return "Ung\xFCltiger String: muss dem Muster ".concat(_issue.pattern, " entsprechen");
            return "Ung\xFCltig: ".concat((_Nouns$_issue$format = Nouns[_issue.format]) !== null && _Nouns$_issue$format !== void 0 ? _Nouns$_issue$format : issue.format);
          }
        case "not_multiple_of":
          return "Ung\xFCltige Zahl: muss ein Vielfaches von ".concat(issue.divisor, " sein");
        case "unrecognized_keys":
          return "".concat(issue.keys.length > 1 ? "Unbekannte Schlüssel" : "Unbekannter Schlüssel", ": ").concat(joinValues(issue.keys, ", "));
        case "invalid_key":
          return "Ung\xFCltiger Schl\xFCssel in ".concat(issue.origin);
        case "invalid_union":
          return "Ungültige Eingabe";
        case "invalid_element":
          return "Ung\xFCltiger Wert in ".concat(issue.origin);
        default:
          return "Ung\xFCltige Eingabe";
      }
    };
  };
  function de () {
    return {
      localeError: error$B()
    };
  }

  var parsedType$5 = function parsedType(data) {
    var t = _typeof(data);
    switch (t) {
      case "number":
        {
          return Number.isNaN(data) ? "NaN" : "number";
        }
      case "object":
        {
          if (Array.isArray(data)) {
            return "array";
          }
          if (data === null) {
            return "null";
          }
          if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
            return data.constructor.name;
          }
        }
    }
    return t;
  };
  var error$A = function error() {
    var Sizable = {
      string: {
        unit: "characters",
        verb: "to have"
      },
      file: {
        unit: "bytes",
        verb: "to have"
      },
      array: {
        unit: "items",
        verb: "to have"
      },
      set: {
        unit: "items",
        verb: "to have"
      }
    };
    function getSizing(origin) {
      var _Sizable$origin;
      return (_Sizable$origin = Sizable[origin]) !== null && _Sizable$origin !== void 0 ? _Sizable$origin : null;
    }
    var Nouns = {
      regex: "input",
      email: "email address",
      url: "URL",
      emoji: "emoji",
      uuid: "UUID",
      uuidv4: "UUIDv4",
      uuidv6: "UUIDv6",
      nanoid: "nanoid",
      guid: "GUID",
      cuid: "cuid",
      cuid2: "cuid2",
      ulid: "ULID",
      xid: "XID",
      ksuid: "KSUID",
      datetime: "ISO datetime",
      date: "ISO date",
      time: "ISO time",
      duration: "ISO duration",
      ipv4: "IPv4 address",
      ipv6: "IPv6 address",
      cidrv4: "IPv4 range",
      cidrv6: "IPv6 range",
      base64: "base64-encoded string",
      base64url: "base64url-encoded string",
      json_string: "JSON string",
      e164: "E.164 number",
      jwt: "JWT",
      template_literal: "input"
    };
    return function (issue) {
      switch (issue.code) {
        case "invalid_type":
          return "Invalid input: expected ".concat(issue.expected, ", received ").concat(parsedType$5(issue.input));
        case "invalid_value":
          if (issue.values.length === 1) return "Invalid input: expected ".concat(stringifyPrimitive(issue.values[0]));
          return "Invalid option: expected one of ".concat(joinValues(issue.values, "|"));
        case "too_big":
          {
            var _issue$origin, _sizing$unit, _issue$origin2;
            var adj = issue.inclusive ? "<=" : "<";
            var sizing = getSizing(issue.origin);
            if (sizing) return "Too big: expected ".concat((_issue$origin = issue.origin) !== null && _issue$origin !== void 0 ? _issue$origin : "value", " to have ").concat(adj).concat(issue.maximum.toString(), " ").concat((_sizing$unit = sizing.unit) !== null && _sizing$unit !== void 0 ? _sizing$unit : "elements");
            return "Too big: expected ".concat((_issue$origin2 = issue.origin) !== null && _issue$origin2 !== void 0 ? _issue$origin2 : "value", " to be ").concat(adj).concat(issue.maximum.toString());
          }
        case "too_small":
          {
            var _adj = issue.inclusive ? ">=" : ">";
            var _sizing = getSizing(issue.origin);
            if (_sizing) {
              return "Too small: expected ".concat(issue.origin, " to have ").concat(_adj).concat(issue.minimum.toString(), " ").concat(_sizing.unit);
            }
            return "Too small: expected ".concat(issue.origin, " to be ").concat(_adj).concat(issue.minimum.toString());
          }
        case "invalid_format":
          {
            var _Nouns$_issue$format;
            var _issue = issue;
            if (_issue.format === "starts_with") {
              return "Invalid string: must start with \"".concat(_issue.prefix, "\"");
            }
            if (_issue.format === "ends_with") return "Invalid string: must end with \"".concat(_issue.suffix, "\"");
            if (_issue.format === "includes") return "Invalid string: must include \"".concat(_issue.includes, "\"");
            if (_issue.format === "regex") return "Invalid string: must match pattern ".concat(_issue.pattern);
            return "Invalid ".concat((_Nouns$_issue$format = Nouns[_issue.format]) !== null && _Nouns$_issue$format !== void 0 ? _Nouns$_issue$format : issue.format);
          }
        case "not_multiple_of":
          return "Invalid number: must be a multiple of ".concat(issue.divisor);
        case "unrecognized_keys":
          return "Unrecognized key".concat(issue.keys.length > 1 ? "s" : "", ": ").concat(joinValues(issue.keys, ", "));
        case "invalid_key":
          return "Invalid key in ".concat(issue.origin);
        case "invalid_union":
          return "Invalid input";
        case "invalid_element":
          return "Invalid value in ".concat(issue.origin);
        default:
          return "Invalid input";
      }
    };
  };
  function en () {
    return {
      localeError: error$A()
    };
  }

  var parsedType$4 = function parsedType(data) {
    var t = _typeof(data);
    switch (t) {
      case "number":
        {
          return Number.isNaN(data) ? "NaN" : "nombro";
        }
      case "object":
        {
          if (Array.isArray(data)) {
            return "tabelo";
          }
          if (data === null) {
            return "senvalora";
          }
          if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
            return data.constructor.name;
          }
        }
    }
    return t;
  };
  var error$z = function error() {
    var Sizable = {
      string: {
        unit: "karaktrojn",
        verb: "havi"
      },
      file: {
        unit: "bajtojn",
        verb: "havi"
      },
      array: {
        unit: "elementojn",
        verb: "havi"
      },
      set: {
        unit: "elementojn",
        verb: "havi"
      }
    };
    function getSizing(origin) {
      var _Sizable$origin;
      return (_Sizable$origin = Sizable[origin]) !== null && _Sizable$origin !== void 0 ? _Sizable$origin : null;
    }
    var Nouns = {
      regex: "enigo",
      email: "retadreso",
      url: "URL",
      emoji: "emoĝio",
      uuid: "UUID",
      uuidv4: "UUIDv4",
      uuidv6: "UUIDv6",
      nanoid: "nanoid",
      guid: "GUID",
      cuid: "cuid",
      cuid2: "cuid2",
      ulid: "ULID",
      xid: "XID",
      ksuid: "KSUID",
      datetime: "ISO-datotempo",
      date: "ISO-dato",
      time: "ISO-tempo",
      duration: "ISO-daŭro",
      ipv4: "IPv4-adreso",
      ipv6: "IPv6-adreso",
      cidrv4: "IPv4-rango",
      cidrv6: "IPv6-rango",
      base64: "64-ume kodita karaktraro",
      base64url: "URL-64-ume kodita karaktraro",
      json_string: "JSON-karaktraro",
      e164: "E.164-nombro",
      jwt: "JWT",
      template_literal: "enigo"
    };
    return function (issue) {
      switch (issue.code) {
        case "invalid_type":
          return "Nevalida enigo: atendi\u011Dis ".concat(issue.expected, ", ricevi\u011Dis ").concat(parsedType$4(issue.input));
        case "invalid_value":
          if (issue.values.length === 1) return "Nevalida enigo: atendi\u011Dis ".concat(stringifyPrimitive(issue.values[0]));
          return "Nevalida opcio: atendi\u011Dis unu el ".concat(joinValues(issue.values, "|"));
        case "too_big":
          {
            var _issue$origin, _sizing$unit, _issue$origin2;
            var adj = issue.inclusive ? "<=" : "<";
            var sizing = getSizing(issue.origin);
            if (sizing) return "Tro granda: atendi\u011Dis ke ".concat((_issue$origin = issue.origin) !== null && _issue$origin !== void 0 ? _issue$origin : "valoro", " havu ").concat(adj).concat(issue.maximum.toString(), " ").concat((_sizing$unit = sizing.unit) !== null && _sizing$unit !== void 0 ? _sizing$unit : "elementojn");
            return "Tro granda: atendi\u011Dis ke ".concat((_issue$origin2 = issue.origin) !== null && _issue$origin2 !== void 0 ? _issue$origin2 : "valoro", " havu ").concat(adj).concat(issue.maximum.toString());
          }
        case "too_small":
          {
            var _adj = issue.inclusive ? ">=" : ">";
            var _sizing = getSizing(issue.origin);
            if (_sizing) {
              return "Tro malgranda: atendi\u011Dis ke ".concat(issue.origin, " havu ").concat(_adj).concat(issue.minimum.toString(), " ").concat(_sizing.unit);
            }
            return "Tro malgranda: atendi\u011Dis ke ".concat(issue.origin, " estu ").concat(_adj).concat(issue.minimum.toString());
          }
        case "invalid_format":
          {
            var _Nouns$_issue$format;
            var _issue = issue;
            if (_issue.format === "starts_with") return "Nevalida karaktraro: devas komenci\u011Di per \"".concat(_issue.prefix, "\"");
            if (_issue.format === "ends_with") return "Nevalida karaktraro: devas fini\u011Di per \"".concat(_issue.suffix, "\"");
            if (_issue.format === "includes") return "Nevalida karaktraro: devas inkluzivi \"".concat(_issue.includes, "\"");
            if (_issue.format === "regex") return "Nevalida karaktraro: devas kongrui kun la modelo ".concat(_issue.pattern);
            return "Nevalida ".concat((_Nouns$_issue$format = Nouns[_issue.format]) !== null && _Nouns$_issue$format !== void 0 ? _Nouns$_issue$format : issue.format);
          }
        case "not_multiple_of":
          return "Nevalida nombro: devas esti oblo de ".concat(issue.divisor);
        case "unrecognized_keys":
          return "Nekonata".concat(issue.keys.length > 1 ? "j" : "", " \u015Dlosilo").concat(issue.keys.length > 1 ? "j" : "", ": ").concat(joinValues(issue.keys, ", "));
        case "invalid_key":
          return "Nevalida \u015Dlosilo en ".concat(issue.origin);
        case "invalid_union":
          return "Nevalida enigo";
        case "invalid_element":
          return "Nevalida valoro en ".concat(issue.origin);
        default:
          return "Nevalida enigo";
      }
    };
  };
  function eo () {
    return {
      localeError: error$z()
    };
  }

  var error$y = function error() {
    var Sizable = {
      string: {
        unit: "caracteres",
        verb: "tener"
      },
      file: {
        unit: "bytes",
        verb: "tener"
      },
      array: {
        unit: "elementos",
        verb: "tener"
      },
      set: {
        unit: "elementos",
        verb: "tener"
      }
    };
    var TypeNames = {
      string: "texto",
      number: "número",
      "boolean": "booleano",
      array: "arreglo",
      object: "objeto",
      set: "conjunto",
      file: "archivo",
      date: "fecha",
      bigint: "número grande",
      symbol: "símbolo",
      undefined: "indefinido",
      "null": "nulo",
      "function": "función",
      map: "mapa",
      record: "registro",
      tuple: "tupla",
      "enum": "enumeración",
      union: "unión",
      literal: "literal",
      promise: "promesa",
      "void": "vacío",
      never: "nunca",
      unknown: "desconocido",
      any: "cualquiera"
    };
    function getSizing(origin) {
      var _Sizable$origin;
      return (_Sizable$origin = Sizable[origin]) !== null && _Sizable$origin !== void 0 ? _Sizable$origin : null;
    }
    function getTypeName(type) {
      var _TypeNames$type;
      return (_TypeNames$type = TypeNames[type]) !== null && _TypeNames$type !== void 0 ? _TypeNames$type : type;
    }
    var parsedType = function parsedType(data) {
      var t = _typeof(data);
      switch (t) {
        case "number":
          {
            return Number.isNaN(data) ? "NaN" : "number";
          }
        case "object":
          {
            if (Array.isArray(data)) {
              return "array";
            }
            if (data === null) {
              return "null";
            }
            if (Object.getPrototypeOf(data) !== Object.prototype) {
              return data.constructor.name;
            }
            return "object";
          }
      }
      return t;
    };
    var Nouns = {
      regex: "entrada",
      email: "dirección de correo electrónico",
      url: "URL",
      emoji: "emoji",
      uuid: "UUID",
      uuidv4: "UUIDv4",
      uuidv6: "UUIDv6",
      nanoid: "nanoid",
      guid: "GUID",
      cuid: "cuid",
      cuid2: "cuid2",
      ulid: "ULID",
      xid: "XID",
      ksuid: "KSUID",
      datetime: "fecha y hora ISO",
      date: "fecha ISO",
      time: "hora ISO",
      duration: "duración ISO",
      ipv4: "dirección IPv4",
      ipv6: "dirección IPv6",
      cidrv4: "rango IPv4",
      cidrv6: "rango IPv6",
      base64: "cadena codificada en base64",
      base64url: "URL codificada en base64",
      json_string: "cadena JSON",
      e164: "número E.164",
      jwt: "JWT",
      template_literal: "entrada"
    };
    return function (issue) {
      switch (issue.code) {
        case "invalid_type":
          return "Entrada inv\xE1lida: se esperaba ".concat(getTypeName(issue.expected), ", recibido ").concat(getTypeName(parsedType(issue.input)));
        // return `Entrada inválida: se esperaba ${issue.expected}, recibido ${util.getParsedType(issue.input)}`;
        case "invalid_value":
          if (issue.values.length === 1) return "Entrada inv\xE1lida: se esperaba ".concat(stringifyPrimitive(issue.values[0]));
          return "Opci\xF3n inv\xE1lida: se esperaba una de ".concat(joinValues(issue.values, "|"));
        case "too_big":
          {
            var _sizing$unit;
            var adj = issue.inclusive ? "<=" : "<";
            var sizing = getSizing(issue.origin);
            var origin = getTypeName(issue.origin);
            if (sizing) return "Demasiado grande: se esperaba que ".concat(origin !== null && origin !== void 0 ? origin : "valor", " tuviera ").concat(adj).concat(issue.maximum.toString(), " ").concat((_sizing$unit = sizing.unit) !== null && _sizing$unit !== void 0 ? _sizing$unit : "elementos");
            return "Demasiado grande: se esperaba que ".concat(origin !== null && origin !== void 0 ? origin : "valor", " fuera ").concat(adj).concat(issue.maximum.toString());
          }
        case "too_small":
          {
            var _adj = issue.inclusive ? ">=" : ">";
            var _sizing = getSizing(issue.origin);
            var _origin = getTypeName(issue.origin);
            if (_sizing) {
              return "Demasiado peque\xF1o: se esperaba que ".concat(_origin, " tuviera ").concat(_adj).concat(issue.minimum.toString(), " ").concat(_sizing.unit);
            }
            return "Demasiado peque\xF1o: se esperaba que ".concat(_origin, " fuera ").concat(_adj).concat(issue.minimum.toString());
          }
        case "invalid_format":
          {
            var _Nouns$_issue$format;
            var _issue = issue;
            if (_issue.format === "starts_with") return "Cadena inv\xE1lida: debe comenzar con \"".concat(_issue.prefix, "\"");
            if (_issue.format === "ends_with") return "Cadena inv\xE1lida: debe terminar en \"".concat(_issue.suffix, "\"");
            if (_issue.format === "includes") return "Cadena inv\xE1lida: debe incluir \"".concat(_issue.includes, "\"");
            if (_issue.format === "regex") return "Cadena inv\xE1lida: debe coincidir con el patr\xF3n ".concat(_issue.pattern);
            return "Inv\xE1lido ".concat((_Nouns$_issue$format = Nouns[_issue.format]) !== null && _Nouns$_issue$format !== void 0 ? _Nouns$_issue$format : issue.format);
          }
        case "not_multiple_of":
          return "N\xFAmero inv\xE1lido: debe ser m\xFAltiplo de ".concat(issue.divisor);
        case "unrecognized_keys":
          return "Llave".concat(issue.keys.length > 1 ? "s" : "", " desconocida").concat(issue.keys.length > 1 ? "s" : "", ": ").concat(joinValues(issue.keys, ", "));
        case "invalid_key":
          return "Llave inv\xE1lida en ".concat(getTypeName(issue.origin));
        case "invalid_union":
          return "Entrada inválida";
        case "invalid_element":
          return "Valor inv\xE1lido en ".concat(getTypeName(issue.origin));
        default:
          return "Entrada inv\xE1lida";
      }
    };
  };
  function es () {
    return {
      localeError: error$y()
    };
  }

  var error$x = function error() {
    var Sizable = {
      string: {
        unit: "کاراکتر",
        verb: "داشته باشد"
      },
      file: {
        unit: "بایت",
        verb: "داشته باشد"
      },
      array: {
        unit: "آیتم",
        verb: "داشته باشد"
      },
      set: {
        unit: "آیتم",
        verb: "داشته باشد"
      }
    };
    function getSizing(origin) {
      var _Sizable$origin;
      return (_Sizable$origin = Sizable[origin]) !== null && _Sizable$origin !== void 0 ? _Sizable$origin : null;
    }
    var parsedType = function parsedType(data) {
      var t = _typeof(data);
      switch (t) {
        case "number":
          {
            return Number.isNaN(data) ? "NaN" : "عدد";
          }
        case "object":
          {
            if (Array.isArray(data)) {
              return "آرایه";
            }
            if (data === null) {
              return "null";
            }
            if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
              return data.constructor.name;
            }
          }
      }
      return t;
    };
    var Nouns = {
      regex: "ورودی",
      email: "آدرس ایمیل",
      url: "URL",
      emoji: "ایموجی",
      uuid: "UUID",
      uuidv4: "UUIDv4",
      uuidv6: "UUIDv6",
      nanoid: "nanoid",
      guid: "GUID",
      cuid: "cuid",
      cuid2: "cuid2",
      ulid: "ULID",
      xid: "XID",
      ksuid: "KSUID",
      datetime: "تاریخ و زمان ایزو",
      date: "تاریخ ایزو",
      time: "زمان ایزو",
      duration: "مدت زمان ایزو",
      ipv4: "IPv4 آدرس",
      ipv6: "IPv6 آدرس",
      cidrv4: "IPv4 دامنه",
      cidrv6: "IPv6 دامنه",
      base64: "base64-encoded رشته",
      base64url: "base64url-encoded رشته",
      json_string: "JSON رشته",
      e164: "E.164 عدد",
      jwt: "JWT",
      template_literal: "ورودی"
    };
    return function (issue) {
      switch (issue.code) {
        case "invalid_type":
          return "\u0648\u0631\u0648\u062F\u06CC \u0646\u0627\u0645\u0639\u062A\u0628\u0631: \u0645\u06CC\u200C\u0628\u0627\u06CC\u0633\u062A ".concat(issue.expected, " \u0645\u06CC\u200C\u0628\u0648\u062F\u060C ").concat(parsedType(issue.input), " \u062F\u0631\u06CC\u0627\u0641\u062A \u0634\u062F");
        case "invalid_value":
          if (issue.values.length === 1) {
            return "\u0648\u0631\u0648\u062F\u06CC \u0646\u0627\u0645\u0639\u062A\u0628\u0631: \u0645\u06CC\u200C\u0628\u0627\u06CC\u0633\u062A ".concat(stringifyPrimitive(issue.values[0]), " \u0645\u06CC\u200C\u0628\u0648\u062F");
          }
          return "\u06AF\u0632\u06CC\u0646\u0647 \u0646\u0627\u0645\u0639\u062A\u0628\u0631: \u0645\u06CC\u200C\u0628\u0627\u06CC\u0633\u062A \u06CC\u06A9\u06CC \u0627\u0632 ".concat(joinValues(issue.values, "|"), " \u0645\u06CC\u200C\u0628\u0648\u062F");
        case "too_big":
          {
            var _issue$origin2;
            var adj = issue.inclusive ? "<=" : "<";
            var sizing = getSizing(issue.origin);
            if (sizing) {
              var _issue$origin, _sizing$unit;
              return "\u062E\u06CC\u0644\u06CC \u0628\u0632\u0631\u06AF: ".concat((_issue$origin = issue.origin) !== null && _issue$origin !== void 0 ? _issue$origin : "مقدار", " \u0628\u0627\u06CC\u062F ").concat(adj).concat(issue.maximum.toString(), " ").concat((_sizing$unit = sizing.unit) !== null && _sizing$unit !== void 0 ? _sizing$unit : "عنصر", " \u0628\u0627\u0634\u062F");
            }
            return "\u062E\u06CC\u0644\u06CC \u0628\u0632\u0631\u06AF: ".concat((_issue$origin2 = issue.origin) !== null && _issue$origin2 !== void 0 ? _issue$origin2 : "مقدار", " \u0628\u0627\u06CC\u062F ").concat(adj).concat(issue.maximum.toString(), " \u0628\u0627\u0634\u062F");
          }
        case "too_small":
          {
            var _adj = issue.inclusive ? ">=" : ">";
            var _sizing = getSizing(issue.origin);
            if (_sizing) {
              return "\u062E\u06CC\u0644\u06CC \u06A9\u0648\u0686\u06A9: ".concat(issue.origin, " \u0628\u0627\u06CC\u062F ").concat(_adj).concat(issue.minimum.toString(), " ").concat(_sizing.unit, " \u0628\u0627\u0634\u062F");
            }
            return "\u062E\u06CC\u0644\u06CC \u06A9\u0648\u0686\u06A9: ".concat(issue.origin, " \u0628\u0627\u06CC\u062F ").concat(_adj).concat(issue.minimum.toString(), " \u0628\u0627\u0634\u062F");
          }
        case "invalid_format":
          {
            var _Nouns$_issue$format;
            var _issue = issue;
            if (_issue.format === "starts_with") {
              return "\u0631\u0634\u062A\u0647 \u0646\u0627\u0645\u0639\u062A\u0628\u0631: \u0628\u0627\u06CC\u062F \u0628\u0627 \"".concat(_issue.prefix, "\" \u0634\u0631\u0648\u0639 \u0634\u0648\u062F");
            }
            if (_issue.format === "ends_with") {
              return "\u0631\u0634\u062A\u0647 \u0646\u0627\u0645\u0639\u062A\u0628\u0631: \u0628\u0627\u06CC\u062F \u0628\u0627 \"".concat(_issue.suffix, "\" \u062A\u0645\u0627\u0645 \u0634\u0648\u062F");
            }
            if (_issue.format === "includes") {
              return "\u0631\u0634\u062A\u0647 \u0646\u0627\u0645\u0639\u062A\u0628\u0631: \u0628\u0627\u06CC\u062F \u0634\u0627\u0645\u0644 \"".concat(_issue.includes, "\" \u0628\u0627\u0634\u062F");
            }
            if (_issue.format === "regex") {
              return "\u0631\u0634\u062A\u0647 \u0646\u0627\u0645\u0639\u062A\u0628\u0631: \u0628\u0627\u06CC\u062F \u0628\u0627 \u0627\u0644\u06AF\u0648\u06CC ".concat(_issue.pattern, " \u0645\u0637\u0627\u0628\u0642\u062A \u062F\u0627\u0634\u062A\u0647 \u0628\u0627\u0634\u062F");
            }
            return "".concat((_Nouns$_issue$format = Nouns[_issue.format]) !== null && _Nouns$_issue$format !== void 0 ? _Nouns$_issue$format : issue.format, " \u0646\u0627\u0645\u0639\u062A\u0628\u0631");
          }
        case "not_multiple_of":
          return "\u0639\u062F\u062F \u0646\u0627\u0645\u0639\u062A\u0628\u0631: \u0628\u0627\u06CC\u062F \u0645\u0636\u0631\u0628 ".concat(issue.divisor, " \u0628\u0627\u0634\u062F");
        case "unrecognized_keys":
          return "\u06A9\u0644\u06CC\u062F".concat(issue.keys.length > 1 ? "های" : "", " \u0646\u0627\u0634\u0646\u0627\u0633: ").concat(joinValues(issue.keys, ", "));
        case "invalid_key":
          return "\u06A9\u0644\u06CC\u062F \u0646\u0627\u0634\u0646\u0627\u0633 \u062F\u0631 ".concat(issue.origin);
        case "invalid_union":
          return "\u0648\u0631\u0648\u062F\u06CC \u0646\u0627\u0645\u0639\u062A\u0628\u0631";
        case "invalid_element":
          return "\u0645\u0642\u062F\u0627\u0631 \u0646\u0627\u0645\u0639\u062A\u0628\u0631 \u062F\u0631 ".concat(issue.origin);
        default:
          return "\u0648\u0631\u0648\u062F\u06CC \u0646\u0627\u0645\u0639\u062A\u0628\u0631";
      }
    };
  };
  function fa () {
    return {
      localeError: error$x()
    };
  }

  var error$w = function error() {
    var Sizable = {
      string: {
        unit: "merkkiä",
        subject: "merkkijonon"
      },
      file: {
        unit: "tavua",
        subject: "tiedoston"
      },
      array: {
        unit: "alkiota",
        subject: "listan"
      },
      set: {
        unit: "alkiota",
        subject: "joukon"
      },
      number: {
        unit: "",
        subject: "luvun"
      },
      bigint: {
        unit: "",
        subject: "suuren kokonaisluvun"
      },
      "int": {
        unit: "",
        subject: "kokonaisluvun"
      },
      date: {
        unit: "",
        subject: "päivämäärän"
      }
    };
    function getSizing(origin) {
      var _Sizable$origin;
      return (_Sizable$origin = Sizable[origin]) !== null && _Sizable$origin !== void 0 ? _Sizable$origin : null;
    }
    var parsedType = function parsedType(data) {
      var t = _typeof(data);
      switch (t) {
        case "number":
          {
            return Number.isNaN(data) ? "NaN" : "number";
          }
        case "object":
          {
            if (Array.isArray(data)) {
              return "array";
            }
            if (data === null) {
              return "null";
            }
            if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
              return data.constructor.name;
            }
          }
      }
      return t;
    };
    var Nouns = {
      regex: "säännöllinen lauseke",
      email: "sähköpostiosoite",
      url: "URL-osoite",
      emoji: "emoji",
      uuid: "UUID",
      uuidv4: "UUIDv4",
      uuidv6: "UUIDv6",
      nanoid: "nanoid",
      guid: "GUID",
      cuid: "cuid",
      cuid2: "cuid2",
      ulid: "ULID",
      xid: "XID",
      ksuid: "KSUID",
      datetime: "ISO-aikaleima",
      date: "ISO-päivämäärä",
      time: "ISO-aika",
      duration: "ISO-kesto",
      ipv4: "IPv4-osoite",
      ipv6: "IPv6-osoite",
      cidrv4: "IPv4-alue",
      cidrv6: "IPv6-alue",
      base64: "base64-koodattu merkkijono",
      base64url: "base64url-koodattu merkkijono",
      json_string: "JSON-merkkijono",
      e164: "E.164-luku",
      jwt: "JWT",
      template_literal: "templaattimerkkijono"
    };
    return function (issue) {
      switch (issue.code) {
        case "invalid_type":
          return "Virheellinen tyyppi: odotettiin ".concat(issue.expected, ", oli ").concat(parsedType(issue.input));
        case "invalid_value":
          if (issue.values.length === 1) return "Virheellinen sy\xF6te: t\xE4ytyy olla ".concat(stringifyPrimitive(issue.values[0]));
          return "Virheellinen valinta: t\xE4ytyy olla yksi seuraavista: ".concat(joinValues(issue.values, "|"));
        case "too_big":
          {
            var adj = issue.inclusive ? "<=" : "<";
            var sizing = getSizing(issue.origin);
            if (sizing) {
              return "Liian suuri: ".concat(sizing.subject, " t\xE4ytyy olla ").concat(adj).concat(issue.maximum.toString(), " ").concat(sizing.unit).trim();
            }
            return "Liian suuri: arvon t\xE4ytyy olla ".concat(adj).concat(issue.maximum.toString());
          }
        case "too_small":
          {
            var _adj = issue.inclusive ? ">=" : ">";
            var _sizing = getSizing(issue.origin);
            if (_sizing) {
              return "Liian pieni: ".concat(_sizing.subject, " t\xE4ytyy olla ").concat(_adj).concat(issue.minimum.toString(), " ").concat(_sizing.unit).trim();
            }
            return "Liian pieni: arvon t\xE4ytyy olla ".concat(_adj).concat(issue.minimum.toString());
          }
        case "invalid_format":
          {
            var _Nouns$_issue$format;
            var _issue = issue;
            if (_issue.format === "starts_with") return "Virheellinen sy\xF6te: t\xE4ytyy alkaa \"".concat(_issue.prefix, "\"");
            if (_issue.format === "ends_with") return "Virheellinen sy\xF6te: t\xE4ytyy loppua \"".concat(_issue.suffix, "\"");
            if (_issue.format === "includes") return "Virheellinen sy\xF6te: t\xE4ytyy sis\xE4lt\xE4\xE4 \"".concat(_issue.includes, "\"");
            if (_issue.format === "regex") {
              return "Virheellinen sy\xF6te: t\xE4ytyy vastata s\xE4\xE4nn\xF6llist\xE4 lauseketta ".concat(_issue.pattern);
            }
            return "Virheellinen ".concat((_Nouns$_issue$format = Nouns[_issue.format]) !== null && _Nouns$_issue$format !== void 0 ? _Nouns$_issue$format : issue.format);
          }
        case "not_multiple_of":
          return "Virheellinen luku: t\xE4ytyy olla luvun ".concat(issue.divisor, " monikerta");
        case "unrecognized_keys":
          return "".concat(issue.keys.length > 1 ? "Tuntemattomat avaimet" : "Tuntematon avain", ": ").concat(joinValues(issue.keys, ", "));
        case "invalid_key":
          return "Virheellinen avain tietueessa";
        case "invalid_union":
          return "Virheellinen unioni";
        case "invalid_element":
          return "Virheellinen arvo joukossa";
        default:
          return "Virheellinen sy\xF6te";
      }
    };
  };
  function fi () {
    return {
      localeError: error$w()
    };
  }

  var error$v = function error() {
    var Sizable = {
      string: {
        unit: "caractères",
        verb: "avoir"
      },
      file: {
        unit: "octets",
        verb: "avoir"
      },
      array: {
        unit: "éléments",
        verb: "avoir"
      },
      set: {
        unit: "éléments",
        verb: "avoir"
      }
    };
    function getSizing(origin) {
      var _Sizable$origin;
      return (_Sizable$origin = Sizable[origin]) !== null && _Sizable$origin !== void 0 ? _Sizable$origin : null;
    }
    var parsedType = function parsedType(data) {
      var t = _typeof(data);
      switch (t) {
        case "number":
          {
            return Number.isNaN(data) ? "NaN" : "nombre";
          }
        case "object":
          {
            if (Array.isArray(data)) {
              return "tableau";
            }
            if (data === null) {
              return "null";
            }
            if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
              return data.constructor.name;
            }
          }
      }
      return t;
    };
    var Nouns = {
      regex: "entrée",
      email: "adresse e-mail",
      url: "URL",
      emoji: "emoji",
      uuid: "UUID",
      uuidv4: "UUIDv4",
      uuidv6: "UUIDv6",
      nanoid: "nanoid",
      guid: "GUID",
      cuid: "cuid",
      cuid2: "cuid2",
      ulid: "ULID",
      xid: "XID",
      ksuid: "KSUID",
      datetime: "date et heure ISO",
      date: "date ISO",
      time: "heure ISO",
      duration: "durée ISO",
      ipv4: "adresse IPv4",
      ipv6: "adresse IPv6",
      cidrv4: "plage IPv4",
      cidrv6: "plage IPv6",
      base64: "chaîne encodée en base64",
      base64url: "chaîne encodée en base64url",
      json_string: "chaîne JSON",
      e164: "numéro E.164",
      jwt: "JWT",
      template_literal: "entrée"
    };
    return function (issue) {
      switch (issue.code) {
        case "invalid_type":
          return "Entr\xE9e invalide : ".concat(issue.expected, " attendu, ").concat(parsedType(issue.input), " re\xE7u");
        case "invalid_value":
          if (issue.values.length === 1) return "Entr\xE9e invalide : ".concat(stringifyPrimitive(issue.values[0]), " attendu");
          return "Option invalide : une valeur parmi ".concat(joinValues(issue.values, "|"), " attendue");
        case "too_big":
          {
            var _issue$origin, _sizing$unit, _issue$origin2;
            var adj = issue.inclusive ? "<=" : "<";
            var sizing = getSizing(issue.origin);
            if (sizing) return "Trop grand : ".concat((_issue$origin = issue.origin) !== null && _issue$origin !== void 0 ? _issue$origin : "valeur", " doit ").concat(sizing.verb, " ").concat(adj).concat(issue.maximum.toString(), " ").concat((_sizing$unit = sizing.unit) !== null && _sizing$unit !== void 0 ? _sizing$unit : "élément(s)");
            return "Trop grand : ".concat((_issue$origin2 = issue.origin) !== null && _issue$origin2 !== void 0 ? _issue$origin2 : "valeur", " doit \xEAtre ").concat(adj).concat(issue.maximum.toString());
          }
        case "too_small":
          {
            var _adj = issue.inclusive ? ">=" : ">";
            var _sizing = getSizing(issue.origin);
            if (_sizing) {
              return "Trop petit : ".concat(issue.origin, " doit ").concat(_sizing.verb, " ").concat(_adj).concat(issue.minimum.toString(), " ").concat(_sizing.unit);
            }
            return "Trop petit : ".concat(issue.origin, " doit \xEAtre ").concat(_adj).concat(issue.minimum.toString());
          }
        case "invalid_format":
          {
            var _Nouns$_issue$format;
            var _issue = issue;
            if (_issue.format === "starts_with") return "Cha\xEEne invalide : doit commencer par \"".concat(_issue.prefix, "\"");
            if (_issue.format === "ends_with") return "Cha\xEEne invalide : doit se terminer par \"".concat(_issue.suffix, "\"");
            if (_issue.format === "includes") return "Cha\xEEne invalide : doit inclure \"".concat(_issue.includes, "\"");
            if (_issue.format === "regex") return "Cha\xEEne invalide : doit correspondre au mod\xE8le ".concat(_issue.pattern);
            return "".concat((_Nouns$_issue$format = Nouns[_issue.format]) !== null && _Nouns$_issue$format !== void 0 ? _Nouns$_issue$format : issue.format, " invalide");
          }
        case "not_multiple_of":
          return "Nombre invalide : doit \xEAtre un multiple de ".concat(issue.divisor);
        case "unrecognized_keys":
          return "Cl\xE9".concat(issue.keys.length > 1 ? "s" : "", " non reconnue").concat(issue.keys.length > 1 ? "s" : "", " : ").concat(joinValues(issue.keys, ", "));
        case "invalid_key":
          return "Cl\xE9 invalide dans ".concat(issue.origin);
        case "invalid_union":
          return "Entrée invalide";
        case "invalid_element":
          return "Valeur invalide dans ".concat(issue.origin);
        default:
          return "Entr\xE9e invalide";
      }
    };
  };
  function fr () {
    return {
      localeError: error$v()
    };
  }

  var error$u = function error() {
    var Sizable = {
      string: {
        unit: "caractères",
        verb: "avoir"
      },
      file: {
        unit: "octets",
        verb: "avoir"
      },
      array: {
        unit: "éléments",
        verb: "avoir"
      },
      set: {
        unit: "éléments",
        verb: "avoir"
      }
    };
    function getSizing(origin) {
      var _Sizable$origin;
      return (_Sizable$origin = Sizable[origin]) !== null && _Sizable$origin !== void 0 ? _Sizable$origin : null;
    }
    var parsedType = function parsedType(data) {
      var t = _typeof(data);
      switch (t) {
        case "number":
          {
            return Number.isNaN(data) ? "NaN" : "number";
          }
        case "object":
          {
            if (Array.isArray(data)) {
              return "array";
            }
            if (data === null) {
              return "null";
            }
            if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
              return data.constructor.name;
            }
          }
      }
      return t;
    };
    var Nouns = {
      regex: "entrée",
      email: "adresse courriel",
      url: "URL",
      emoji: "emoji",
      uuid: "UUID",
      uuidv4: "UUIDv4",
      uuidv6: "UUIDv6",
      nanoid: "nanoid",
      guid: "GUID",
      cuid: "cuid",
      cuid2: "cuid2",
      ulid: "ULID",
      xid: "XID",
      ksuid: "KSUID",
      datetime: "date-heure ISO",
      date: "date ISO",
      time: "heure ISO",
      duration: "durée ISO",
      ipv4: "adresse IPv4",
      ipv6: "adresse IPv6",
      cidrv4: "plage IPv4",
      cidrv6: "plage IPv6",
      base64: "chaîne encodée en base64",
      base64url: "chaîne encodée en base64url",
      json_string: "chaîne JSON",
      e164: "numéro E.164",
      jwt: "JWT",
      template_literal: "entrée"
    };
    return function (issue) {
      switch (issue.code) {
        case "invalid_type":
          return "Entr\xE9e invalide : attendu ".concat(issue.expected, ", re\xE7u ").concat(parsedType(issue.input));
        case "invalid_value":
          if (issue.values.length === 1) return "Entr\xE9e invalide : attendu ".concat(stringifyPrimitive(issue.values[0]));
          return "Option invalide : attendu l'une des valeurs suivantes ".concat(joinValues(issue.values, "|"));
        case "too_big":
          {
            var _issue$origin, _issue$origin2;
            var adj = issue.inclusive ? "≤" : "<";
            var sizing = getSizing(issue.origin);
            if (sizing) return "Trop grand : attendu que ".concat((_issue$origin = issue.origin) !== null && _issue$origin !== void 0 ? _issue$origin : "la valeur", " ait ").concat(adj).concat(issue.maximum.toString(), " ").concat(sizing.unit);
            return "Trop grand : attendu que ".concat((_issue$origin2 = issue.origin) !== null && _issue$origin2 !== void 0 ? _issue$origin2 : "la valeur", " soit ").concat(adj).concat(issue.maximum.toString());
          }
        case "too_small":
          {
            var _adj = issue.inclusive ? "≥" : ">";
            var _sizing = getSizing(issue.origin);
            if (_sizing) {
              return "Trop petit : attendu que ".concat(issue.origin, " ait ").concat(_adj).concat(issue.minimum.toString(), " ").concat(_sizing.unit);
            }
            return "Trop petit : attendu que ".concat(issue.origin, " soit ").concat(_adj).concat(issue.minimum.toString());
          }
        case "invalid_format":
          {
            var _Nouns$_issue$format;
            var _issue = issue;
            if (_issue.format === "starts_with") {
              return "Cha\xEEne invalide : doit commencer par \"".concat(_issue.prefix, "\"");
            }
            if (_issue.format === "ends_with") return "Cha\xEEne invalide : doit se terminer par \"".concat(_issue.suffix, "\"");
            if (_issue.format === "includes") return "Cha\xEEne invalide : doit inclure \"".concat(_issue.includes, "\"");
            if (_issue.format === "regex") return "Cha\xEEne invalide : doit correspondre au motif ".concat(_issue.pattern);
            return "".concat((_Nouns$_issue$format = Nouns[_issue.format]) !== null && _Nouns$_issue$format !== void 0 ? _Nouns$_issue$format : issue.format, " invalide");
          }
        case "not_multiple_of":
          return "Nombre invalide : doit \xEAtre un multiple de ".concat(issue.divisor);
        case "unrecognized_keys":
          return "Cl\xE9".concat(issue.keys.length > 1 ? "s" : "", " non reconnue").concat(issue.keys.length > 1 ? "s" : "", " : ").concat(joinValues(issue.keys, ", "));
        case "invalid_key":
          return "Cl\xE9 invalide dans ".concat(issue.origin);
        case "invalid_union":
          return "Entrée invalide";
        case "invalid_element":
          return "Valeur invalide dans ".concat(issue.origin);
        default:
          return "Entr\xE9e invalide";
      }
    };
  };
  function frCA () {
    return {
      localeError: error$u()
    };
  }

  var error$t = function error() {
    var Sizable = {
      string: {
        unit: "אותיות",
        verb: "לכלול"
      },
      file: {
        unit: "בייטים",
        verb: "לכלול"
      },
      array: {
        unit: "פריטים",
        verb: "לכלול"
      },
      set: {
        unit: "פריטים",
        verb: "לכלול"
      }
    };
    function getSizing(origin) {
      var _Sizable$origin;
      return (_Sizable$origin = Sizable[origin]) !== null && _Sizable$origin !== void 0 ? _Sizable$origin : null;
    }
    var parsedType = function parsedType(data) {
      var t = _typeof(data);
      switch (t) {
        case "number":
          {
            return Number.isNaN(data) ? "NaN" : "number";
          }
        case "object":
          {
            if (Array.isArray(data)) {
              return "array";
            }
            if (data === null) {
              return "null";
            }
            if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
              return data.constructor.name;
            }
          }
      }
      return t;
    };
    var Nouns = {
      regex: "קלט",
      email: "כתובת אימייל",
      url: "כתובת רשת",
      emoji: "אימוג'י",
      uuid: "UUID",
      uuidv4: "UUIDv4",
      uuidv6: "UUIDv6",
      nanoid: "nanoid",
      guid: "GUID",
      cuid: "cuid",
      cuid2: "cuid2",
      ulid: "ULID",
      xid: "XID",
      ksuid: "KSUID",
      datetime: "תאריך וזמן ISO",
      date: "תאריך ISO",
      time: "זמן ISO",
      duration: "משך זמן ISO",
      ipv4: "כתובת IPv4",
      ipv6: "כתובת IPv6",
      cidrv4: "טווח IPv4",
      cidrv6: "טווח IPv6",
      base64: "מחרוזת בבסיס 64",
      base64url: "מחרוזת בבסיס 64 לכתובות רשת",
      json_string: "מחרוזת JSON",
      e164: "מספר E.164",
      jwt: "JWT",
      template_literal: "קלט"
    };
    return function (issue) {
      switch (issue.code) {
        case "invalid_type":
          return "\u05E7\u05DC\u05D8 \u05DC\u05D0 \u05EA\u05E7\u05D9\u05DF: \u05E6\u05E8\u05D9\u05DA ".concat(issue.expected, ", \u05D4\u05EA\u05E7\u05D1\u05DC ").concat(parsedType(issue.input));
        // return `Invalid input: expected ${issue.expected}, received ${util.getParsedType(issue.input)}`;
        case "invalid_value":
          if (issue.values.length === 1) return "\u05E7\u05DC\u05D8 \u05DC\u05D0 \u05EA\u05E7\u05D9\u05DF: \u05E6\u05E8\u05D9\u05DA ".concat(stringifyPrimitive(issue.values[0]));
          return "\u05E7\u05DC\u05D8 \u05DC\u05D0 \u05EA\u05E7\u05D9\u05DF: \u05E6\u05E8\u05D9\u05DA \u05D0\u05D7\u05EA \u05DE\u05D4\u05D0\u05E4\u05E9\u05E8\u05D5\u05D9\u05D5\u05EA  ".concat(joinValues(issue.values, "|"));
        case "too_big":
          {
            var _issue$origin, _sizing$unit, _issue$origin2;
            var adj = issue.inclusive ? "<=" : "<";
            var sizing = getSizing(issue.origin);
            if (sizing) return "\u05D2\u05D3\u05D5\u05DC \u05DE\u05D3\u05D9: ".concat((_issue$origin = issue.origin) !== null && _issue$origin !== void 0 ? _issue$origin : "value", " \u05E6\u05E8\u05D9\u05DA \u05DC\u05D4\u05D9\u05D5\u05EA ").concat(adj).concat(issue.maximum.toString(), " ").concat((_sizing$unit = sizing.unit) !== null && _sizing$unit !== void 0 ? _sizing$unit : "elements");
            return "\u05D2\u05D3\u05D5\u05DC \u05DE\u05D3\u05D9: ".concat((_issue$origin2 = issue.origin) !== null && _issue$origin2 !== void 0 ? _issue$origin2 : "value", " \u05E6\u05E8\u05D9\u05DA \u05DC\u05D4\u05D9\u05D5\u05EA ").concat(adj).concat(issue.maximum.toString());
          }
        case "too_small":
          {
            var _adj = issue.inclusive ? ">=" : ">";
            var _sizing = getSizing(issue.origin);
            if (_sizing) {
              return "\u05E7\u05D8\u05DF \u05DE\u05D3\u05D9: ".concat(issue.origin, " \u05E6\u05E8\u05D9\u05DA \u05DC\u05D4\u05D9\u05D5\u05EA ").concat(_adj).concat(issue.minimum.toString(), " ").concat(_sizing.unit);
            }
            return "\u05E7\u05D8\u05DF \u05DE\u05D3\u05D9: ".concat(issue.origin, " \u05E6\u05E8\u05D9\u05DA \u05DC\u05D4\u05D9\u05D5\u05EA ").concat(_adj).concat(issue.minimum.toString());
          }
        case "invalid_format":
          {
            var _Nouns$_issue$format;
            var _issue = issue;
            if (_issue.format === "starts_with") return "\u05DE\u05D7\u05E8\u05D5\u05D6\u05EA \u05DC\u05D0 \u05EA\u05E7\u05D9\u05E0\u05D4: \u05D7\u05D9\u05D9\u05D1\u05EA \u05DC\u05D4\u05EA\u05D7\u05D9\u05DC \u05D1\"".concat(_issue.prefix, "\"");
            if (_issue.format === "ends_with") return "\u05DE\u05D7\u05E8\u05D5\u05D6\u05EA \u05DC\u05D0 \u05EA\u05E7\u05D9\u05E0\u05D4: \u05D7\u05D9\u05D9\u05D1\u05EA \u05DC\u05D4\u05E1\u05EA\u05D9\u05D9\u05DD \u05D1 \"".concat(_issue.suffix, "\"");
            if (_issue.format === "includes") return "\u05DE\u05D7\u05E8\u05D5\u05D6\u05EA \u05DC\u05D0 \u05EA\u05E7\u05D9\u05E0\u05D4: \u05D7\u05D9\u05D9\u05D1\u05EA \u05DC\u05DB\u05DC\u05D5\u05DC \"".concat(_issue.includes, "\"");
            if (_issue.format === "regex") return "\u05DE\u05D7\u05E8\u05D5\u05D6\u05EA \u05DC\u05D0 \u05EA\u05E7\u05D9\u05E0\u05D4: \u05D7\u05D9\u05D9\u05D1\u05EA \u05DC\u05D4\u05EA\u05D0\u05D9\u05DD \u05DC\u05EA\u05D1\u05E0\u05D9\u05EA ".concat(_issue.pattern);
            return "".concat((_Nouns$_issue$format = Nouns[_issue.format]) !== null && _Nouns$_issue$format !== void 0 ? _Nouns$_issue$format : issue.format, " \u05DC\u05D0 \u05EA\u05E7\u05D9\u05DF");
          }
        case "not_multiple_of":
          return "\u05DE\u05E1\u05E4\u05E8 \u05DC\u05D0 \u05EA\u05E7\u05D9\u05DF: \u05D7\u05D9\u05D9\u05D1 \u05DC\u05D4\u05D9\u05D5\u05EA \u05DE\u05DB\u05E4\u05DC\u05D4 \u05E9\u05DC ".concat(issue.divisor);
        case "unrecognized_keys":
          return "\u05DE\u05E4\u05EA\u05D7".concat(issue.keys.length > 1 ? "ות" : "", " \u05DC\u05D0 \u05DE\u05D6\u05D5\u05D4").concat(issue.keys.length > 1 ? "ים" : "ה", ": ").concat(joinValues(issue.keys, ", "));
        case "invalid_key":
          return "\u05DE\u05E4\u05EA\u05D7 \u05DC\u05D0 \u05EA\u05E7\u05D9\u05DF \u05D1".concat(issue.origin);
        case "invalid_union":
          return "קלט לא תקין";
        case "invalid_element":
          return "\u05E2\u05E8\u05DA \u05DC\u05D0 \u05EA\u05E7\u05D9\u05DF \u05D1".concat(issue.origin);
        default:
          return "\u05E7\u05DC\u05D8 \u05DC\u05D0 \u05EA\u05E7\u05D9\u05DF";
      }
    };
  };
  function he () {
    return {
      localeError: error$t()
    };
  }

  var error$s = function error() {
    var Sizable = {
      string: {
        unit: "karakter",
        verb: "legyen"
      },
      file: {
        unit: "byte",
        verb: "legyen"
      },
      array: {
        unit: "elem",
        verb: "legyen"
      },
      set: {
        unit: "elem",
        verb: "legyen"
      }
    };
    function getSizing(origin) {
      var _Sizable$origin;
      return (_Sizable$origin = Sizable[origin]) !== null && _Sizable$origin !== void 0 ? _Sizable$origin : null;
    }
    var parsedType = function parsedType(data) {
      var t = _typeof(data);
      switch (t) {
        case "number":
          {
            return Number.isNaN(data) ? "NaN" : "szám";
          }
        case "object":
          {
            if (Array.isArray(data)) {
              return "tömb";
            }
            if (data === null) {
              return "null";
            }
            if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
              return data.constructor.name;
            }
          }
      }
      return t;
    };
    var Nouns = {
      regex: "bemenet",
      email: "email cím",
      url: "URL",
      emoji: "emoji",
      uuid: "UUID",
      uuidv4: "UUIDv4",
      uuidv6: "UUIDv6",
      nanoid: "nanoid",
      guid: "GUID",
      cuid: "cuid",
      cuid2: "cuid2",
      ulid: "ULID",
      xid: "XID",
      ksuid: "KSUID",
      datetime: "ISO időbélyeg",
      date: "ISO dátum",
      time: "ISO idő",
      duration: "ISO időintervallum",
      ipv4: "IPv4 cím",
      ipv6: "IPv6 cím",
      cidrv4: "IPv4 tartomány",
      cidrv6: "IPv6 tartomány",
      base64: "base64-kódolt string",
      base64url: "base64url-kódolt string",
      json_string: "JSON string",
      e164: "E.164 szám",
      jwt: "JWT",
      template_literal: "bemenet"
    };
    return function (issue) {
      switch (issue.code) {
        case "invalid_type":
          return "\xC9rv\xE9nytelen bemenet: a v\xE1rt \xE9rt\xE9k ".concat(issue.expected, ", a kapott \xE9rt\xE9k ").concat(parsedType(issue.input));
        // return `Invalid input: expected ${issue.expected}, received ${util.getParsedType(issue.input)}`;
        case "invalid_value":
          if (issue.values.length === 1) return "\xC9rv\xE9nytelen bemenet: a v\xE1rt \xE9rt\xE9k ".concat(stringifyPrimitive(issue.values[0]));
          return "\xC9rv\xE9nytelen opci\xF3: valamelyik \xE9rt\xE9k v\xE1rt ".concat(joinValues(issue.values, "|"));
        case "too_big":
          {
            var _issue$origin, _sizing$unit, _issue$origin2;
            var adj = issue.inclusive ? "<=" : "<";
            var sizing = getSizing(issue.origin);
            if (sizing) return "T\xFAl nagy: ".concat((_issue$origin = issue.origin) !== null && _issue$origin !== void 0 ? _issue$origin : "érték", " m\xE9rete t\xFAl nagy ").concat(adj).concat(issue.maximum.toString(), " ").concat((_sizing$unit = sizing.unit) !== null && _sizing$unit !== void 0 ? _sizing$unit : "elem");
            return "T\xFAl nagy: a bemeneti \xE9rt\xE9k ".concat((_issue$origin2 = issue.origin) !== null && _issue$origin2 !== void 0 ? _issue$origin2 : "érték", " t\xFAl nagy: ").concat(adj).concat(issue.maximum.toString());
          }
        case "too_small":
          {
            var _adj = issue.inclusive ? ">=" : ">";
            var _sizing = getSizing(issue.origin);
            if (_sizing) {
              return "T\xFAl kicsi: a bemeneti \xE9rt\xE9k ".concat(issue.origin, " m\xE9rete t\xFAl kicsi ").concat(_adj).concat(issue.minimum.toString(), " ").concat(_sizing.unit);
            }
            return "T\xFAl kicsi: a bemeneti \xE9rt\xE9k ".concat(issue.origin, " t\xFAl kicsi ").concat(_adj).concat(issue.minimum.toString());
          }
        case "invalid_format":
          {
            var _Nouns$_issue$format;
            var _issue = issue;
            if (_issue.format === "starts_with") return "\xC9rv\xE9nytelen string: \"".concat(_issue.prefix, "\" \xE9rt\xE9kkel kell kezd\u0151dnie");
            if (_issue.format === "ends_with") return "\xC9rv\xE9nytelen string: \"".concat(_issue.suffix, "\" \xE9rt\xE9kkel kell v\xE9gz\u0151dnie");
            if (_issue.format === "includes") return "\xC9rv\xE9nytelen string: \"".concat(_issue.includes, "\" \xE9rt\xE9ket kell tartalmaznia");
            if (_issue.format === "regex") return "\xC9rv\xE9nytelen string: ".concat(_issue.pattern, " mint\xE1nak kell megfelelnie");
            return "\xC9rv\xE9nytelen ".concat((_Nouns$_issue$format = Nouns[_issue.format]) !== null && _Nouns$_issue$format !== void 0 ? _Nouns$_issue$format : issue.format);
          }
        case "not_multiple_of":
          return "\xC9rv\xE9nytelen sz\xE1m: ".concat(issue.divisor, " t\xF6bbsz\xF6r\xF6s\xE9nek kell lennie");
        case "unrecognized_keys":
          return "Ismeretlen kulcs".concat(issue.keys.length > 1 ? "s" : "", ": ").concat(joinValues(issue.keys, ", "));
        case "invalid_key":
          return "\xC9rv\xE9nytelen kulcs ".concat(issue.origin);
        case "invalid_union":
          return "Érvénytelen bemenet";
        case "invalid_element":
          return "\xC9rv\xE9nytelen \xE9rt\xE9k: ".concat(issue.origin);
        default:
          return "\xC9rv\xE9nytelen bemenet";
      }
    };
  };
  function hu () {
    return {
      localeError: error$s()
    };
  }

  var error$r = function error() {
    var Sizable = {
      string: {
        unit: "karakter",
        verb: "memiliki"
      },
      file: {
        unit: "byte",
        verb: "memiliki"
      },
      array: {
        unit: "item",
        verb: "memiliki"
      },
      set: {
        unit: "item",
        verb: "memiliki"
      }
    };
    function getSizing(origin) {
      var _Sizable$origin;
      return (_Sizable$origin = Sizable[origin]) !== null && _Sizable$origin !== void 0 ? _Sizable$origin : null;
    }
    var parsedType = function parsedType(data) {
      var t = _typeof(data);
      switch (t) {
        case "number":
          {
            return Number.isNaN(data) ? "NaN" : "number";
          }
        case "object":
          {
            if (Array.isArray(data)) {
              return "array";
            }
            if (data === null) {
              return "null";
            }
            if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
              return data.constructor.name;
            }
          }
      }
      return t;
    };
    var Nouns = {
      regex: "input",
      email: "alamat email",
      url: "URL",
      emoji: "emoji",
      uuid: "UUID",
      uuidv4: "UUIDv4",
      uuidv6: "UUIDv6",
      nanoid: "nanoid",
      guid: "GUID",
      cuid: "cuid",
      cuid2: "cuid2",
      ulid: "ULID",
      xid: "XID",
      ksuid: "KSUID",
      datetime: "tanggal dan waktu format ISO",
      date: "tanggal format ISO",
      time: "jam format ISO",
      duration: "durasi format ISO",
      ipv4: "alamat IPv4",
      ipv6: "alamat IPv6",
      cidrv4: "rentang alamat IPv4",
      cidrv6: "rentang alamat IPv6",
      base64: "string dengan enkode base64",
      base64url: "string dengan enkode base64url",
      json_string: "string JSON",
      e164: "angka E.164",
      jwt: "JWT",
      template_literal: "input"
    };
    return function (issue) {
      switch (issue.code) {
        case "invalid_type":
          return "Input tidak valid: diharapkan ".concat(issue.expected, ", diterima ").concat(parsedType(issue.input));
        case "invalid_value":
          if (issue.values.length === 1) return "Input tidak valid: diharapkan ".concat(stringifyPrimitive(issue.values[0]));
          return "Pilihan tidak valid: diharapkan salah satu dari ".concat(joinValues(issue.values, "|"));
        case "too_big":
          {
            var _issue$origin, _sizing$unit, _issue$origin2;
            var adj = issue.inclusive ? "<=" : "<";
            var sizing = getSizing(issue.origin);
            if (sizing) return "Terlalu besar: diharapkan ".concat((_issue$origin = issue.origin) !== null && _issue$origin !== void 0 ? _issue$origin : "value", " memiliki ").concat(adj).concat(issue.maximum.toString(), " ").concat((_sizing$unit = sizing.unit) !== null && _sizing$unit !== void 0 ? _sizing$unit : "elemen");
            return "Terlalu besar: diharapkan ".concat((_issue$origin2 = issue.origin) !== null && _issue$origin2 !== void 0 ? _issue$origin2 : "value", " menjadi ").concat(adj).concat(issue.maximum.toString());
          }
        case "too_small":
          {
            var _adj = issue.inclusive ? ">=" : ">";
            var _sizing = getSizing(issue.origin);
            if (_sizing) {
              return "Terlalu kecil: diharapkan ".concat(issue.origin, " memiliki ").concat(_adj).concat(issue.minimum.toString(), " ").concat(_sizing.unit);
            }
            return "Terlalu kecil: diharapkan ".concat(issue.origin, " menjadi ").concat(_adj).concat(issue.minimum.toString());
          }
        case "invalid_format":
          {
            var _Nouns$_issue$format;
            var _issue = issue;
            if (_issue.format === "starts_with") return "String tidak valid: harus dimulai dengan \"".concat(_issue.prefix, "\"");
            if (_issue.format === "ends_with") return "String tidak valid: harus berakhir dengan \"".concat(_issue.suffix, "\"");
            if (_issue.format === "includes") return "String tidak valid: harus menyertakan \"".concat(_issue.includes, "\"");
            if (_issue.format === "regex") return "String tidak valid: harus sesuai pola ".concat(_issue.pattern);
            return "".concat((_Nouns$_issue$format = Nouns[_issue.format]) !== null && _Nouns$_issue$format !== void 0 ? _Nouns$_issue$format : issue.format, " tidak valid");
          }
        case "not_multiple_of":
          return "Angka tidak valid: harus kelipatan dari ".concat(issue.divisor);
        case "unrecognized_keys":
          return "Kunci tidak dikenali ".concat(issue.keys.length > 1 ? "s" : "", ": ").concat(joinValues(issue.keys, ", "));
        case "invalid_key":
          return "Kunci tidak valid di ".concat(issue.origin);
        case "invalid_union":
          return "Input tidak valid";
        case "invalid_element":
          return "Nilai tidak valid di ".concat(issue.origin);
        default:
          return "Input tidak valid";
      }
    };
  };
  function id () {
    return {
      localeError: error$r()
    };
  }

  var parsedType$3 = function parsedType(data) {
    var t = _typeof(data);
    switch (t) {
      case "number":
        {
          return Number.isNaN(data) ? "NaN" : "númer";
        }
      case "object":
        {
          if (Array.isArray(data)) {
            return "fylki";
          }
          if (data === null) {
            return "null";
          }
          if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
            return data.constructor.name;
          }
        }
    }
    return t;
  };
  var error$q = function error() {
    var Sizable = {
      string: {
        unit: "stafi",
        verb: "að hafa"
      },
      file: {
        unit: "bæti",
        verb: "að hafa"
      },
      array: {
        unit: "hluti",
        verb: "að hafa"
      },
      set: {
        unit: "hluti",
        verb: "að hafa"
      }
    };
    function getSizing(origin) {
      var _Sizable$origin;
      return (_Sizable$origin = Sizable[origin]) !== null && _Sizable$origin !== void 0 ? _Sizable$origin : null;
    }
    var Nouns = {
      regex: "gildi",
      email: "netfang",
      url: "vefslóð",
      emoji: "emoji",
      uuid: "UUID",
      uuidv4: "UUIDv4",
      uuidv6: "UUIDv6",
      nanoid: "nanoid",
      guid: "GUID",
      cuid: "cuid",
      cuid2: "cuid2",
      ulid: "ULID",
      xid: "XID",
      ksuid: "KSUID",
      datetime: "ISO dagsetning og tími",
      date: "ISO dagsetning",
      time: "ISO tími",
      duration: "ISO tímalengd",
      ipv4: "IPv4 address",
      ipv6: "IPv6 address",
      cidrv4: "IPv4 range",
      cidrv6: "IPv6 range",
      base64: "base64-encoded strengur",
      base64url: "base64url-encoded strengur",
      json_string: "JSON strengur",
      e164: "E.164 tölugildi",
      jwt: "JWT",
      template_literal: "gildi"
    };
    return function (issue) {
      switch (issue.code) {
        case "invalid_type":
          return "Rangt gildi: \xDE\xFA sl\xF3st inn ".concat(parsedType$3(issue.input), " \xFEar sem \xE1 a\xF0 vera ").concat(issue.expected);
        case "invalid_value":
          if (issue.values.length === 1) return "Rangt gildi: gert r\xE1\xF0 fyrir ".concat(stringifyPrimitive(issue.values[0]));
          return "\xD3gilt val: m\xE1 vera eitt af eftirfarandi ".concat(joinValues(issue.values, "|"));
        case "too_big":
          {
            var _issue$origin, _sizing$unit, _issue$origin2;
            var adj = issue.inclusive ? "<=" : "<";
            var sizing = getSizing(issue.origin);
            if (sizing) return "Of st\xF3rt: gert er r\xE1\xF0 fyrir a\xF0 ".concat((_issue$origin = issue.origin) !== null && _issue$origin !== void 0 ? _issue$origin : "gildi", " hafi ").concat(adj).concat(issue.maximum.toString(), " ").concat((_sizing$unit = sizing.unit) !== null && _sizing$unit !== void 0 ? _sizing$unit : "hluti");
            return "Of st\xF3rt: gert er r\xE1\xF0 fyrir a\xF0 ".concat((_issue$origin2 = issue.origin) !== null && _issue$origin2 !== void 0 ? _issue$origin2 : "gildi", " s\xE9 ").concat(adj).concat(issue.maximum.toString());
          }
        case "too_small":
          {
            var _adj = issue.inclusive ? ">=" : ">";
            var _sizing = getSizing(issue.origin);
            if (_sizing) {
              return "Of l\xEDti\xF0: gert er r\xE1\xF0 fyrir a\xF0 ".concat(issue.origin, " hafi ").concat(_adj).concat(issue.minimum.toString(), " ").concat(_sizing.unit);
            }
            return "Of l\xEDti\xF0: gert er r\xE1\xF0 fyrir a\xF0 ".concat(issue.origin, " s\xE9 ").concat(_adj).concat(issue.minimum.toString());
          }
        case "invalid_format":
          {
            var _Nouns$_issue$format;
            var _issue = issue;
            if (_issue.format === "starts_with") {
              return "\xD3gildur strengur: ver\xF0ur a\xF0 byrja \xE1 \"".concat(_issue.prefix, "\"");
            }
            if (_issue.format === "ends_with") return "\xD3gildur strengur: ver\xF0ur a\xF0 enda \xE1 \"".concat(_issue.suffix, "\"");
            if (_issue.format === "includes") return "\xD3gildur strengur: ver\xF0ur a\xF0 innihalda \"".concat(_issue.includes, "\"");
            if (_issue.format === "regex") return "\xD3gildur strengur: ver\xF0ur a\xF0 fylgja mynstri ".concat(_issue.pattern);
            return "Rangt ".concat((_Nouns$_issue$format = Nouns[_issue.format]) !== null && _Nouns$_issue$format !== void 0 ? _Nouns$_issue$format : issue.format);
          }
        case "not_multiple_of":
          return "R\xF6ng tala: ver\xF0ur a\xF0 vera margfeldi af ".concat(issue.divisor);
        case "unrecognized_keys":
          return "\xD3\xFEekkt ".concat(issue.keys.length > 1 ? "ir lyklar" : "ur lykill", ": ").concat(joinValues(issue.keys, ", "));
        case "invalid_key":
          return "Rangur lykill \xED ".concat(issue.origin);
        case "invalid_union":
          return "Rangt gildi";
        case "invalid_element":
          return "Rangt gildi \xED ".concat(issue.origin);
        default:
          return "Rangt gildi";
      }
    };
  };
  function is () {
    return {
      localeError: error$q()
    };
  }

  var error$p = function error() {
    var Sizable = {
      string: {
        unit: "caratteri",
        verb: "avere"
      },
      file: {
        unit: "byte",
        verb: "avere"
      },
      array: {
        unit: "elementi",
        verb: "avere"
      },
      set: {
        unit: "elementi",
        verb: "avere"
      }
    };
    function getSizing(origin) {
      var _Sizable$origin;
      return (_Sizable$origin = Sizable[origin]) !== null && _Sizable$origin !== void 0 ? _Sizable$origin : null;
    }
    var parsedType = function parsedType(data) {
      var t = _typeof(data);
      switch (t) {
        case "number":
          {
            return Number.isNaN(data) ? "NaN" : "numero";
          }
        case "object":
          {
            if (Array.isArray(data)) {
              return "vettore";
            }
            if (data === null) {
              return "null";
            }
            if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
              return data.constructor.name;
            }
          }
      }
      return t;
    };
    var Nouns = {
      regex: "input",
      email: "indirizzo email",
      url: "URL",
      emoji: "emoji",
      uuid: "UUID",
      uuidv4: "UUIDv4",
      uuidv6: "UUIDv6",
      nanoid: "nanoid",
      guid: "GUID",
      cuid: "cuid",
      cuid2: "cuid2",
      ulid: "ULID",
      xid: "XID",
      ksuid: "KSUID",
      datetime: "data e ora ISO",
      date: "data ISO",
      time: "ora ISO",
      duration: "durata ISO",
      ipv4: "indirizzo IPv4",
      ipv6: "indirizzo IPv6",
      cidrv4: "intervallo IPv4",
      cidrv6: "intervallo IPv6",
      base64: "stringa codificata in base64",
      base64url: "URL codificata in base64",
      json_string: "stringa JSON",
      e164: "numero E.164",
      jwt: "JWT",
      template_literal: "input"
    };
    return function (issue) {
      switch (issue.code) {
        case "invalid_type":
          return "Input non valido: atteso ".concat(issue.expected, ", ricevuto ").concat(parsedType(issue.input));
        // return `Input non valido: atteso ${issue.expected}, ricevuto ${util.getParsedType(issue.input)}`;
        case "invalid_value":
          if (issue.values.length === 1) return "Input non valido: atteso ".concat(stringifyPrimitive(issue.values[0]));
          return "Opzione non valida: atteso uno tra ".concat(joinValues(issue.values, "|"));
        case "too_big":
          {
            var _issue$origin, _sizing$unit, _issue$origin2;
            var adj = issue.inclusive ? "<=" : "<";
            var sizing = getSizing(issue.origin);
            if (sizing) return "Troppo grande: ".concat((_issue$origin = issue.origin) !== null && _issue$origin !== void 0 ? _issue$origin : "valore", " deve avere ").concat(adj).concat(issue.maximum.toString(), " ").concat((_sizing$unit = sizing.unit) !== null && _sizing$unit !== void 0 ? _sizing$unit : "elementi");
            return "Troppo grande: ".concat((_issue$origin2 = issue.origin) !== null && _issue$origin2 !== void 0 ? _issue$origin2 : "valore", " deve essere ").concat(adj).concat(issue.maximum.toString());
          }
        case "too_small":
          {
            var _adj = issue.inclusive ? ">=" : ">";
            var _sizing = getSizing(issue.origin);
            if (_sizing) {
              return "Troppo piccolo: ".concat(issue.origin, " deve avere ").concat(_adj).concat(issue.minimum.toString(), " ").concat(_sizing.unit);
            }
            return "Troppo piccolo: ".concat(issue.origin, " deve essere ").concat(_adj).concat(issue.minimum.toString());
          }
        case "invalid_format":
          {
            var _Nouns$_issue$format;
            var _issue = issue;
            if (_issue.format === "starts_with") return "Stringa non valida: deve iniziare con \"".concat(_issue.prefix, "\"");
            if (_issue.format === "ends_with") return "Stringa non valida: deve terminare con \"".concat(_issue.suffix, "\"");
            if (_issue.format === "includes") return "Stringa non valida: deve includere \"".concat(_issue.includes, "\"");
            if (_issue.format === "regex") return "Stringa non valida: deve corrispondere al pattern ".concat(_issue.pattern);
            return "Invalid ".concat((_Nouns$_issue$format = Nouns[_issue.format]) !== null && _Nouns$_issue$format !== void 0 ? _Nouns$_issue$format : issue.format);
          }
        case "not_multiple_of":
          return "Numero non valido: deve essere un multiplo di ".concat(issue.divisor);
        case "unrecognized_keys":
          return "Chiav".concat(issue.keys.length > 1 ? "i" : "e", " non riconosciut").concat(issue.keys.length > 1 ? "e" : "a", ": ").concat(joinValues(issue.keys, ", "));
        case "invalid_key":
          return "Chiave non valida in ".concat(issue.origin);
        case "invalid_union":
          return "Input non valido";
        case "invalid_element":
          return "Valore non valido in ".concat(issue.origin);
        default:
          return "Input non valido";
      }
    };
  };
  function it () {
    return {
      localeError: error$p()
    };
  }

  var error$o = function error() {
    var Sizable = {
      string: {
        unit: "文字",
        verb: "である"
      },
      file: {
        unit: "バイト",
        verb: "である"
      },
      array: {
        unit: "要素",
        verb: "である"
      },
      set: {
        unit: "要素",
        verb: "である"
      }
    };
    function getSizing(origin) {
      var _Sizable$origin;
      return (_Sizable$origin = Sizable[origin]) !== null && _Sizable$origin !== void 0 ? _Sizable$origin : null;
    }
    var parsedType = function parsedType(data) {
      var t = _typeof(data);
      switch (t) {
        case "number":
          {
            return Number.isNaN(data) ? "NaN" : "数値";
          }
        case "object":
          {
            if (Array.isArray(data)) {
              return "配列";
            }
            if (data === null) {
              return "null";
            }
            if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
              return data.constructor.name;
            }
          }
      }
      return t;
    };
    var Nouns = {
      regex: "入力値",
      email: "メールアドレス",
      url: "URL",
      emoji: "絵文字",
      uuid: "UUID",
      uuidv4: "UUIDv4",
      uuidv6: "UUIDv6",
      nanoid: "nanoid",
      guid: "GUID",
      cuid: "cuid",
      cuid2: "cuid2",
      ulid: "ULID",
      xid: "XID",
      ksuid: "KSUID",
      datetime: "ISO日時",
      date: "ISO日付",
      time: "ISO時刻",
      duration: "ISO期間",
      ipv4: "IPv4アドレス",
      ipv6: "IPv6アドレス",
      cidrv4: "IPv4範囲",
      cidrv6: "IPv6範囲",
      base64: "base64エンコード文字列",
      base64url: "base64urlエンコード文字列",
      json_string: "JSON文字列",
      e164: "E.164番号",
      jwt: "JWT",
      template_literal: "入力値"
    };
    return function (issue) {
      switch (issue.code) {
        case "invalid_type":
          return "\u7121\u52B9\u306A\u5165\u529B: ".concat(issue.expected, "\u304C\u671F\u5F85\u3055\u308C\u307E\u3057\u305F\u304C\u3001").concat(parsedType(issue.input), "\u304C\u5165\u529B\u3055\u308C\u307E\u3057\u305F");
        case "invalid_value":
          if (issue.values.length === 1) return "\u7121\u52B9\u306A\u5165\u529B: ".concat(stringifyPrimitive(issue.values[0]), "\u304C\u671F\u5F85\u3055\u308C\u307E\u3057\u305F");
          return "\u7121\u52B9\u306A\u9078\u629E: ".concat(joinValues(issue.values, "、"), "\u306E\u3044\u305A\u308C\u304B\u3067\u3042\u308B\u5FC5\u8981\u304C\u3042\u308A\u307E\u3059");
        case "too_big":
          {
            var _issue$origin, _sizing$unit, _issue$origin2;
            var adj = issue.inclusive ? "以下である" : "より小さい";
            var sizing = getSizing(issue.origin);
            if (sizing) return "\u5927\u304D\u3059\u304E\u308B\u5024: ".concat((_issue$origin = issue.origin) !== null && _issue$origin !== void 0 ? _issue$origin : "値", "\u306F").concat(issue.maximum.toString()).concat((_sizing$unit = sizing.unit) !== null && _sizing$unit !== void 0 ? _sizing$unit : "要素").concat(adj, "\u5FC5\u8981\u304C\u3042\u308A\u307E\u3059");
            return "\u5927\u304D\u3059\u304E\u308B\u5024: ".concat((_issue$origin2 = issue.origin) !== null && _issue$origin2 !== void 0 ? _issue$origin2 : "値", "\u306F").concat(issue.maximum.toString()).concat(adj, "\u5FC5\u8981\u304C\u3042\u308A\u307E\u3059");
          }
        case "too_small":
          {
            var _adj = issue.inclusive ? "以上である" : "より大きい";
            var _sizing = getSizing(issue.origin);
            if (_sizing) return "\u5C0F\u3055\u3059\u304E\u308B\u5024: ".concat(issue.origin, "\u306F").concat(issue.minimum.toString()).concat(_sizing.unit).concat(_adj, "\u5FC5\u8981\u304C\u3042\u308A\u307E\u3059");
            return "\u5C0F\u3055\u3059\u304E\u308B\u5024: ".concat(issue.origin, "\u306F").concat(issue.minimum.toString()).concat(_adj, "\u5FC5\u8981\u304C\u3042\u308A\u307E\u3059");
          }
        case "invalid_format":
          {
            var _Nouns$_issue$format;
            var _issue = issue;
            if (_issue.format === "starts_with") return "\u7121\u52B9\u306A\u6587\u5B57\u5217: \"".concat(_issue.prefix, "\"\u3067\u59CB\u307E\u308B\u5FC5\u8981\u304C\u3042\u308A\u307E\u3059");
            if (_issue.format === "ends_with") return "\u7121\u52B9\u306A\u6587\u5B57\u5217: \"".concat(_issue.suffix, "\"\u3067\u7D42\u308F\u308B\u5FC5\u8981\u304C\u3042\u308A\u307E\u3059");
            if (_issue.format === "includes") return "\u7121\u52B9\u306A\u6587\u5B57\u5217: \"".concat(_issue.includes, "\"\u3092\u542B\u3080\u5FC5\u8981\u304C\u3042\u308A\u307E\u3059");
            if (_issue.format === "regex") return "\u7121\u52B9\u306A\u6587\u5B57\u5217: \u30D1\u30BF\u30FC\u30F3".concat(_issue.pattern, "\u306B\u4E00\u81F4\u3059\u308B\u5FC5\u8981\u304C\u3042\u308A\u307E\u3059");
            return "\u7121\u52B9\u306A".concat((_Nouns$_issue$format = Nouns[_issue.format]) !== null && _Nouns$_issue$format !== void 0 ? _Nouns$_issue$format : issue.format);
          }
        case "not_multiple_of":
          return "\u7121\u52B9\u306A\u6570\u5024: ".concat(issue.divisor, "\u306E\u500D\u6570\u3067\u3042\u308B\u5FC5\u8981\u304C\u3042\u308A\u307E\u3059");
        case "unrecognized_keys":
          return "\u8A8D\u8B58\u3055\u308C\u3066\u3044\u306A\u3044\u30AD\u30FC".concat(issue.keys.length > 1 ? "群" : "", ": ").concat(joinValues(issue.keys, "、"));
        case "invalid_key":
          return "".concat(issue.origin, "\u5185\u306E\u7121\u52B9\u306A\u30AD\u30FC");
        case "invalid_union":
          return "無効な入力";
        case "invalid_element":
          return "".concat(issue.origin, "\u5185\u306E\u7121\u52B9\u306A\u5024");
        default:
          return "\u7121\u52B9\u306A\u5165\u529B";
      }
    };
  };
  function ja () {
    return {
      localeError: error$o()
    };
  }

  var parsedType$2 = function parsedType(data) {
    var _typeMap$t;
    var t = _typeof(data);
    switch (t) {
      case "number":
        {
          return Number.isNaN(data) ? "NaN" : "რიცხვი";
        }
      case "object":
        {
          if (Array.isArray(data)) {
            return "მასივი";
          }
          if (data === null) {
            return "null";
          }
          if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
            return data.constructor.name;
          }
        }
    }
    var typeMap = {
      string: "სტრინგი",
      "boolean": "ბულეანი",
      undefined: "undefined",
      bigint: "bigint",
      symbol: "symbol",
      "function": "ფუნქცია"
    };
    return (_typeMap$t = typeMap[t]) !== null && _typeMap$t !== void 0 ? _typeMap$t : t;
  };
  var error$n = function error() {
    var Sizable = {
      string: {
        unit: "სიმბოლო",
        verb: "უნდა შეიცავდეს"
      },
      file: {
        unit: "ბაიტი",
        verb: "უნდა შეიცავდეს"
      },
      array: {
        unit: "ელემენტი",
        verb: "უნდა შეიცავდეს"
      },
      set: {
        unit: "ელემენტი",
        verb: "უნდა შეიცავდეს"
      }
    };
    function getSizing(origin) {
      var _Sizable$origin;
      return (_Sizable$origin = Sizable[origin]) !== null && _Sizable$origin !== void 0 ? _Sizable$origin : null;
    }
    var Nouns = {
      regex: "შეყვანა",
      email: "ელ-ფოსტის მისამართი",
      url: "URL",
      emoji: "ემოჯი",
      uuid: "UUID",
      uuidv4: "UUIDv4",
      uuidv6: "UUIDv6",
      nanoid: "nanoid",
      guid: "GUID",
      cuid: "cuid",
      cuid2: "cuid2",
      ulid: "ULID",
      xid: "XID",
      ksuid: "KSUID",
      datetime: "თარიღი-დრო",
      date: "თარიღი",
      time: "დრო",
      duration: "ხანგრძლივობა",
      ipv4: "IPv4 მისამართი",
      ipv6: "IPv6 მისამართი",
      cidrv4: "IPv4 დიაპაზონი",
      cidrv6: "IPv6 დიაპაზონი",
      base64: "base64-კოდირებული სტრინგი",
      base64url: "base64url-კოდირებული სტრინგი",
      json_string: "JSON სტრინგი",
      e164: "E.164 ნომერი",
      jwt: "JWT",
      template_literal: "შეყვანა"
    };
    return function (issue) {
      switch (issue.code) {
        case "invalid_type":
          return "\u10D0\u10E0\u10D0\u10E1\u10EC\u10DD\u10E0\u10D8 \u10E8\u10D4\u10E7\u10D5\u10D0\u10DC\u10D0: \u10DB\u10DD\u10E1\u10D0\u10DA\u10DD\u10D3\u10DC\u10D4\u10DA\u10D8 ".concat(issue.expected, ", \u10DB\u10D8\u10E6\u10D4\u10D1\u10E3\u10DA\u10D8 ").concat(parsedType$2(issue.input));
        case "invalid_value":
          if (issue.values.length === 1) return "\u10D0\u10E0\u10D0\u10E1\u10EC\u10DD\u10E0\u10D8 \u10E8\u10D4\u10E7\u10D5\u10D0\u10DC\u10D0: \u10DB\u10DD\u10E1\u10D0\u10DA\u10DD\u10D3\u10DC\u10D4\u10DA\u10D8 ".concat(stringifyPrimitive(issue.values[0]));
          return "\u10D0\u10E0\u10D0\u10E1\u10EC\u10DD\u10E0\u10D8 \u10D5\u10D0\u10E0\u10D8\u10D0\u10DC\u10E2\u10D8: \u10DB\u10DD\u10E1\u10D0\u10DA\u10DD\u10D3\u10DC\u10D4\u10DA\u10D8\u10D0 \u10D4\u10E0\u10D7-\u10D4\u10E0\u10D7\u10D8 ".concat(joinValues(issue.values, "|"), "-\u10D3\u10D0\u10DC");
        case "too_big":
          {
            var _issue$origin, _issue$origin2;
            var adj = issue.inclusive ? "<=" : "<";
            var sizing = getSizing(issue.origin);
            if (sizing) return "\u10D6\u10D4\u10D3\u10DB\u10D4\u10E2\u10D0\u10D3 \u10D3\u10D8\u10D3\u10D8: \u10DB\u10DD\u10E1\u10D0\u10DA\u10DD\u10D3\u10DC\u10D4\u10DA\u10D8 ".concat((_issue$origin = issue.origin) !== null && _issue$origin !== void 0 ? _issue$origin : "მნიშვნელობა", " ").concat(sizing.verb, " ").concat(adj).concat(issue.maximum.toString(), " ").concat(sizing.unit);
            return "\u10D6\u10D4\u10D3\u10DB\u10D4\u10E2\u10D0\u10D3 \u10D3\u10D8\u10D3\u10D8: \u10DB\u10DD\u10E1\u10D0\u10DA\u10DD\u10D3\u10DC\u10D4\u10DA\u10D8 ".concat((_issue$origin2 = issue.origin) !== null && _issue$origin2 !== void 0 ? _issue$origin2 : "მნიშვნელობა", " \u10D8\u10E7\u10DD\u10E1 ").concat(adj).concat(issue.maximum.toString());
          }
        case "too_small":
          {
            var _adj = issue.inclusive ? ">=" : ">";
            var _sizing = getSizing(issue.origin);
            if (_sizing) {
              return "\u10D6\u10D4\u10D3\u10DB\u10D4\u10E2\u10D0\u10D3 \u10DE\u10D0\u10E2\u10D0\u10E0\u10D0: \u10DB\u10DD\u10E1\u10D0\u10DA\u10DD\u10D3\u10DC\u10D4\u10DA\u10D8 ".concat(issue.origin, " ").concat(_sizing.verb, " ").concat(_adj).concat(issue.minimum.toString(), " ").concat(_sizing.unit);
            }
            return "\u10D6\u10D4\u10D3\u10DB\u10D4\u10E2\u10D0\u10D3 \u10DE\u10D0\u10E2\u10D0\u10E0\u10D0: \u10DB\u10DD\u10E1\u10D0\u10DA\u10DD\u10D3\u10DC\u10D4\u10DA\u10D8 ".concat(issue.origin, " \u10D8\u10E7\u10DD\u10E1 ").concat(_adj).concat(issue.minimum.toString());
          }
        case "invalid_format":
          {
            var _Nouns$_issue$format;
            var _issue = issue;
            if (_issue.format === "starts_with") {
              return "\u10D0\u10E0\u10D0\u10E1\u10EC\u10DD\u10E0\u10D8 \u10E1\u10E2\u10E0\u10D8\u10DC\u10D2\u10D8: \u10E3\u10DC\u10D3\u10D0 \u10D8\u10EC\u10E7\u10D4\u10D1\u10DD\u10D3\u10D4\u10E1 \"".concat(_issue.prefix, "\"-\u10D8\u10D7");
            }
            if (_issue.format === "ends_with") return "\u10D0\u10E0\u10D0\u10E1\u10EC\u10DD\u10E0\u10D8 \u10E1\u10E2\u10E0\u10D8\u10DC\u10D2\u10D8: \u10E3\u10DC\u10D3\u10D0 \u10DB\u10D7\u10D0\u10D5\u10E0\u10D3\u10D4\u10D1\u10DD\u10D3\u10D4\u10E1 \"".concat(_issue.suffix, "\"-\u10D8\u10D7");
            if (_issue.format === "includes") return "\u10D0\u10E0\u10D0\u10E1\u10EC\u10DD\u10E0\u10D8 \u10E1\u10E2\u10E0\u10D8\u10DC\u10D2\u10D8: \u10E3\u10DC\u10D3\u10D0 \u10E8\u10D4\u10D8\u10EA\u10D0\u10D5\u10D3\u10D4\u10E1 \"".concat(_issue.includes, "\"-\u10E1");
            if (_issue.format === "regex") return "\u10D0\u10E0\u10D0\u10E1\u10EC\u10DD\u10E0\u10D8 \u10E1\u10E2\u10E0\u10D8\u10DC\u10D2\u10D8: \u10E3\u10DC\u10D3\u10D0 \u10E8\u10D4\u10D4\u10E1\u10D0\u10D1\u10D0\u10DB\u10D4\u10D1\u10DD\u10D3\u10D4\u10E1 \u10E8\u10D0\u10D1\u10DA\u10DD\u10DC\u10E1 ".concat(_issue.pattern);
            return "\u10D0\u10E0\u10D0\u10E1\u10EC\u10DD\u10E0\u10D8 ".concat((_Nouns$_issue$format = Nouns[_issue.format]) !== null && _Nouns$_issue$format !== void 0 ? _Nouns$_issue$format : issue.format);
          }
        case "not_multiple_of":
          return "\u10D0\u10E0\u10D0\u10E1\u10EC\u10DD\u10E0\u10D8 \u10E0\u10D8\u10EA\u10EE\u10D5\u10D8: \u10E3\u10DC\u10D3\u10D0 \u10D8\u10E7\u10DD\u10E1 ".concat(issue.divisor, "-\u10D8\u10E1 \u10EF\u10D4\u10E0\u10D0\u10D3\u10D8");
        case "unrecognized_keys":
          return "\u10E3\u10EA\u10DC\u10DD\u10D1\u10D8 \u10D2\u10D0\u10E1\u10D0\u10E6\u10D4\u10D1".concat(issue.keys.length > 1 ? "ები" : "ი", ": ").concat(joinValues(issue.keys, ", "));
        case "invalid_key":
          return "\u10D0\u10E0\u10D0\u10E1\u10EC\u10DD\u10E0\u10D8 \u10D2\u10D0\u10E1\u10D0\u10E6\u10D4\u10D1\u10D8 ".concat(issue.origin, "-\u10E8\u10D8");
        case "invalid_union":
          return "არასწორი შეყვანა";
        case "invalid_element":
          return "\u10D0\u10E0\u10D0\u10E1\u10EC\u10DD\u10E0\u10D8 \u10DB\u10DC\u10D8\u10E8\u10D5\u10DC\u10D4\u10DA\u10DD\u10D1\u10D0 ".concat(issue.origin, "-\u10E8\u10D8");
        default:
          return "\u10D0\u10E0\u10D0\u10E1\u10EC\u10DD\u10E0\u10D8 \u10E8\u10D4\u10E7\u10D5\u10D0\u10DC\u10D0";
      }
    };
  };
  function ka () {
    return {
      localeError: error$n()
    };
  }

  var error$m = function error() {
    var Sizable = {
      string: {
        unit: "តួអក្សរ",
        verb: "គួរមាន"
      },
      file: {
        unit: "បៃ",
        verb: "គួរមាន"
      },
      array: {
        unit: "ធាតុ",
        verb: "គួរមាន"
      },
      set: {
        unit: "ធាតុ",
        verb: "គួរមាន"
      }
    };
    function getSizing(origin) {
      var _Sizable$origin;
      return (_Sizable$origin = Sizable[origin]) !== null && _Sizable$origin !== void 0 ? _Sizable$origin : null;
    }
    var parsedType = function parsedType(data) {
      var t = _typeof(data);
      switch (t) {
        case "number":
          {
            return Number.isNaN(data) ? "មិនមែនជាលេខ (NaN)" : "លេខ";
          }
        case "object":
          {
            if (Array.isArray(data)) {
              return "អារេ (Array)";
            }
            if (data === null) {
              return "គ្មានតម្លៃ (null)";
            }
            if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
              return data.constructor.name;
            }
          }
      }
      return t;
    };
    var Nouns = {
      regex: "ទិន្នន័យបញ្ចូល",
      email: "អាសយដ្ឋានអ៊ីមែល",
      url: "URL",
      emoji: "សញ្ញាអារម្មណ៍",
      uuid: "UUID",
      uuidv4: "UUIDv4",
      uuidv6: "UUIDv6",
      nanoid: "nanoid",
      guid: "GUID",
      cuid: "cuid",
      cuid2: "cuid2",
      ulid: "ULID",
      xid: "XID",
      ksuid: "KSUID",
      datetime: "កាលបរិច្ឆេទ និងម៉ោង ISO",
      date: "កាលបរិច្ឆេទ ISO",
      time: "ម៉ោង ISO",
      duration: "រយៈពេល ISO",
      ipv4: "អាសយដ្ឋាន IPv4",
      ipv6: "អាសយដ្ឋាន IPv6",
      cidrv4: "ដែនអាសយដ្ឋាន IPv4",
      cidrv6: "ដែនអាសយដ្ឋាន IPv6",
      base64: "ខ្សែអក្សរអ៊ិកូដ base64",
      base64url: "ខ្សែអក្សរអ៊ិកូដ base64url",
      json_string: "ខ្សែអក្សរ JSON",
      e164: "លេខ E.164",
      jwt: "JWT",
      template_literal: "ទិន្នន័យបញ្ចូល"
    };
    return function (issue) {
      switch (issue.code) {
        case "invalid_type":
          return "\u1791\u17B7\u1793\u17D2\u1793\u1793\u17D0\u1799\u1794\u1789\u17D2\u1785\u17BC\u179B\u1798\u17B7\u1793\u178F\u17D2\u179A\u17B9\u1798\u178F\u17D2\u179A\u17BC\u179C\u17D6 \u178F\u17D2\u179A\u17BC\u179C\u1780\u17B6\u179A ".concat(issue.expected, " \u1794\u17C9\u17BB\u1793\u17D2\u178F\u17C2\u1791\u1791\u17BD\u179B\u1794\u17B6\u1793 ").concat(parsedType(issue.input));
        case "invalid_value":
          if (issue.values.length === 1) return "\u1791\u17B7\u1793\u17D2\u1793\u1793\u17D0\u1799\u1794\u1789\u17D2\u1785\u17BC\u179B\u1798\u17B7\u1793\u178F\u17D2\u179A\u17B9\u1798\u178F\u17D2\u179A\u17BC\u179C\u17D6 \u178F\u17D2\u179A\u17BC\u179C\u1780\u17B6\u179A ".concat(stringifyPrimitive(issue.values[0]));
          return "\u1787\u1798\u17D2\u179A\u17BE\u179F\u1798\u17B7\u1793\u178F\u17D2\u179A\u17B9\u1798\u178F\u17D2\u179A\u17BC\u179C\u17D6 \u178F\u17D2\u179A\u17BC\u179C\u1787\u17B6\u1798\u17BD\u1799\u1780\u17D2\u1793\u17BB\u1784\u1785\u17C6\u178E\u17C4\u1798 ".concat(joinValues(issue.values, "|"));
        case "too_big":
          {
            var _issue$origin, _sizing$unit, _issue$origin2;
            var adj = issue.inclusive ? "<=" : "<";
            var sizing = getSizing(issue.origin);
            if (sizing) return "\u1792\u17C6\u1796\u17C1\u1780\u17D6 \u178F\u17D2\u179A\u17BC\u179C\u1780\u17B6\u179A ".concat((_issue$origin = issue.origin) !== null && _issue$origin !== void 0 ? _issue$origin : "តម្លៃ", " ").concat(adj, " ").concat(issue.maximum.toString(), " ").concat((_sizing$unit = sizing.unit) !== null && _sizing$unit !== void 0 ? _sizing$unit : "ធាតុ");
            return "\u1792\u17C6\u1796\u17C1\u1780\u17D6 \u178F\u17D2\u179A\u17BC\u179C\u1780\u17B6\u179A ".concat((_issue$origin2 = issue.origin) !== null && _issue$origin2 !== void 0 ? _issue$origin2 : "តម្លៃ", " ").concat(adj, " ").concat(issue.maximum.toString());
          }
        case "too_small":
          {
            var _adj = issue.inclusive ? ">=" : ">";
            var _sizing = getSizing(issue.origin);
            if (_sizing) {
              return "\u178F\u17BC\u1785\u1796\u17C1\u1780\u17D6 \u178F\u17D2\u179A\u17BC\u179C\u1780\u17B6\u179A ".concat(issue.origin, " ").concat(_adj, " ").concat(issue.minimum.toString(), " ").concat(_sizing.unit);
            }
            return "\u178F\u17BC\u1785\u1796\u17C1\u1780\u17D6 \u178F\u17D2\u179A\u17BC\u179C\u1780\u17B6\u179A ".concat(issue.origin, " ").concat(_adj, " ").concat(issue.minimum.toString());
          }
        case "invalid_format":
          {
            var _Nouns$_issue$format;
            var _issue = issue;
            if (_issue.format === "starts_with") {
              return "\u1781\u17D2\u179F\u17C2\u17A2\u1780\u17D2\u179F\u179A\u1798\u17B7\u1793\u178F\u17D2\u179A\u17B9\u1798\u178F\u17D2\u179A\u17BC\u179C\u17D6 \u178F\u17D2\u179A\u17BC\u179C\u1785\u17B6\u1794\u17CB\u1795\u17D2\u178F\u17BE\u1798\u178A\u17C4\u1799 \"".concat(_issue.prefix, "\"");
            }
            if (_issue.format === "ends_with") return "\u1781\u17D2\u179F\u17C2\u17A2\u1780\u17D2\u179F\u179A\u1798\u17B7\u1793\u178F\u17D2\u179A\u17B9\u1798\u178F\u17D2\u179A\u17BC\u179C\u17D6 \u178F\u17D2\u179A\u17BC\u179C\u1794\u1789\u17D2\u1785\u1794\u17CB\u178A\u17C4\u1799 \"".concat(_issue.suffix, "\"");
            if (_issue.format === "includes") return "\u1781\u17D2\u179F\u17C2\u17A2\u1780\u17D2\u179F\u179A\u1798\u17B7\u1793\u178F\u17D2\u179A\u17B9\u1798\u178F\u17D2\u179A\u17BC\u179C\u17D6 \u178F\u17D2\u179A\u17BC\u179C\u1798\u17B6\u1793 \"".concat(_issue.includes, "\"");
            if (_issue.format === "regex") return "\u1781\u17D2\u179F\u17C2\u17A2\u1780\u17D2\u179F\u179A\u1798\u17B7\u1793\u178F\u17D2\u179A\u17B9\u1798\u178F\u17D2\u179A\u17BC\u179C\u17D6 \u178F\u17D2\u179A\u17BC\u179C\u178F\u17C2\u1795\u17D2\u1782\u17BC\u1795\u17D2\u1782\u1784\u1793\u17B9\u1784\u1791\u1798\u17D2\u179A\u1784\u17CB\u178A\u17C2\u179B\u1794\u17B6\u1793\u1780\u17C6\u178E\u178F\u17CB ".concat(_issue.pattern);
            return "\u1798\u17B7\u1793\u178F\u17D2\u179A\u17B9\u1798\u178F\u17D2\u179A\u17BC\u179C\u17D6 ".concat((_Nouns$_issue$format = Nouns[_issue.format]) !== null && _Nouns$_issue$format !== void 0 ? _Nouns$_issue$format : issue.format);
          }
        case "not_multiple_of":
          return "\u179B\u17C1\u1781\u1798\u17B7\u1793\u178F\u17D2\u179A\u17B9\u1798\u178F\u17D2\u179A\u17BC\u179C\u17D6 \u178F\u17D2\u179A\u17BC\u179C\u178F\u17C2\u1787\u17B6\u1796\u17A0\u17BB\u1782\u17BB\u178E\u1793\u17C3 ".concat(issue.divisor);
        case "unrecognized_keys":
          return "\u179A\u1780\u1783\u17BE\u1789\u179F\u17C4\u1798\u17B7\u1793\u179F\u17D2\u1782\u17B6\u179B\u17CB\u17D6 ".concat(joinValues(issue.keys, ", "));
        case "invalid_key":
          return "\u179F\u17C4\u1798\u17B7\u1793\u178F\u17D2\u179A\u17B9\u1798\u178F\u17D2\u179A\u17BC\u179C\u1793\u17C5\u1780\u17D2\u1793\u17BB\u1784 ".concat(issue.origin);
        case "invalid_union":
          return "\u1791\u17B7\u1793\u17D2\u1793\u1793\u17D0\u1799\u1798\u17B7\u1793\u178F\u17D2\u179A\u17B9\u1798\u178F\u17D2\u179A\u17BC\u179C";
        case "invalid_element":
          return "\u1791\u17B7\u1793\u17D2\u1793\u1793\u17D0\u1799\u1798\u17B7\u1793\u178F\u17D2\u179A\u17B9\u1798\u178F\u17D2\u179A\u17BC\u179C\u1793\u17C5\u1780\u17D2\u1793\u17BB\u1784 ".concat(issue.origin);
        default:
          return "\u1791\u17B7\u1793\u17D2\u1793\u1793\u17D0\u1799\u1798\u17B7\u1793\u178F\u17D2\u179A\u17B9\u1798\u178F\u17D2\u179A\u17BC\u179C";
      }
    };
  };
  function km () {
    return {
      localeError: error$m()
    };
  }

  /** @deprecated Use `km` instead. */
  function kh () {
    return km();
  }

  var error$l = function error() {
    var Sizable = {
      string: {
        unit: "문자",
        verb: "to have"
      },
      file: {
        unit: "바이트",
        verb: "to have"
      },
      array: {
        unit: "개",
        verb: "to have"
      },
      set: {
        unit: "개",
        verb: "to have"
      }
    };
    function getSizing(origin) {
      var _Sizable$origin;
      return (_Sizable$origin = Sizable[origin]) !== null && _Sizable$origin !== void 0 ? _Sizable$origin : null;
    }
    var parsedType = function parsedType(data) {
      var t = _typeof(data);
      switch (t) {
        case "number":
          {
            return Number.isNaN(data) ? "NaN" : "number";
          }
        case "object":
          {
            if (Array.isArray(data)) {
              return "array";
            }
            if (data === null) {
              return "null";
            }
            if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
              return data.constructor.name;
            }
          }
      }
      return t;
    };
    var Nouns = {
      regex: "입력",
      email: "이메일 주소",
      url: "URL",
      emoji: "이모지",
      uuid: "UUID",
      uuidv4: "UUIDv4",
      uuidv6: "UUIDv6",
      nanoid: "nanoid",
      guid: "GUID",
      cuid: "cuid",
      cuid2: "cuid2",
      ulid: "ULID",
      xid: "XID",
      ksuid: "KSUID",
      datetime: "ISO 날짜시간",
      date: "ISO 날짜",
      time: "ISO 시간",
      duration: "ISO 기간",
      ipv4: "IPv4 주소",
      ipv6: "IPv6 주소",
      cidrv4: "IPv4 범위",
      cidrv6: "IPv6 범위",
      base64: "base64 인코딩 문자열",
      base64url: "base64url 인코딩 문자열",
      json_string: "JSON 문자열",
      e164: "E.164 번호",
      jwt: "JWT",
      template_literal: "입력"
    };
    return function (issue) {
      switch (issue.code) {
        case "invalid_type":
          return "\uC798\uBABB\uB41C \uC785\uB825: \uC608\uC0C1 \uD0C0\uC785\uC740 ".concat(issue.expected, ", \uBC1B\uC740 \uD0C0\uC785\uC740 ").concat(parsedType(issue.input), "\uC785\uB2C8\uB2E4");
        case "invalid_value":
          if (issue.values.length === 1) return "\uC798\uBABB\uB41C \uC785\uB825: \uAC12\uC740 ".concat(stringifyPrimitive(issue.values[0]), " \uC774\uC5B4\uC57C \uD569\uB2C8\uB2E4");
          return "\uC798\uBABB\uB41C \uC635\uC158: ".concat(joinValues(issue.values, "또는 "), " \uC911 \uD558\uB098\uC5EC\uC57C \uD569\uB2C8\uB2E4");
        case "too_big":
          {
            var _sizing$unit, _issue$origin, _issue$origin2;
            var adj = issue.inclusive ? "이하" : "미만";
            var suffix = adj === "미만" ? "이어야 합니다" : "여야 합니다";
            var sizing = getSizing(issue.origin);
            var unit = (_sizing$unit = sizing === null || sizing === void 0 ? void 0 : sizing.unit) !== null && _sizing$unit !== void 0 ? _sizing$unit : "요소";
            if (sizing) return "".concat((_issue$origin = issue.origin) !== null && _issue$origin !== void 0 ? _issue$origin : "값", "\uC774 \uB108\uBB34 \uD07D\uB2C8\uB2E4: ").concat(issue.maximum.toString()).concat(unit, " ").concat(adj).concat(suffix);
            return "".concat((_issue$origin2 = issue.origin) !== null && _issue$origin2 !== void 0 ? _issue$origin2 : "값", "\uC774 \uB108\uBB34 \uD07D\uB2C8\uB2E4: ").concat(issue.maximum.toString(), " ").concat(adj).concat(suffix);
          }
        case "too_small":
          {
            var _sizing$unit2, _issue$origin4;
            var _adj = issue.inclusive ? "이상" : "초과";
            var _suffix = _adj === "이상" ? "이어야 합니다" : "여야 합니다";
            var _sizing = getSizing(issue.origin);
            var _unit = (_sizing$unit2 = _sizing === null || _sizing === void 0 ? void 0 : _sizing.unit) !== null && _sizing$unit2 !== void 0 ? _sizing$unit2 : "요소";
            if (_sizing) {
              var _issue$origin3;
              return "".concat((_issue$origin3 = issue.origin) !== null && _issue$origin3 !== void 0 ? _issue$origin3 : "값", "\uC774 \uB108\uBB34 \uC791\uC2B5\uB2C8\uB2E4: ").concat(issue.minimum.toString()).concat(_unit, " ").concat(_adj).concat(_suffix);
            }
            return "".concat((_issue$origin4 = issue.origin) !== null && _issue$origin4 !== void 0 ? _issue$origin4 : "값", "\uC774 \uB108\uBB34 \uC791\uC2B5\uB2C8\uB2E4: ").concat(issue.minimum.toString(), " ").concat(_adj).concat(_suffix);
          }
        case "invalid_format":
          {
            var _Nouns$_issue$format;
            var _issue = issue;
            if (_issue.format === "starts_with") {
              return "\uC798\uBABB\uB41C \uBB38\uC790\uC5F4: \"".concat(_issue.prefix, "\"(\uC73C)\uB85C \uC2DC\uC791\uD574\uC57C \uD569\uB2C8\uB2E4");
            }
            if (_issue.format === "ends_with") return "\uC798\uBABB\uB41C \uBB38\uC790\uC5F4: \"".concat(_issue.suffix, "\"(\uC73C)\uB85C \uB05D\uB098\uC57C \uD569\uB2C8\uB2E4");
            if (_issue.format === "includes") return "\uC798\uBABB\uB41C \uBB38\uC790\uC5F4: \"".concat(_issue.includes, "\"\uC744(\uB97C) \uD3EC\uD568\uD574\uC57C \uD569\uB2C8\uB2E4");
            if (_issue.format === "regex") return "\uC798\uBABB\uB41C \uBB38\uC790\uC5F4: \uC815\uADDC\uC2DD ".concat(_issue.pattern, " \uD328\uD134\uACFC \uC77C\uCE58\uD574\uC57C \uD569\uB2C8\uB2E4");
            return "\uC798\uBABB\uB41C ".concat((_Nouns$_issue$format = Nouns[_issue.format]) !== null && _Nouns$_issue$format !== void 0 ? _Nouns$_issue$format : issue.format);
          }
        case "not_multiple_of":
          return "\uC798\uBABB\uB41C \uC22B\uC790: ".concat(issue.divisor, "\uC758 \uBC30\uC218\uC5EC\uC57C \uD569\uB2C8\uB2E4");
        case "unrecognized_keys":
          return "\uC778\uC2DD\uD560 \uC218 \uC5C6\uB294 \uD0A4: ".concat(joinValues(issue.keys, ", "));
        case "invalid_key":
          return "\uC798\uBABB\uB41C \uD0A4: ".concat(issue.origin);
        case "invalid_union":
          return "\uC798\uBABB\uB41C \uC785\uB825";
        case "invalid_element":
          return "\uC798\uBABB\uB41C \uAC12: ".concat(issue.origin);
        default:
          return "\uC798\uBABB\uB41C \uC785\uB825";
      }
    };
  };
  function ko () {
    return {
      localeError: error$l()
    };
  }

  var parsedType$1 = function parsedType(data) {
    var t = _typeof(data);
    return parsedTypeFromType(t, data);
  };
  var parsedTypeFromType = function parsedTypeFromType(t) {
    var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
    switch (t) {
      case "number":
        {
          return Number.isNaN(data) ? "NaN" : "skaičius";
        }
      case "bigint":
        {
          return "sveikasis skaičius";
        }
      case "string":
        {
          return "eilutė";
        }
      case "boolean":
        {
          return "loginė reikšmė";
        }
      case "undefined":
      case "void":
        {
          return "neapibrėžta reikšmė";
        }
      case "function":
        {
          return "funkcija";
        }
      case "symbol":
        {
          return "simbolis";
        }
      case "object":
        {
          if (data === undefined) return "nežinomas objektas";
          if (data === null) return "nulinė reikšmė";
          if (Array.isArray(data)) return "masyvas";
          if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
            return data.constructor.name;
          }
          return "objektas";
        }
      //Zod types below
      case "null":
        {
          return "nulinė reikšmė";
        }
    }
    return t;
  };
  var capitalizeFirstCharacter = function capitalizeFirstCharacter(text) {
    return text.charAt(0).toUpperCase() + text.slice(1);
  };
  function getUnitTypeFromNumber(number) {
    var abs = Math.abs(number);
    var last = abs % 10;
    var last2 = abs % 100;
    if (last2 >= 11 && last2 <= 19 || last === 0) return "many";
    if (last === 1) return "one";
    return "few";
  }
  var error$k = function error() {
    var Sizable = {
      string: {
        unit: {
          one: "simbolis",
          few: "simboliai",
          many: "simbolių"
        },
        verb: {
          smaller: {
            inclusive: "turi būti ne ilgesnė kaip",
            notInclusive: "turi būti trumpesnė kaip"
          },
          bigger: {
            inclusive: "turi būti ne trumpesnė kaip",
            notInclusive: "turi būti ilgesnė kaip"
          }
        }
      },
      file: {
        unit: {
          one: "baitas",
          few: "baitai",
          many: "baitų"
        },
        verb: {
          smaller: {
            inclusive: "turi būti ne didesnis kaip",
            notInclusive: "turi būti mažesnis kaip"
          },
          bigger: {
            inclusive: "turi būti ne mažesnis kaip",
            notInclusive: "turi būti didesnis kaip"
          }
        }
      },
      array: {
        unit: {
          one: "elementą",
          few: "elementus",
          many: "elementų"
        },
        verb: {
          smaller: {
            inclusive: "turi turėti ne daugiau kaip",
            notInclusive: "turi turėti mažiau kaip"
          },
          bigger: {
            inclusive: "turi turėti ne mažiau kaip",
            notInclusive: "turi turėti daugiau kaip"
          }
        }
      },
      set: {
        unit: {
          one: "elementą",
          few: "elementus",
          many: "elementų"
        },
        verb: {
          smaller: {
            inclusive: "turi turėti ne daugiau kaip",
            notInclusive: "turi turėti mažiau kaip"
          },
          bigger: {
            inclusive: "turi turėti ne mažiau kaip",
            notInclusive: "turi turėti daugiau kaip"
          }
        }
      }
    };
    function getSizing(origin, unitType, inclusive, targetShouldBe) {
      var _Sizable$origin;
      var result = (_Sizable$origin = Sizable[origin]) !== null && _Sizable$origin !== void 0 ? _Sizable$origin : null;
      if (result === null) return result;
      return {
        unit: result.unit[unitType],
        verb: result.verb[targetShouldBe][inclusive ? "inclusive" : "notInclusive"]
      };
    }
    var Nouns = {
      regex: "įvestis",
      email: "el. pašto adresas",
      url: "URL",
      emoji: "jaustukas",
      uuid: "UUID",
      uuidv4: "UUIDv4",
      uuidv6: "UUIDv6",
      nanoid: "nanoid",
      guid: "GUID",
      cuid: "cuid",
      cuid2: "cuid2",
      ulid: "ULID",
      xid: "XID",
      ksuid: "KSUID",
      datetime: "ISO data ir laikas",
      date: "ISO data",
      time: "ISO laikas",
      duration: "ISO trukmė",
      ipv4: "IPv4 adresas",
      ipv6: "IPv6 adresas",
      cidrv4: "IPv4 tinklo prefiksas (CIDR)",
      cidrv6: "IPv6 tinklo prefiksas (CIDR)",
      base64: "base64 užkoduota eilutė",
      base64url: "base64url užkoduota eilutė",
      json_string: "JSON eilutė",
      e164: "E.164 numeris",
      jwt: "JWT",
      template_literal: "įvestis"
    };
    return function (issue) {
      switch (issue.code) {
        case "invalid_type":
          return "Gautas tipas ".concat(parsedType$1(issue.input), ", o tik\u0117tasi - ").concat(parsedTypeFromType(issue.expected));
        case "invalid_value":
          if (issue.values.length === 1) return "Privalo b\u016Bti ".concat(stringifyPrimitive(issue.values[0]));
          return "Privalo b\u016Bti vienas i\u0161 ".concat(joinValues(issue.values, "|"), " pasirinkim\u0173");
        case "too_big":
          {
            var _issue$inclusive, _ref, _sizing$unit, _ref2;
            var origin = parsedTypeFromType(issue.origin);
            var sizing = getSizing(issue.origin, getUnitTypeFromNumber(Number(issue.maximum)), (_issue$inclusive = issue.inclusive) !== null && _issue$inclusive !== void 0 ? _issue$inclusive : false, "smaller");
            if (sizing !== null && sizing !== void 0 && sizing.verb) return "".concat(capitalizeFirstCharacter((_ref = origin !== null && origin !== void 0 ? origin : issue.origin) !== null && _ref !== void 0 ? _ref : "reikšmė"), " ").concat(sizing.verb, " ").concat(issue.maximum.toString(), " ").concat((_sizing$unit = sizing.unit) !== null && _sizing$unit !== void 0 ? _sizing$unit : "elementų");
            var adj = issue.inclusive ? "ne didesnis kaip" : "mažesnis kaip";
            return "".concat(capitalizeFirstCharacter((_ref2 = origin !== null && origin !== void 0 ? origin : issue.origin) !== null && _ref2 !== void 0 ? _ref2 : "reikšmė"), " turi b\u016Bti ").concat(adj, " ").concat(issue.maximum.toString(), " ").concat(sizing === null || sizing === void 0 ? void 0 : sizing.unit);
          }
        case "too_small":
          {
            var _issue$inclusive2, _ref3, _sizing$unit2, _ref4;
            var _origin = parsedTypeFromType(issue.origin);
            var _sizing = getSizing(issue.origin, getUnitTypeFromNumber(Number(issue.minimum)), (_issue$inclusive2 = issue.inclusive) !== null && _issue$inclusive2 !== void 0 ? _issue$inclusive2 : false, "bigger");
            if (_sizing !== null && _sizing !== void 0 && _sizing.verb) return "".concat(capitalizeFirstCharacter((_ref3 = _origin !== null && _origin !== void 0 ? _origin : issue.origin) !== null && _ref3 !== void 0 ? _ref3 : "reikšmė"), " ").concat(_sizing.verb, " ").concat(issue.minimum.toString(), " ").concat((_sizing$unit2 = _sizing.unit) !== null && _sizing$unit2 !== void 0 ? _sizing$unit2 : "elementų");
            var _adj = issue.inclusive ? "ne mažesnis kaip" : "didesnis kaip";
            return "".concat(capitalizeFirstCharacter((_ref4 = _origin !== null && _origin !== void 0 ? _origin : issue.origin) !== null && _ref4 !== void 0 ? _ref4 : "reikšmė"), " turi b\u016Bti ").concat(_adj, " ").concat(issue.minimum.toString(), " ").concat(_sizing === null || _sizing === void 0 ? void 0 : _sizing.unit);
          }
        case "invalid_format":
          {
            var _Nouns$_issue$format;
            var _issue = issue;
            if (_issue.format === "starts_with") {
              return "Eilut\u0117 privalo prasid\u0117ti \"".concat(_issue.prefix, "\"");
            }
            if (_issue.format === "ends_with") return "Eilut\u0117 privalo pasibaigti \"".concat(_issue.suffix, "\"");
            if (_issue.format === "includes") return "Eilut\u0117 privalo \u012Ftraukti \"".concat(_issue.includes, "\"");
            if (_issue.format === "regex") return "Eilut\u0117 privalo atitikti ".concat(_issue.pattern);
            return "Neteisingas ".concat((_Nouns$_issue$format = Nouns[_issue.format]) !== null && _Nouns$_issue$format !== void 0 ? _Nouns$_issue$format : issue.format);
          }
        case "not_multiple_of":
          return "Skai\u010Dius privalo b\u016Bti ".concat(issue.divisor, " kartotinis.");
        case "unrecognized_keys":
          return "Neatpa\u017Eint".concat(issue.keys.length > 1 ? "i" : "as", " rakt").concat(issue.keys.length > 1 ? "ai" : "as", ": ").concat(joinValues(issue.keys, ", "));
        case "invalid_key":
          return "Rastas klaidingas raktas";
        case "invalid_union":
          return "Klaidinga įvestis";
        case "invalid_element":
          {
            var _ref5;
            var _origin2 = parsedTypeFromType(issue.origin);
            return "".concat(capitalizeFirstCharacter((_ref5 = _origin2 !== null && _origin2 !== void 0 ? _origin2 : issue.origin) !== null && _ref5 !== void 0 ? _ref5 : "reikšmė"), " turi klaiding\u0105 \u012Fvest\u012F");
          }
        default:
          return "Klaidinga įvestis";
      }
    };
  };
  function lt () {
    return {
      localeError: error$k()
    };
  }

  var error$j = function error() {
    var Sizable = {
      string: {
        unit: "знаци",
        verb: "да имаат"
      },
      file: {
        unit: "бајти",
        verb: "да имаат"
      },
      array: {
        unit: "ставки",
        verb: "да имаат"
      },
      set: {
        unit: "ставки",
        verb: "да имаат"
      }
    };
    function getSizing(origin) {
      var _Sizable$origin;
      return (_Sizable$origin = Sizable[origin]) !== null && _Sizable$origin !== void 0 ? _Sizable$origin : null;
    }
    var parsedType = function parsedType(data) {
      var t = _typeof(data);
      switch (t) {
        case "number":
          {
            return Number.isNaN(data) ? "NaN" : "број";
          }
        case "object":
          {
            if (Array.isArray(data)) {
              return "низа";
            }
            if (data === null) {
              return "null";
            }
            if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
              return data.constructor.name;
            }
          }
      }
      return t;
    };
    var Nouns = {
      regex: "внес",
      email: "адреса на е-пошта",
      url: "URL",
      emoji: "емоџи",
      uuid: "UUID",
      uuidv4: "UUIDv4",
      uuidv6: "UUIDv6",
      nanoid: "nanoid",
      guid: "GUID",
      cuid: "cuid",
      cuid2: "cuid2",
      ulid: "ULID",
      xid: "XID",
      ksuid: "KSUID",
      datetime: "ISO датум и време",
      date: "ISO датум",
      time: "ISO време",
      duration: "ISO времетраење",
      ipv4: "IPv4 адреса",
      ipv6: "IPv6 адреса",
      cidrv4: "IPv4 опсег",
      cidrv6: "IPv6 опсег",
      base64: "base64-енкодирана низа",
      base64url: "base64url-енкодирана низа",
      json_string: "JSON низа",
      e164: "E.164 број",
      jwt: "JWT",
      template_literal: "внес"
    };
    return function (issue) {
      switch (issue.code) {
        case "invalid_type":
          return "\u0413\u0440\u0435\u0448\u0435\u043D \u0432\u043D\u0435\u0441: \u0441\u0435 \u043E\u0447\u0435\u043A\u0443\u0432\u0430 ".concat(issue.expected, ", \u043F\u0440\u0438\u043C\u0435\u043D\u043E ").concat(parsedType(issue.input));
        // return `Invalid input: expected ${issue.expected}, received ${util.getParsedType(issue.input)}`;
        case "invalid_value":
          if (issue.values.length === 1) return "Invalid input: expected ".concat(stringifyPrimitive(issue.values[0]));
          return "\u0413\u0440\u0435\u0448\u0430\u043D\u0430 \u043E\u043F\u0446\u0438\u0458\u0430: \u0441\u0435 \u043E\u0447\u0435\u043A\u0443\u0432\u0430 \u0435\u0434\u043D\u0430 ".concat(joinValues(issue.values, "|"));
        case "too_big":
          {
            var _issue$origin, _sizing$unit, _issue$origin2;
            var adj = issue.inclusive ? "<=" : "<";
            var sizing = getSizing(issue.origin);
            if (sizing) return "\u041F\u0440\u0435\u043C\u043D\u043E\u0433\u0443 \u0433\u043E\u043B\u0435\u043C: \u0441\u0435 \u043E\u0447\u0435\u043A\u0443\u0432\u0430 ".concat((_issue$origin = issue.origin) !== null && _issue$origin !== void 0 ? _issue$origin : "вредноста", " \u0434\u0430 \u0438\u043C\u0430 ").concat(adj).concat(issue.maximum.toString(), " ").concat((_sizing$unit = sizing.unit) !== null && _sizing$unit !== void 0 ? _sizing$unit : "елементи");
            return "\u041F\u0440\u0435\u043C\u043D\u043E\u0433\u0443 \u0433\u043E\u043B\u0435\u043C: \u0441\u0435 \u043E\u0447\u0435\u043A\u0443\u0432\u0430 ".concat((_issue$origin2 = issue.origin) !== null && _issue$origin2 !== void 0 ? _issue$origin2 : "вредноста", " \u0434\u0430 \u0431\u0438\u0434\u0435 ").concat(adj).concat(issue.maximum.toString());
          }
        case "too_small":
          {
            var _adj = issue.inclusive ? ">=" : ">";
            var _sizing = getSizing(issue.origin);
            if (_sizing) {
              return "\u041F\u0440\u0435\u043C\u043D\u043E\u0433\u0443 \u043C\u0430\u043B: \u0441\u0435 \u043E\u0447\u0435\u043A\u0443\u0432\u0430 ".concat(issue.origin, " \u0434\u0430 \u0438\u043C\u0430 ").concat(_adj).concat(issue.minimum.toString(), " ").concat(_sizing.unit);
            }
            return "\u041F\u0440\u0435\u043C\u043D\u043E\u0433\u0443 \u043C\u0430\u043B: \u0441\u0435 \u043E\u0447\u0435\u043A\u0443\u0432\u0430 ".concat(issue.origin, " \u0434\u0430 \u0431\u0438\u0434\u0435 ").concat(_adj).concat(issue.minimum.toString());
          }
        case "invalid_format":
          {
            var _Nouns$_issue$format;
            var _issue = issue;
            if (_issue.format === "starts_with") {
              return "\u041D\u0435\u0432\u0430\u0436\u0435\u0447\u043A\u0430 \u043D\u0438\u0437\u0430: \u043C\u043E\u0440\u0430 \u0434\u0430 \u0437\u0430\u043F\u043E\u0447\u043D\u0443\u0432\u0430 \u0441\u043E \"".concat(_issue.prefix, "\"");
            }
            if (_issue.format === "ends_with") return "\u041D\u0435\u0432\u0430\u0436\u0435\u0447\u043A\u0430 \u043D\u0438\u0437\u0430: \u043C\u043E\u0440\u0430 \u0434\u0430 \u0437\u0430\u0432\u0440\u0448\u0443\u0432\u0430 \u0441\u043E \"".concat(_issue.suffix, "\"");
            if (_issue.format === "includes") return "\u041D\u0435\u0432\u0430\u0436\u0435\u0447\u043A\u0430 \u043D\u0438\u0437\u0430: \u043C\u043E\u0440\u0430 \u0434\u0430 \u0432\u043A\u043B\u0443\u0447\u0443\u0432\u0430 \"".concat(_issue.includes, "\"");
            if (_issue.format === "regex") return "\u041D\u0435\u0432\u0430\u0436\u0435\u0447\u043A\u0430 \u043D\u0438\u0437\u0430: \u043C\u043E\u0440\u0430 \u0434\u0430 \u043E\u0434\u0433\u043E\u0430\u0440\u0430 \u043D\u0430 \u043F\u0430\u0442\u0435\u0440\u043D\u043E\u0442 ".concat(_issue.pattern);
            return "Invalid ".concat((_Nouns$_issue$format = Nouns[_issue.format]) !== null && _Nouns$_issue$format !== void 0 ? _Nouns$_issue$format : issue.format);
          }
        case "not_multiple_of":
          return "\u0413\u0440\u0435\u0448\u0435\u043D \u0431\u0440\u043E\u0458: \u043C\u043E\u0440\u0430 \u0434\u0430 \u0431\u0438\u0434\u0435 \u0434\u0435\u043B\u0438\u0432 \u0441\u043E ".concat(issue.divisor);
        case "unrecognized_keys":
          return "".concat(issue.keys.length > 1 ? "Непрепознаени клучеви" : "Непрепознаен клуч", ": ").concat(joinValues(issue.keys, ", "));
        case "invalid_key":
          return "\u0413\u0440\u0435\u0448\u0435\u043D \u043A\u043B\u0443\u0447 \u0432\u043E ".concat(issue.origin);
        case "invalid_union":
          return "Грешен внес";
        case "invalid_element":
          return "\u0413\u0440\u0435\u0448\u043D\u0430 \u0432\u0440\u0435\u0434\u043D\u043E\u0441\u0442 \u0432\u043E ".concat(issue.origin);
        default:
          return "\u0413\u0440\u0435\u0448\u0435\u043D \u0432\u043D\u0435\u0441";
      }
    };
  };
  function mk () {
    return {
      localeError: error$j()
    };
  }

  var error$i = function error() {
    var Sizable = {
      string: {
        unit: "aksara",
        verb: "mempunyai"
      },
      file: {
        unit: "bait",
        verb: "mempunyai"
      },
      array: {
        unit: "elemen",
        verb: "mempunyai"
      },
      set: {
        unit: "elemen",
        verb: "mempunyai"
      }
    };
    function getSizing(origin) {
      var _Sizable$origin;
      return (_Sizable$origin = Sizable[origin]) !== null && _Sizable$origin !== void 0 ? _Sizable$origin : null;
    }
    var parsedType = function parsedType(data) {
      var t = _typeof(data);
      switch (t) {
        case "number":
          {
            return Number.isNaN(data) ? "NaN" : "nombor";
          }
        case "object":
          {
            if (Array.isArray(data)) {
              return "array";
            }
            if (data === null) {
              return "null";
            }
            if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
              return data.constructor.name;
            }
          }
      }
      return t;
    };
    var Nouns = {
      regex: "input",
      email: "alamat e-mel",
      url: "URL",
      emoji: "emoji",
      uuid: "UUID",
      uuidv4: "UUIDv4",
      uuidv6: "UUIDv6",
      nanoid: "nanoid",
      guid: "GUID",
      cuid: "cuid",
      cuid2: "cuid2",
      ulid: "ULID",
      xid: "XID",
      ksuid: "KSUID",
      datetime: "tarikh masa ISO",
      date: "tarikh ISO",
      time: "masa ISO",
      duration: "tempoh ISO",
      ipv4: "alamat IPv4",
      ipv6: "alamat IPv6",
      cidrv4: "julat IPv4",
      cidrv6: "julat IPv6",
      base64: "string dikodkan base64",
      base64url: "string dikodkan base64url",
      json_string: "string JSON",
      e164: "nombor E.164",
      jwt: "JWT",
      template_literal: "input"
    };
    return function (issue) {
      switch (issue.code) {
        case "invalid_type":
          return "Input tidak sah: dijangka ".concat(issue.expected, ", diterima ").concat(parsedType(issue.input));
        case "invalid_value":
          if (issue.values.length === 1) return "Input tidak sah: dijangka ".concat(stringifyPrimitive(issue.values[0]));
          return "Pilihan tidak sah: dijangka salah satu daripada ".concat(joinValues(issue.values, "|"));
        case "too_big":
          {
            var _issue$origin, _sizing$unit, _issue$origin2;
            var adj = issue.inclusive ? "<=" : "<";
            var sizing = getSizing(issue.origin);
            if (sizing) return "Terlalu besar: dijangka ".concat((_issue$origin = issue.origin) !== null && _issue$origin !== void 0 ? _issue$origin : "nilai", " ").concat(sizing.verb, " ").concat(adj).concat(issue.maximum.toString(), " ").concat((_sizing$unit = sizing.unit) !== null && _sizing$unit !== void 0 ? _sizing$unit : "elemen");
            return "Terlalu besar: dijangka ".concat((_issue$origin2 = issue.origin) !== null && _issue$origin2 !== void 0 ? _issue$origin2 : "nilai", " adalah ").concat(adj).concat(issue.maximum.toString());
          }
        case "too_small":
          {
            var _adj = issue.inclusive ? ">=" : ">";
            var _sizing = getSizing(issue.origin);
            if (_sizing) {
              return "Terlalu kecil: dijangka ".concat(issue.origin, " ").concat(_sizing.verb, " ").concat(_adj).concat(issue.minimum.toString(), " ").concat(_sizing.unit);
            }
            return "Terlalu kecil: dijangka ".concat(issue.origin, " adalah ").concat(_adj).concat(issue.minimum.toString());
          }
        case "invalid_format":
          {
            var _Nouns$_issue$format;
            var _issue = issue;
            if (_issue.format === "starts_with") return "String tidak sah: mesti bermula dengan \"".concat(_issue.prefix, "\"");
            if (_issue.format === "ends_with") return "String tidak sah: mesti berakhir dengan \"".concat(_issue.suffix, "\"");
            if (_issue.format === "includes") return "String tidak sah: mesti mengandungi \"".concat(_issue.includes, "\"");
            if (_issue.format === "regex") return "String tidak sah: mesti sepadan dengan corak ".concat(_issue.pattern);
            return "".concat((_Nouns$_issue$format = Nouns[_issue.format]) !== null && _Nouns$_issue$format !== void 0 ? _Nouns$_issue$format : issue.format, " tidak sah");
          }
        case "not_multiple_of":
          return "Nombor tidak sah: perlu gandaan ".concat(issue.divisor);
        case "unrecognized_keys":
          return "Kunci tidak dikenali: ".concat(joinValues(issue.keys, ", "));
        case "invalid_key":
          return "Kunci tidak sah dalam ".concat(issue.origin);
        case "invalid_union":
          return "Input tidak sah";
        case "invalid_element":
          return "Nilai tidak sah dalam ".concat(issue.origin);
        default:
          return "Input tidak sah";
      }
    };
  };
  function ms () {
    return {
      localeError: error$i()
    };
  }

  var error$h = function error() {
    var Sizable = {
      string: {
        unit: "tekens"
      },
      file: {
        unit: "bytes"
      },
      array: {
        unit: "elementen"
      },
      set: {
        unit: "elementen"
      }
    };
    function getSizing(origin) {
      var _Sizable$origin;
      return (_Sizable$origin = Sizable[origin]) !== null && _Sizable$origin !== void 0 ? _Sizable$origin : null;
    }
    var parsedType = function parsedType(data) {
      var t = _typeof(data);
      switch (t) {
        case "number":
          {
            return Number.isNaN(data) ? "NaN" : "getal";
          }
        case "object":
          {
            if (Array.isArray(data)) {
              return "array";
            }
            if (data === null) {
              return "null";
            }
            if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
              return data.constructor.name;
            }
          }
      }
      return t;
    };
    var Nouns = {
      regex: "invoer",
      email: "emailadres",
      url: "URL",
      emoji: "emoji",
      uuid: "UUID",
      uuidv4: "UUIDv4",
      uuidv6: "UUIDv6",
      nanoid: "nanoid",
      guid: "GUID",
      cuid: "cuid",
      cuid2: "cuid2",
      ulid: "ULID",
      xid: "XID",
      ksuid: "KSUID",
      datetime: "ISO datum en tijd",
      date: "ISO datum",
      time: "ISO tijd",
      duration: "ISO duur",
      ipv4: "IPv4-adres",
      ipv6: "IPv6-adres",
      cidrv4: "IPv4-bereik",
      cidrv6: "IPv6-bereik",
      base64: "base64-gecodeerde tekst",
      base64url: "base64 URL-gecodeerde tekst",
      json_string: "JSON string",
      e164: "E.164-nummer",
      jwt: "JWT",
      template_literal: "invoer"
    };
    return function (issue) {
      switch (issue.code) {
        case "invalid_type":
          return "Ongeldige invoer: verwacht ".concat(issue.expected, ", ontving ").concat(parsedType(issue.input));
        case "invalid_value":
          if (issue.values.length === 1) return "Ongeldige invoer: verwacht ".concat(stringifyPrimitive(issue.values[0]));
          return "Ongeldige optie: verwacht \xE9\xE9n van ".concat(joinValues(issue.values, "|"));
        case "too_big":
          {
            var _issue$origin, _sizing$unit, _issue$origin2;
            var adj = issue.inclusive ? "<=" : "<";
            var sizing = getSizing(issue.origin);
            if (sizing) return "Te lang: verwacht dat ".concat((_issue$origin = issue.origin) !== null && _issue$origin !== void 0 ? _issue$origin : "waarde", " ").concat(adj).concat(issue.maximum.toString(), " ").concat((_sizing$unit = sizing.unit) !== null && _sizing$unit !== void 0 ? _sizing$unit : "elementen", " bevat");
            return "Te lang: verwacht dat ".concat((_issue$origin2 = issue.origin) !== null && _issue$origin2 !== void 0 ? _issue$origin2 : "waarde", " ").concat(adj).concat(issue.maximum.toString(), " is");
          }
        case "too_small":
          {
            var _adj = issue.inclusive ? ">=" : ">";
            var _sizing = getSizing(issue.origin);
            if (_sizing) {
              return "Te kort: verwacht dat ".concat(issue.origin, " ").concat(_adj).concat(issue.minimum.toString(), " ").concat(_sizing.unit, " bevat");
            }
            return "Te kort: verwacht dat ".concat(issue.origin, " ").concat(_adj).concat(issue.minimum.toString(), " is");
          }
        case "invalid_format":
          {
            var _Nouns$_issue$format;
            var _issue = issue;
            if (_issue.format === "starts_with") {
              return "Ongeldige tekst: moet met \"".concat(_issue.prefix, "\" beginnen");
            }
            if (_issue.format === "ends_with") return "Ongeldige tekst: moet op \"".concat(_issue.suffix, "\" eindigen");
            if (_issue.format === "includes") return "Ongeldige tekst: moet \"".concat(_issue.includes, "\" bevatten");
            if (_issue.format === "regex") return "Ongeldige tekst: moet overeenkomen met patroon ".concat(_issue.pattern);
            return "Ongeldig: ".concat((_Nouns$_issue$format = Nouns[_issue.format]) !== null && _Nouns$_issue$format !== void 0 ? _Nouns$_issue$format : issue.format);
          }
        case "not_multiple_of":
          return "Ongeldig getal: moet een veelvoud van ".concat(issue.divisor, " zijn");
        case "unrecognized_keys":
          return "Onbekende key".concat(issue.keys.length > 1 ? "s" : "", ": ").concat(joinValues(issue.keys, ", "));
        case "invalid_key":
          return "Ongeldige key in ".concat(issue.origin);
        case "invalid_union":
          return "Ongeldige invoer";
        case "invalid_element":
          return "Ongeldige waarde in ".concat(issue.origin);
        default:
          return "Ongeldige invoer";
      }
    };
  };
  function nl () {
    return {
      localeError: error$h()
    };
  }

  var error$g = function error() {
    var Sizable = {
      string: {
        unit: "tegn",
        verb: "å ha"
      },
      file: {
        unit: "bytes",
        verb: "å ha"
      },
      array: {
        unit: "elementer",
        verb: "å inneholde"
      },
      set: {
        unit: "elementer",
        verb: "å inneholde"
      }
    };
    function getSizing(origin) {
      var _Sizable$origin;
      return (_Sizable$origin = Sizable[origin]) !== null && _Sizable$origin !== void 0 ? _Sizable$origin : null;
    }
    var parsedType = function parsedType(data) {
      var t = _typeof(data);
      switch (t) {
        case "number":
          {
            return Number.isNaN(data) ? "NaN" : "tall";
          }
        case "object":
          {
            if (Array.isArray(data)) {
              return "liste";
            }
            if (data === null) {
              return "null";
            }
            if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
              return data.constructor.name;
            }
          }
      }
      return t;
    };
    var Nouns = {
      regex: "input",
      email: "e-postadresse",
      url: "URL",
      emoji: "emoji",
      uuid: "UUID",
      uuidv4: "UUIDv4",
      uuidv6: "UUIDv6",
      nanoid: "nanoid",
      guid: "GUID",
      cuid: "cuid",
      cuid2: "cuid2",
      ulid: "ULID",
      xid: "XID",
      ksuid: "KSUID",
      datetime: "ISO dato- og klokkeslett",
      date: "ISO-dato",
      time: "ISO-klokkeslett",
      duration: "ISO-varighet",
      ipv4: "IPv4-område",
      ipv6: "IPv6-område",
      cidrv4: "IPv4-spekter",
      cidrv6: "IPv6-spekter",
      base64: "base64-enkodet streng",
      base64url: "base64url-enkodet streng",
      json_string: "JSON-streng",
      e164: "E.164-nummer",
      jwt: "JWT",
      template_literal: "input"
    };
    return function (issue) {
      switch (issue.code) {
        case "invalid_type":
          return "Ugyldig input: forventet ".concat(issue.expected, ", fikk ").concat(parsedType(issue.input));
        case "invalid_value":
          if (issue.values.length === 1) return "Ugyldig verdi: forventet ".concat(stringifyPrimitive(issue.values[0]));
          return "Ugyldig valg: forventet en av ".concat(joinValues(issue.values, "|"));
        case "too_big":
          {
            var _issue$origin, _sizing$unit, _issue$origin2;
            var adj = issue.inclusive ? "<=" : "<";
            var sizing = getSizing(issue.origin);
            if (sizing) return "For stor(t): forventet ".concat((_issue$origin = issue.origin) !== null && _issue$origin !== void 0 ? _issue$origin : "value", " til \xE5 ha ").concat(adj).concat(issue.maximum.toString(), " ").concat((_sizing$unit = sizing.unit) !== null && _sizing$unit !== void 0 ? _sizing$unit : "elementer");
            return "For stor(t): forventet ".concat((_issue$origin2 = issue.origin) !== null && _issue$origin2 !== void 0 ? _issue$origin2 : "value", " til \xE5 ha ").concat(adj).concat(issue.maximum.toString());
          }
        case "too_small":
          {
            var _adj = issue.inclusive ? ">=" : ">";
            var _sizing = getSizing(issue.origin);
            if (_sizing) {
              return "For lite(n): forventet ".concat(issue.origin, " til \xE5 ha ").concat(_adj).concat(issue.minimum.toString(), " ").concat(_sizing.unit);
            }
            return "For lite(n): forventet ".concat(issue.origin, " til \xE5 ha ").concat(_adj).concat(issue.minimum.toString());
          }
        case "invalid_format":
          {
            var _Nouns$_issue$format;
            var _issue = issue;
            if (_issue.format === "starts_with") return "Ugyldig streng: m\xE5 starte med \"".concat(_issue.prefix, "\"");
            if (_issue.format === "ends_with") return "Ugyldig streng: m\xE5 ende med \"".concat(_issue.suffix, "\"");
            if (_issue.format === "includes") return "Ugyldig streng: m\xE5 inneholde \"".concat(_issue.includes, "\"");
            if (_issue.format === "regex") return "Ugyldig streng: m\xE5 matche m\xF8nsteret ".concat(_issue.pattern);
            return "Ugyldig ".concat((_Nouns$_issue$format = Nouns[_issue.format]) !== null && _Nouns$_issue$format !== void 0 ? _Nouns$_issue$format : issue.format);
          }
        case "not_multiple_of":
          return "Ugyldig tall: m\xE5 v\xE6re et multiplum av ".concat(issue.divisor);
        case "unrecognized_keys":
          return "".concat(issue.keys.length > 1 ? "Ukjente nøkler" : "Ukjent nøkkel", ": ").concat(joinValues(issue.keys, ", "));
        case "invalid_key":
          return "Ugyldig n\xF8kkel i ".concat(issue.origin);
        case "invalid_union":
          return "Ugyldig input";
        case "invalid_element":
          return "Ugyldig verdi i ".concat(issue.origin);
        default:
          return "Ugyldig input";
      }
    };
  };
  function no () {
    return {
      localeError: error$g()
    };
  }

  var error$f = function error() {
    var Sizable = {
      string: {
        unit: "harf",
        verb: "olmalıdır"
      },
      file: {
        unit: "bayt",
        verb: "olmalıdır"
      },
      array: {
        unit: "unsur",
        verb: "olmalıdır"
      },
      set: {
        unit: "unsur",
        verb: "olmalıdır"
      }
    };
    function getSizing(origin) {
      var _Sizable$origin;
      return (_Sizable$origin = Sizable[origin]) !== null && _Sizable$origin !== void 0 ? _Sizable$origin : null;
    }
    var parsedType = function parsedType(data) {
      var t = _typeof(data);
      switch (t) {
        case "number":
          {
            return Number.isNaN(data) ? "NaN" : "numara";
          }
        case "object":
          {
            if (Array.isArray(data)) {
              return "saf";
            }
            if (data === null) {
              return "gayb";
            }
            if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
              return data.constructor.name;
            }
          }
      }
      return t;
    };
    var Nouns = {
      regex: "giren",
      email: "epostagâh",
      url: "URL",
      emoji: "emoji",
      uuid: "UUID",
      uuidv4: "UUIDv4",
      uuidv6: "UUIDv6",
      nanoid: "nanoid",
      guid: "GUID",
      cuid: "cuid",
      cuid2: "cuid2",
      ulid: "ULID",
      xid: "XID",
      ksuid: "KSUID",
      datetime: "ISO hengâmı",
      date: "ISO tarihi",
      time: "ISO zamanı",
      duration: "ISO müddeti",
      ipv4: "IPv4 nişânı",
      ipv6: "IPv6 nişânı",
      cidrv4: "IPv4 menzili",
      cidrv6: "IPv6 menzili",
      base64: "base64-şifreli metin",
      base64url: "base64url-şifreli metin",
      json_string: "JSON metin",
      e164: "E.164 sayısı",
      jwt: "JWT",
      template_literal: "giren"
    };
    return function (issue) {
      switch (issue.code) {
        case "invalid_type":
          return "F\xE2sit giren: umulan ".concat(issue.expected, ", al\u0131nan ").concat(parsedType(issue.input));
        // return `Fâsit giren: umulan ${issue.expected}, alınan ${util.getParsedType(issue.input)}`;
        case "invalid_value":
          if (issue.values.length === 1) return "F\xE2sit giren: umulan ".concat(stringifyPrimitive(issue.values[0]));
          return "F\xE2sit tercih: m\xFBteberler ".concat(joinValues(issue.values, "|"));
        case "too_big":
          {
            var _issue$origin, _sizing$unit, _issue$origin2;
            var adj = issue.inclusive ? "<=" : "<";
            var sizing = getSizing(issue.origin);
            if (sizing) return "Fazla b\xFCy\xFCk: ".concat((_issue$origin = issue.origin) !== null && _issue$origin !== void 0 ? _issue$origin : "value", ", ").concat(adj).concat(issue.maximum.toString(), " ").concat((_sizing$unit = sizing.unit) !== null && _sizing$unit !== void 0 ? _sizing$unit : "elements", " sahip olmal\u0131yd\u0131.");
            return "Fazla b\xFCy\xFCk: ".concat((_issue$origin2 = issue.origin) !== null && _issue$origin2 !== void 0 ? _issue$origin2 : "value", ", ").concat(adj).concat(issue.maximum.toString(), " olmal\u0131yd\u0131.");
          }
        case "too_small":
          {
            var _adj = issue.inclusive ? ">=" : ">";
            var _sizing = getSizing(issue.origin);
            if (_sizing) {
              return "Fazla k\xFC\xE7\xFCk: ".concat(issue.origin, ", ").concat(_adj).concat(issue.minimum.toString(), " ").concat(_sizing.unit, " sahip olmal\u0131yd\u0131.");
            }
            return "Fazla k\xFC\xE7\xFCk: ".concat(issue.origin, ", ").concat(_adj).concat(issue.minimum.toString(), " olmal\u0131yd\u0131.");
          }
        case "invalid_format":
          {
            var _Nouns$_issue$format;
            var _issue = issue;
            if (_issue.format === "starts_with") return "F\xE2sit metin: \"".concat(_issue.prefix, "\" ile ba\u015Flamal\u0131.");
            if (_issue.format === "ends_with") return "F\xE2sit metin: \"".concat(_issue.suffix, "\" ile bitmeli.");
            if (_issue.format === "includes") return "F\xE2sit metin: \"".concat(_issue.includes, "\" ihtiv\xE2 etmeli.");
            if (_issue.format === "regex") return "F\xE2sit metin: ".concat(_issue.pattern, " nak\u015F\u0131na uymal\u0131.");
            return "F\xE2sit ".concat((_Nouns$_issue$format = Nouns[_issue.format]) !== null && _Nouns$_issue$format !== void 0 ? _Nouns$_issue$format : issue.format);
          }
        case "not_multiple_of":
          return "F\xE2sit say\u0131: ".concat(issue.divisor, " kat\u0131 olmal\u0131yd\u0131.");
        case "unrecognized_keys":
          return "Tan\u0131nmayan anahtar ".concat(issue.keys.length > 1 ? "s" : "", ": ").concat(joinValues(issue.keys, ", "));
        case "invalid_key":
          return "".concat(issue.origin, " i\xE7in tan\u0131nmayan anahtar var.");
        case "invalid_union":
          return "Giren tanınamadı.";
        case "invalid_element":
          return "".concat(issue.origin, " i\xE7in tan\u0131nmayan k\u0131ymet var.");
        default:
          return "K\u0131ymet tan\u0131namad\u0131.";
      }
    };
  };
  function ota () {
    return {
      localeError: error$f()
    };
  }

  var error$e = function error() {
    var Sizable = {
      string: {
        unit: "توکي",
        verb: "ولري"
      },
      file: {
        unit: "بایټس",
        verb: "ولري"
      },
      array: {
        unit: "توکي",
        verb: "ولري"
      },
      set: {
        unit: "توکي",
        verb: "ولري"
      }
    };
    function getSizing(origin) {
      var _Sizable$origin;
      return (_Sizable$origin = Sizable[origin]) !== null && _Sizable$origin !== void 0 ? _Sizable$origin : null;
    }
    var parsedType = function parsedType(data) {
      var t = _typeof(data);
      switch (t) {
        case "number":
          {
            return Number.isNaN(data) ? "NaN" : "عدد";
          }
        case "object":
          {
            if (Array.isArray(data)) {
              return "ارې";
            }
            if (data === null) {
              return "null";
            }
            if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
              return data.constructor.name;
            }
          }
      }
      return t;
    };
    var Nouns = {
      regex: "ورودي",
      email: "بریښنالیک",
      url: "یو آر ال",
      emoji: "ایموجي",
      uuid: "UUID",
      uuidv4: "UUIDv4",
      uuidv6: "UUIDv6",
      nanoid: "nanoid",
      guid: "GUID",
      cuid: "cuid",
      cuid2: "cuid2",
      ulid: "ULID",
      xid: "XID",
      ksuid: "KSUID",
      datetime: "نیټه او وخت",
      date: "نېټه",
      time: "وخت",
      duration: "موده",
      ipv4: "د IPv4 پته",
      ipv6: "د IPv6 پته",
      cidrv4: "د IPv4 ساحه",
      cidrv6: "د IPv6 ساحه",
      base64: "base64-encoded متن",
      base64url: "base64url-encoded متن",
      json_string: "JSON متن",
      e164: "د E.164 شمېره",
      jwt: "JWT",
      template_literal: "ورودي"
    };
    return function (issue) {
      switch (issue.code) {
        case "invalid_type":
          return "\u0646\u0627\u0633\u0645 \u0648\u0631\u0648\u062F\u064A: \u0628\u0627\u06CC\u062F ".concat(issue.expected, " \u0648\u0627\u06CC, \u0645\u06AB\u0631 ").concat(parsedType(issue.input), " \u062A\u0631\u0644\u0627\u0633\u0647 \u0634\u0648");
        case "invalid_value":
          if (issue.values.length === 1) {
            return "\u0646\u0627\u0633\u0645 \u0648\u0631\u0648\u062F\u064A: \u0628\u0627\u06CC\u062F ".concat(stringifyPrimitive(issue.values[0]), " \u0648\u0627\u06CC");
          }
          return "\u0646\u0627\u0633\u0645 \u0627\u0646\u062A\u062E\u0627\u0628: \u0628\u0627\u06CC\u062F \u06CC\u0648 \u0644\u0647 ".concat(joinValues(issue.values, "|"), " \u0685\u062E\u0647 \u0648\u0627\u06CC");
        case "too_big":
          {
            var _issue$origin2;
            var adj = issue.inclusive ? "<=" : "<";
            var sizing = getSizing(issue.origin);
            if (sizing) {
              var _issue$origin, _sizing$unit;
              return "\u0689\u06CC\u0631 \u0644\u0648\u06CC: ".concat((_issue$origin = issue.origin) !== null && _issue$origin !== void 0 ? _issue$origin : "ارزښت", " \u0628\u0627\u06CC\u062F ").concat(adj).concat(issue.maximum.toString(), " ").concat((_sizing$unit = sizing.unit) !== null && _sizing$unit !== void 0 ? _sizing$unit : "عنصرونه", " \u0648\u0644\u0631\u064A");
            }
            return "\u0689\u06CC\u0631 \u0644\u0648\u06CC: ".concat((_issue$origin2 = issue.origin) !== null && _issue$origin2 !== void 0 ? _issue$origin2 : "ارزښت", " \u0628\u0627\u06CC\u062F ").concat(adj).concat(issue.maximum.toString(), " \u0648\u064A");
          }
        case "too_small":
          {
            var _adj = issue.inclusive ? ">=" : ">";
            var _sizing = getSizing(issue.origin);
            if (_sizing) {
              return "\u0689\u06CC\u0631 \u06A9\u0648\u0686\u0646\u06CC: ".concat(issue.origin, " \u0628\u0627\u06CC\u062F ").concat(_adj).concat(issue.minimum.toString(), " ").concat(_sizing.unit, " \u0648\u0644\u0631\u064A");
            }
            return "\u0689\u06CC\u0631 \u06A9\u0648\u0686\u0646\u06CC: ".concat(issue.origin, " \u0628\u0627\u06CC\u062F ").concat(_adj).concat(issue.minimum.toString(), " \u0648\u064A");
          }
        case "invalid_format":
          {
            var _Nouns$_issue$format;
            var _issue = issue;
            if (_issue.format === "starts_with") {
              return "\u0646\u0627\u0633\u0645 \u0645\u062A\u0646: \u0628\u0627\u06CC\u062F \u062F \"".concat(_issue.prefix, "\" \u0633\u0631\u0647 \u067E\u06CC\u0644 \u0634\u064A");
            }
            if (_issue.format === "ends_with") {
              return "\u0646\u0627\u0633\u0645 \u0645\u062A\u0646: \u0628\u0627\u06CC\u062F \u062F \"".concat(_issue.suffix, "\" \u0633\u0631\u0647 \u067E\u0627\u06CC \u062A\u0647 \u0648\u0631\u0633\u064A\u0696\u064A");
            }
            if (_issue.format === "includes") {
              return "\u0646\u0627\u0633\u0645 \u0645\u062A\u0646: \u0628\u0627\u06CC\u062F \"".concat(_issue.includes, "\" \u0648\u0644\u0631\u064A");
            }
            if (_issue.format === "regex") {
              return "\u0646\u0627\u0633\u0645 \u0645\u062A\u0646: \u0628\u0627\u06CC\u062F \u062F ".concat(_issue.pattern, " \u0633\u0631\u0647 \u0645\u0637\u0627\u0628\u0642\u062A \u0648\u0644\u0631\u064A");
            }
            return "".concat((_Nouns$_issue$format = Nouns[_issue.format]) !== null && _Nouns$_issue$format !== void 0 ? _Nouns$_issue$format : issue.format, " \u0646\u0627\u0633\u0645 \u062F\u06CC");
          }
        case "not_multiple_of":
          return "\u0646\u0627\u0633\u0645 \u0639\u062F\u062F: \u0628\u0627\u06CC\u062F \u062F ".concat(issue.divisor, " \u0645\u0636\u0631\u0628 \u0648\u064A");
        case "unrecognized_keys":
          return "\u0646\u0627\u0633\u0645 ".concat(issue.keys.length > 1 ? "کلیډونه" : "کلیډ", ": ").concat(joinValues(issue.keys, ", "));
        case "invalid_key":
          return "\u0646\u0627\u0633\u0645 \u06A9\u0644\u06CC\u0689 \u067E\u0647 ".concat(issue.origin, " \u06A9\u06D0");
        case "invalid_union":
          return "\u0646\u0627\u0633\u0645\u0647 \u0648\u0631\u0648\u062F\u064A";
        case "invalid_element":
          return "\u0646\u0627\u0633\u0645 \u0639\u0646\u0635\u0631 \u067E\u0647 ".concat(issue.origin, " \u06A9\u06D0");
        default:
          return "\u0646\u0627\u0633\u0645\u0647 \u0648\u0631\u0648\u062F\u064A";
      }
    };
  };
  function ps () {
    return {
      localeError: error$e()
    };
  }

  var error$d = function error() {
    var Sizable = {
      string: {
        unit: "znaków",
        verb: "mieć"
      },
      file: {
        unit: "bajtów",
        verb: "mieć"
      },
      array: {
        unit: "elementów",
        verb: "mieć"
      },
      set: {
        unit: "elementów",
        verb: "mieć"
      }
    };
    function getSizing(origin) {
      var _Sizable$origin;
      return (_Sizable$origin = Sizable[origin]) !== null && _Sizable$origin !== void 0 ? _Sizable$origin : null;
    }
    var parsedType = function parsedType(data) {
      var t = _typeof(data);
      switch (t) {
        case "number":
          {
            return Number.isNaN(data) ? "NaN" : "liczba";
          }
        case "object":
          {
            if (Array.isArray(data)) {
              return "tablica";
            }
            if (data === null) {
              return "null";
            }
            if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
              return data.constructor.name;
            }
          }
      }
      return t;
    };
    var Nouns = {
      regex: "wyrażenie",
      email: "adres email",
      url: "URL",
      emoji: "emoji",
      uuid: "UUID",
      uuidv4: "UUIDv4",
      uuidv6: "UUIDv6",
      nanoid: "nanoid",
      guid: "GUID",
      cuid: "cuid",
      cuid2: "cuid2",
      ulid: "ULID",
      xid: "XID",
      ksuid: "KSUID",
      datetime: "data i godzina w formacie ISO",
      date: "data w formacie ISO",
      time: "godzina w formacie ISO",
      duration: "czas trwania ISO",
      ipv4: "adres IPv4",
      ipv6: "adres IPv6",
      cidrv4: "zakres IPv4",
      cidrv6: "zakres IPv6",
      base64: "ciąg znaków zakodowany w formacie base64",
      base64url: "ciąg znaków zakodowany w formacie base64url",
      json_string: "ciąg znaków w formacie JSON",
      e164: "liczba E.164",
      jwt: "JWT",
      template_literal: "wejście"
    };
    return function (issue) {
      switch (issue.code) {
        case "invalid_type":
          return "Nieprawid\u0142owe dane wej\u015Bciowe: oczekiwano ".concat(issue.expected, ", otrzymano ").concat(parsedType(issue.input));
        case "invalid_value":
          if (issue.values.length === 1) return "Nieprawid\u0142owe dane wej\u015Bciowe: oczekiwano ".concat(stringifyPrimitive(issue.values[0]));
          return "Nieprawid\u0142owa opcja: oczekiwano jednej z warto\u015Bci ".concat(joinValues(issue.values, "|"));
        case "too_big":
          {
            var _issue$origin2;
            var adj = issue.inclusive ? "<=" : "<";
            var sizing = getSizing(issue.origin);
            if (sizing) {
              var _issue$origin, _sizing$unit;
              return "Za du\u017Ca warto\u015B\u0107: oczekiwano, \u017Ce ".concat((_issue$origin = issue.origin) !== null && _issue$origin !== void 0 ? _issue$origin : "wartość", " b\u0119dzie mie\u0107 ").concat(adj).concat(issue.maximum.toString(), " ").concat((_sizing$unit = sizing.unit) !== null && _sizing$unit !== void 0 ? _sizing$unit : "elementów");
            }
            return "Zbyt du\u017C(y/a/e): oczekiwano, \u017Ce ".concat((_issue$origin2 = issue.origin) !== null && _issue$origin2 !== void 0 ? _issue$origin2 : "wartość", " b\u0119dzie wynosi\u0107 ").concat(adj).concat(issue.maximum.toString());
          }
        case "too_small":
          {
            var _issue$origin4;
            var _adj = issue.inclusive ? ">=" : ">";
            var _sizing = getSizing(issue.origin);
            if (_sizing) {
              var _issue$origin3, _sizing$unit2;
              return "Za ma\u0142a warto\u015B\u0107: oczekiwano, \u017Ce ".concat((_issue$origin3 = issue.origin) !== null && _issue$origin3 !== void 0 ? _issue$origin3 : "wartość", " b\u0119dzie mie\u0107 ").concat(_adj).concat(issue.minimum.toString(), " ").concat((_sizing$unit2 = _sizing.unit) !== null && _sizing$unit2 !== void 0 ? _sizing$unit2 : "elementów");
            }
            return "Zbyt ma\u0142(y/a/e): oczekiwano, \u017Ce ".concat((_issue$origin4 = issue.origin) !== null && _issue$origin4 !== void 0 ? _issue$origin4 : "wartość", " b\u0119dzie wynosi\u0107 ").concat(_adj).concat(issue.minimum.toString());
          }
        case "invalid_format":
          {
            var _Nouns$_issue$format;
            var _issue = issue;
            if (_issue.format === "starts_with") return "Nieprawid\u0142owy ci\u0105g znak\xF3w: musi zaczyna\u0107 si\u0119 od \"".concat(_issue.prefix, "\"");
            if (_issue.format === "ends_with") return "Nieprawid\u0142owy ci\u0105g znak\xF3w: musi ko\u0144czy\u0107 si\u0119 na \"".concat(_issue.suffix, "\"");
            if (_issue.format === "includes") return "Nieprawid\u0142owy ci\u0105g znak\xF3w: musi zawiera\u0107 \"".concat(_issue.includes, "\"");
            if (_issue.format === "regex") return "Nieprawid\u0142owy ci\u0105g znak\xF3w: musi odpowiada\u0107 wzorcowi ".concat(_issue.pattern);
            return "Nieprawid\u0142ow(y/a/e) ".concat((_Nouns$_issue$format = Nouns[_issue.format]) !== null && _Nouns$_issue$format !== void 0 ? _Nouns$_issue$format : issue.format);
          }
        case "not_multiple_of":
          return "Nieprawid\u0142owa liczba: musi by\u0107 wielokrotno\u015Bci\u0105 ".concat(issue.divisor);
        case "unrecognized_keys":
          return "Nierozpoznane klucze".concat(issue.keys.length > 1 ? "s" : "", ": ").concat(joinValues(issue.keys, ", "));
        case "invalid_key":
          return "Nieprawid\u0142owy klucz w ".concat(issue.origin);
        case "invalid_union":
          return "Nieprawidłowe dane wejściowe";
        case "invalid_element":
          return "Nieprawid\u0142owa warto\u015B\u0107 w ".concat(issue.origin);
        default:
          return "Nieprawid\u0142owe dane wej\u015Bciowe";
      }
    };
  };
  function pl () {
    return {
      localeError: error$d()
    };
  }

  var error$c = function error() {
    var Sizable = {
      string: {
        unit: "caracteres",
        verb: "ter"
      },
      file: {
        unit: "bytes",
        verb: "ter"
      },
      array: {
        unit: "itens",
        verb: "ter"
      },
      set: {
        unit: "itens",
        verb: "ter"
      }
    };
    function getSizing(origin) {
      var _Sizable$origin;
      return (_Sizable$origin = Sizable[origin]) !== null && _Sizable$origin !== void 0 ? _Sizable$origin : null;
    }
    var parsedType = function parsedType(data) {
      var t = _typeof(data);
      switch (t) {
        case "number":
          {
            return Number.isNaN(data) ? "NaN" : "número";
          }
        case "object":
          {
            if (Array.isArray(data)) {
              return "array";
            }
            if (data === null) {
              return "nulo";
            }
            if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
              return data.constructor.name;
            }
          }
      }
      return t;
    };
    var Nouns = {
      regex: "padrão",
      email: "endereço de e-mail",
      url: "URL",
      emoji: "emoji",
      uuid: "UUID",
      uuidv4: "UUIDv4",
      uuidv6: "UUIDv6",
      nanoid: "nanoid",
      guid: "GUID",
      cuid: "cuid",
      cuid2: "cuid2",
      ulid: "ULID",
      xid: "XID",
      ksuid: "KSUID",
      datetime: "data e hora ISO",
      date: "data ISO",
      time: "hora ISO",
      duration: "duração ISO",
      ipv4: "endereço IPv4",
      ipv6: "endereço IPv6",
      cidrv4: "faixa de IPv4",
      cidrv6: "faixa de IPv6",
      base64: "texto codificado em base64",
      base64url: "URL codificada em base64",
      json_string: "texto JSON",
      e164: "número E.164",
      jwt: "JWT",
      template_literal: "entrada"
    };
    return function (issue) {
      switch (issue.code) {
        case "invalid_type":
          return "Tipo inv\xE1lido: esperado ".concat(issue.expected, ", recebido ").concat(parsedType(issue.input));
        case "invalid_value":
          if (issue.values.length === 1) return "Entrada inv\xE1lida: esperado ".concat(stringifyPrimitive(issue.values[0]));
          return "Op\xE7\xE3o inv\xE1lida: esperada uma das ".concat(joinValues(issue.values, "|"));
        case "too_big":
          {
            var _issue$origin, _sizing$unit, _issue$origin2;
            var adj = issue.inclusive ? "<=" : "<";
            var sizing = getSizing(issue.origin);
            if (sizing) return "Muito grande: esperado que ".concat((_issue$origin = issue.origin) !== null && _issue$origin !== void 0 ? _issue$origin : "valor", " tivesse ").concat(adj).concat(issue.maximum.toString(), " ").concat((_sizing$unit = sizing.unit) !== null && _sizing$unit !== void 0 ? _sizing$unit : "elementos");
            return "Muito grande: esperado que ".concat((_issue$origin2 = issue.origin) !== null && _issue$origin2 !== void 0 ? _issue$origin2 : "valor", " fosse ").concat(adj).concat(issue.maximum.toString());
          }
        case "too_small":
          {
            var _adj = issue.inclusive ? ">=" : ">";
            var _sizing = getSizing(issue.origin);
            if (_sizing) {
              return "Muito pequeno: esperado que ".concat(issue.origin, " tivesse ").concat(_adj).concat(issue.minimum.toString(), " ").concat(_sizing.unit);
            }
            return "Muito pequeno: esperado que ".concat(issue.origin, " fosse ").concat(_adj).concat(issue.minimum.toString());
          }
        case "invalid_format":
          {
            var _Nouns$_issue$format;
            var _issue = issue;
            if (_issue.format === "starts_with") return "Texto inv\xE1lido: deve come\xE7ar com \"".concat(_issue.prefix, "\"");
            if (_issue.format === "ends_with") return "Texto inv\xE1lido: deve terminar com \"".concat(_issue.suffix, "\"");
            if (_issue.format === "includes") return "Texto inv\xE1lido: deve incluir \"".concat(_issue.includes, "\"");
            if (_issue.format === "regex") return "Texto inv\xE1lido: deve corresponder ao padr\xE3o ".concat(_issue.pattern);
            return "".concat((_Nouns$_issue$format = Nouns[_issue.format]) !== null && _Nouns$_issue$format !== void 0 ? _Nouns$_issue$format : issue.format, " inv\xE1lido");
          }
        case "not_multiple_of":
          return "N\xFAmero inv\xE1lido: deve ser m\xFAltiplo de ".concat(issue.divisor);
        case "unrecognized_keys":
          return "Chave".concat(issue.keys.length > 1 ? "s" : "", " desconhecida").concat(issue.keys.length > 1 ? "s" : "", ": ").concat(joinValues(issue.keys, ", "));
        case "invalid_key":
          return "Chave inv\xE1lida em ".concat(issue.origin);
        case "invalid_union":
          return "Entrada inválida";
        case "invalid_element":
          return "Valor inv\xE1lido em ".concat(issue.origin);
        default:
          return "Campo inv\xE1lido";
      }
    };
  };
  function pt () {
    return {
      localeError: error$c()
    };
  }

  function getRussianPlural(count, one, few, many) {
    var absCount = Math.abs(count);
    var lastDigit = absCount % 10;
    var lastTwoDigits = absCount % 100;
    if (lastTwoDigits >= 11 && lastTwoDigits <= 19) {
      return many;
    }
    if (lastDigit === 1) {
      return one;
    }
    if (lastDigit >= 2 && lastDigit <= 4) {
      return few;
    }
    return many;
  }
  var error$b = function error() {
    var Sizable = {
      string: {
        unit: {
          one: "символ",
          few: "символа",
          many: "символов"
        },
        verb: "иметь"
      },
      file: {
        unit: {
          one: "байт",
          few: "байта",
          many: "байт"
        },
        verb: "иметь"
      },
      array: {
        unit: {
          one: "элемент",
          few: "элемента",
          many: "элементов"
        },
        verb: "иметь"
      },
      set: {
        unit: {
          one: "элемент",
          few: "элемента",
          many: "элементов"
        },
        verb: "иметь"
      }
    };
    function getSizing(origin) {
      var _Sizable$origin;
      return (_Sizable$origin = Sizable[origin]) !== null && _Sizable$origin !== void 0 ? _Sizable$origin : null;
    }
    var parsedType = function parsedType(data) {
      var t = _typeof(data);
      switch (t) {
        case "number":
          {
            return Number.isNaN(data) ? "NaN" : "число";
          }
        case "object":
          {
            if (Array.isArray(data)) {
              return "массив";
            }
            if (data === null) {
              return "null";
            }
            if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
              return data.constructor.name;
            }
          }
      }
      return t;
    };
    var Nouns = {
      regex: "ввод",
      email: "email адрес",
      url: "URL",
      emoji: "эмодзи",
      uuid: "UUID",
      uuidv4: "UUIDv4",
      uuidv6: "UUIDv6",
      nanoid: "nanoid",
      guid: "GUID",
      cuid: "cuid",
      cuid2: "cuid2",
      ulid: "ULID",
      xid: "XID",
      ksuid: "KSUID",
      datetime: "ISO дата и время",
      date: "ISO дата",
      time: "ISO время",
      duration: "ISO длительность",
      ipv4: "IPv4 адрес",
      ipv6: "IPv6 адрес",
      cidrv4: "IPv4 диапазон",
      cidrv6: "IPv6 диапазон",
      base64: "строка в формате base64",
      base64url: "строка в формате base64url",
      json_string: "JSON строка",
      e164: "номер E.164",
      jwt: "JWT",
      template_literal: "ввод"
    };
    return function (issue) {
      switch (issue.code) {
        case "invalid_type":
          return "\u041D\u0435\u0432\u0435\u0440\u043D\u044B\u0439 \u0432\u0432\u043E\u0434: \u043E\u0436\u0438\u0434\u0430\u043B\u043E\u0441\u044C ".concat(issue.expected, ", \u043F\u043E\u043B\u0443\u0447\u0435\u043D\u043E ").concat(parsedType(issue.input));
        case "invalid_value":
          if (issue.values.length === 1) return "\u041D\u0435\u0432\u0435\u0440\u043D\u044B\u0439 \u0432\u0432\u043E\u0434: \u043E\u0436\u0438\u0434\u0430\u043B\u043E\u0441\u044C ".concat(stringifyPrimitive(issue.values[0]));
          return "\u041D\u0435\u0432\u0435\u0440\u043D\u044B\u0439 \u0432\u0430\u0440\u0438\u0430\u043D\u0442: \u043E\u0436\u0438\u0434\u0430\u043B\u043E\u0441\u044C \u043E\u0434\u043D\u043E \u0438\u0437 ".concat(joinValues(issue.values, "|"));
        case "too_big":
          {
            var _issue$origin2;
            var adj = issue.inclusive ? "<=" : "<";
            var sizing = getSizing(issue.origin);
            if (sizing) {
              var _issue$origin;
              var maxValue = Number(issue.maximum);
              var unit = getRussianPlural(maxValue, sizing.unit.one, sizing.unit.few, sizing.unit.many);
              return "\u0421\u043B\u0438\u0448\u043A\u043E\u043C \u0431\u043E\u043B\u044C\u0448\u043E\u0435 \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435: \u043E\u0436\u0438\u0434\u0430\u043B\u043E\u0441\u044C, \u0447\u0442\u043E ".concat((_issue$origin = issue.origin) !== null && _issue$origin !== void 0 ? _issue$origin : "значение", " \u0431\u0443\u0434\u0435\u0442 \u0438\u043C\u0435\u0442\u044C ").concat(adj).concat(issue.maximum.toString(), " ").concat(unit);
            }
            return "\u0421\u043B\u0438\u0448\u043A\u043E\u043C \u0431\u043E\u043B\u044C\u0448\u043E\u0435 \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435: \u043E\u0436\u0438\u0434\u0430\u043B\u043E\u0441\u044C, \u0447\u0442\u043E ".concat((_issue$origin2 = issue.origin) !== null && _issue$origin2 !== void 0 ? _issue$origin2 : "значение", " \u0431\u0443\u0434\u0435\u0442 ").concat(adj).concat(issue.maximum.toString());
          }
        case "too_small":
          {
            var _adj = issue.inclusive ? ">=" : ">";
            var _sizing = getSizing(issue.origin);
            if (_sizing) {
              var minValue = Number(issue.minimum);
              var _unit = getRussianPlural(minValue, _sizing.unit.one, _sizing.unit.few, _sizing.unit.many);
              return "\u0421\u043B\u0438\u0448\u043A\u043E\u043C \u043C\u0430\u043B\u0435\u043D\u044C\u043A\u043E\u0435 \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435: \u043E\u0436\u0438\u0434\u0430\u043B\u043E\u0441\u044C, \u0447\u0442\u043E ".concat(issue.origin, " \u0431\u0443\u0434\u0435\u0442 \u0438\u043C\u0435\u0442\u044C ").concat(_adj).concat(issue.minimum.toString(), " ").concat(_unit);
            }
            return "\u0421\u043B\u0438\u0448\u043A\u043E\u043C \u043C\u0430\u043B\u0435\u043D\u044C\u043A\u043E\u0435 \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435: \u043E\u0436\u0438\u0434\u0430\u043B\u043E\u0441\u044C, \u0447\u0442\u043E ".concat(issue.origin, " \u0431\u0443\u0434\u0435\u0442 ").concat(_adj).concat(issue.minimum.toString());
          }
        case "invalid_format":
          {
            var _Nouns$_issue$format;
            var _issue = issue;
            if (_issue.format === "starts_with") return "\u041D\u0435\u0432\u0435\u0440\u043D\u0430\u044F \u0441\u0442\u0440\u043E\u043A\u0430: \u0434\u043E\u043B\u0436\u043D\u0430 \u043D\u0430\u0447\u0438\u043D\u0430\u0442\u044C\u0441\u044F \u0441 \"".concat(_issue.prefix, "\"");
            if (_issue.format === "ends_with") return "\u041D\u0435\u0432\u0435\u0440\u043D\u0430\u044F \u0441\u0442\u0440\u043E\u043A\u0430: \u0434\u043E\u043B\u0436\u043D\u0430 \u0437\u0430\u043A\u0430\u043D\u0447\u0438\u0432\u0430\u0442\u044C\u0441\u044F \u043D\u0430 \"".concat(_issue.suffix, "\"");
            if (_issue.format === "includes") return "\u041D\u0435\u0432\u0435\u0440\u043D\u0430\u044F \u0441\u0442\u0440\u043E\u043A\u0430: \u0434\u043E\u043B\u0436\u043D\u0430 \u0441\u043E\u0434\u0435\u0440\u0436\u0430\u0442\u044C \"".concat(_issue.includes, "\"");
            if (_issue.format === "regex") return "\u041D\u0435\u0432\u0435\u0440\u043D\u0430\u044F \u0441\u0442\u0440\u043E\u043A\u0430: \u0434\u043E\u043B\u0436\u043D\u0430 \u0441\u043E\u043E\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u043E\u0432\u0430\u0442\u044C \u0448\u0430\u0431\u043B\u043E\u043D\u0443 ".concat(_issue.pattern);
            return "\u041D\u0435\u0432\u0435\u0440\u043D\u044B\u0439 ".concat((_Nouns$_issue$format = Nouns[_issue.format]) !== null && _Nouns$_issue$format !== void 0 ? _Nouns$_issue$format : issue.format);
          }
        case "not_multiple_of":
          return "\u041D\u0435\u0432\u0435\u0440\u043D\u043E\u0435 \u0447\u0438\u0441\u043B\u043E: \u0434\u043E\u043B\u0436\u043D\u043E \u0431\u044B\u0442\u044C \u043A\u0440\u0430\u0442\u043D\u044B\u043C ".concat(issue.divisor);
        case "unrecognized_keys":
          return "\u041D\u0435\u0440\u0430\u0441\u043F\u043E\u0437\u043D\u0430\u043D\u043D".concat(issue.keys.length > 1 ? "ые" : "ый", " \u043A\u043B\u044E\u0447").concat(issue.keys.length > 1 ? "и" : "", ": ").concat(joinValues(issue.keys, ", "));
        case "invalid_key":
          return "\u041D\u0435\u0432\u0435\u0440\u043D\u044B\u0439 \u043A\u043B\u044E\u0447 \u0432 ".concat(issue.origin);
        case "invalid_union":
          return "Неверные входные данные";
        case "invalid_element":
          return "\u041D\u0435\u0432\u0435\u0440\u043D\u043E\u0435 \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435 \u0432 ".concat(issue.origin);
        default:
          return "\u041D\u0435\u0432\u0435\u0440\u043D\u044B\u0435 \u0432\u0445\u043E\u0434\u043D\u044B\u0435 \u0434\u0430\u043D\u043D\u044B\u0435";
      }
    };
  };
  function ru () {
    return {
      localeError: error$b()
    };
  }

  var error$a = function error() {
    var Sizable = {
      string: {
        unit: "znakov",
        verb: "imeti"
      },
      file: {
        unit: "bajtov",
        verb: "imeti"
      },
      array: {
        unit: "elementov",
        verb: "imeti"
      },
      set: {
        unit: "elementov",
        verb: "imeti"
      }
    };
    function getSizing(origin) {
      var _Sizable$origin;
      return (_Sizable$origin = Sizable[origin]) !== null && _Sizable$origin !== void 0 ? _Sizable$origin : null;
    }
    var parsedType = function parsedType(data) {
      var t = _typeof(data);
      switch (t) {
        case "number":
          {
            return Number.isNaN(data) ? "NaN" : "število";
          }
        case "object":
          {
            if (Array.isArray(data)) {
              return "tabela";
            }
            if (data === null) {
              return "null";
            }
            if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
              return data.constructor.name;
            }
          }
      }
      return t;
    };
    var Nouns = {
      regex: "vnos",
      email: "e-poštni naslov",
      url: "URL",
      emoji: "emoji",
      uuid: "UUID",
      uuidv4: "UUIDv4",
      uuidv6: "UUIDv6",
      nanoid: "nanoid",
      guid: "GUID",
      cuid: "cuid",
      cuid2: "cuid2",
      ulid: "ULID",
      xid: "XID",
      ksuid: "KSUID",
      datetime: "ISO datum in čas",
      date: "ISO datum",
      time: "ISO čas",
      duration: "ISO trajanje",
      ipv4: "IPv4 naslov",
      ipv6: "IPv6 naslov",
      cidrv4: "obseg IPv4",
      cidrv6: "obseg IPv6",
      base64: "base64 kodiran niz",
      base64url: "base64url kodiran niz",
      json_string: "JSON niz",
      e164: "E.164 številka",
      jwt: "JWT",
      template_literal: "vnos"
    };
    return function (issue) {
      switch (issue.code) {
        case "invalid_type":
          return "Neveljaven vnos: pri\u010Dakovano ".concat(issue.expected, ", prejeto ").concat(parsedType(issue.input));
        case "invalid_value":
          if (issue.values.length === 1) return "Neveljaven vnos: pri\u010Dakovano ".concat(stringifyPrimitive(issue.values[0]));
          return "Neveljavna mo\u017Enost: pri\u010Dakovano eno izmed ".concat(joinValues(issue.values, "|"));
        case "too_big":
          {
            var _issue$origin, _sizing$unit, _issue$origin2;
            var adj = issue.inclusive ? "<=" : "<";
            var sizing = getSizing(issue.origin);
            if (sizing) return "Preveliko: pri\u010Dakovano, da bo ".concat((_issue$origin = issue.origin) !== null && _issue$origin !== void 0 ? _issue$origin : "vrednost", " imelo ").concat(adj).concat(issue.maximum.toString(), " ").concat((_sizing$unit = sizing.unit) !== null && _sizing$unit !== void 0 ? _sizing$unit : "elementov");
            return "Preveliko: pri\u010Dakovano, da bo ".concat((_issue$origin2 = issue.origin) !== null && _issue$origin2 !== void 0 ? _issue$origin2 : "vrednost", " ").concat(adj).concat(issue.maximum.toString());
          }
        case "too_small":
          {
            var _adj = issue.inclusive ? ">=" : ">";
            var _sizing = getSizing(issue.origin);
            if (_sizing) {
              return "Premajhno: pri\u010Dakovano, da bo ".concat(issue.origin, " imelo ").concat(_adj).concat(issue.minimum.toString(), " ").concat(_sizing.unit);
            }
            return "Premajhno: pri\u010Dakovano, da bo ".concat(issue.origin, " ").concat(_adj).concat(issue.minimum.toString());
          }
        case "invalid_format":
          {
            var _Nouns$_issue$format;
            var _issue = issue;
            if (_issue.format === "starts_with") {
              return "Neveljaven niz: mora se za\u010Deti z \"".concat(_issue.prefix, "\"");
            }
            if (_issue.format === "ends_with") return "Neveljaven niz: mora se kon\u010Dati z \"".concat(_issue.suffix, "\"");
            if (_issue.format === "includes") return "Neveljaven niz: mora vsebovati \"".concat(_issue.includes, "\"");
            if (_issue.format === "regex") return "Neveljaven niz: mora ustrezati vzorcu ".concat(_issue.pattern);
            return "Neveljaven ".concat((_Nouns$_issue$format = Nouns[_issue.format]) !== null && _Nouns$_issue$format !== void 0 ? _Nouns$_issue$format : issue.format);
          }
        case "not_multiple_of":
          return "Neveljavno \u0161tevilo: mora biti ve\u010Dkratnik ".concat(issue.divisor);
        case "unrecognized_keys":
          return "Neprepoznan".concat(issue.keys.length > 1 ? "i ključi" : " ključ", ": ").concat(joinValues(issue.keys, ", "));
        case "invalid_key":
          return "Neveljaven klju\u010D v ".concat(issue.origin);
        case "invalid_union":
          return "Neveljaven vnos";
        case "invalid_element":
          return "Neveljavna vrednost v ".concat(issue.origin);
        default:
          return "Neveljaven vnos";
      }
    };
  };
  function sl () {
    return {
      localeError: error$a()
    };
  }

  var error$9 = function error() {
    var Sizable = {
      string: {
        unit: "tecken",
        verb: "att ha"
      },
      file: {
        unit: "bytes",
        verb: "att ha"
      },
      array: {
        unit: "objekt",
        verb: "att innehålla"
      },
      set: {
        unit: "objekt",
        verb: "att innehålla"
      }
    };
    function getSizing(origin) {
      var _Sizable$origin;
      return (_Sizable$origin = Sizable[origin]) !== null && _Sizable$origin !== void 0 ? _Sizable$origin : null;
    }
    var parsedType = function parsedType(data) {
      var t = _typeof(data);
      switch (t) {
        case "number":
          {
            return Number.isNaN(data) ? "NaN" : "antal";
          }
        case "object":
          {
            if (Array.isArray(data)) {
              return "lista";
            }
            if (data === null) {
              return "null";
            }
            if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
              return data.constructor.name;
            }
          }
      }
      return t;
    };
    var Nouns = {
      regex: "reguljärt uttryck",
      email: "e-postadress",
      url: "URL",
      emoji: "emoji",
      uuid: "UUID",
      uuidv4: "UUIDv4",
      uuidv6: "UUIDv6",
      nanoid: "nanoid",
      guid: "GUID",
      cuid: "cuid",
      cuid2: "cuid2",
      ulid: "ULID",
      xid: "XID",
      ksuid: "KSUID",
      datetime: "ISO-datum och tid",
      date: "ISO-datum",
      time: "ISO-tid",
      duration: "ISO-varaktighet",
      ipv4: "IPv4-intervall",
      ipv6: "IPv6-intervall",
      cidrv4: "IPv4-spektrum",
      cidrv6: "IPv6-spektrum",
      base64: "base64-kodad sträng",
      base64url: "base64url-kodad sträng",
      json_string: "JSON-sträng",
      e164: "E.164-nummer",
      jwt: "JWT",
      template_literal: "mall-literal"
    };
    return function (issue) {
      var _issue$origin5, _issue$origin6;
      switch (issue.code) {
        case "invalid_type":
          return "Ogiltig inmatning: f\xF6rv\xE4ntat ".concat(issue.expected, ", fick ").concat(parsedType(issue.input));
        case "invalid_value":
          if (issue.values.length === 1) return "Ogiltig inmatning: f\xF6rv\xE4ntat ".concat(stringifyPrimitive(issue.values[0]));
          return "Ogiltigt val: f\xF6rv\xE4ntade en av ".concat(joinValues(issue.values, "|"));
        case "too_big":
          {
            var _issue$origin2;
            var adj = issue.inclusive ? "<=" : "<";
            var sizing = getSizing(issue.origin);
            if (sizing) {
              var _issue$origin, _sizing$unit;
              return "F\xF6r stor(t): f\xF6rv\xE4ntade ".concat((_issue$origin = issue.origin) !== null && _issue$origin !== void 0 ? _issue$origin : "värdet", " att ha ").concat(adj).concat(issue.maximum.toString(), " ").concat((_sizing$unit = sizing.unit) !== null && _sizing$unit !== void 0 ? _sizing$unit : "element");
            }
            return "F\xF6r stor(t): f\xF6rv\xE4ntat ".concat((_issue$origin2 = issue.origin) !== null && _issue$origin2 !== void 0 ? _issue$origin2 : "värdet", " att ha ").concat(adj).concat(issue.maximum.toString());
          }
        case "too_small":
          {
            var _issue$origin4;
            var _adj = issue.inclusive ? ">=" : ">";
            var _sizing = getSizing(issue.origin);
            if (_sizing) {
              var _issue$origin3;
              return "F\xF6r lite(t): f\xF6rv\xE4ntade ".concat((_issue$origin3 = issue.origin) !== null && _issue$origin3 !== void 0 ? _issue$origin3 : "värdet", " att ha ").concat(_adj).concat(issue.minimum.toString(), " ").concat(_sizing.unit);
            }
            return "F\xF6r lite(t): f\xF6rv\xE4ntade ".concat((_issue$origin4 = issue.origin) !== null && _issue$origin4 !== void 0 ? _issue$origin4 : "värdet", " att ha ").concat(_adj).concat(issue.minimum.toString());
          }
        case "invalid_format":
          {
            var _Nouns$_issue$format;
            var _issue = issue;
            if (_issue.format === "starts_with") {
              return "Ogiltig str\xE4ng: m\xE5ste b\xF6rja med \"".concat(_issue.prefix, "\"");
            }
            if (_issue.format === "ends_with") return "Ogiltig str\xE4ng: m\xE5ste sluta med \"".concat(_issue.suffix, "\"");
            if (_issue.format === "includes") return "Ogiltig str\xE4ng: m\xE5ste inneh\xE5lla \"".concat(_issue.includes, "\"");
            if (_issue.format === "regex") return "Ogiltig str\xE4ng: m\xE5ste matcha m\xF6nstret \"".concat(_issue.pattern, "\"");
            return "Ogiltig(t) ".concat((_Nouns$_issue$format = Nouns[_issue.format]) !== null && _Nouns$_issue$format !== void 0 ? _Nouns$_issue$format : issue.format);
          }
        case "not_multiple_of":
          return "Ogiltigt tal: m\xE5ste vara en multipel av ".concat(issue.divisor);
        case "unrecognized_keys":
          return "".concat(issue.keys.length > 1 ? "Okända nycklar" : "Okänd nyckel", ": ").concat(joinValues(issue.keys, ", "));
        case "invalid_key":
          return "Ogiltig nyckel i ".concat((_issue$origin5 = issue.origin) !== null && _issue$origin5 !== void 0 ? _issue$origin5 : "värdet");
        case "invalid_union":
          return "Ogiltig input";
        case "invalid_element":
          return "Ogiltigt v\xE4rde i ".concat((_issue$origin6 = issue.origin) !== null && _issue$origin6 !== void 0 ? _issue$origin6 : "värdet");
        default:
          return "Ogiltig input";
      }
    };
  };
  function sv () {
    return {
      localeError: error$9()
    };
  }

  var error$8 = function error() {
    var Sizable = {
      string: {
        unit: "எழுத்துக்கள்",
        verb: "கொண்டிருக்க வேண்டும்"
      },
      file: {
        unit: "பைட்டுகள்",
        verb: "கொண்டிருக்க வேண்டும்"
      },
      array: {
        unit: "உறுப்புகள்",
        verb: "கொண்டிருக்க வேண்டும்"
      },
      set: {
        unit: "உறுப்புகள்",
        verb: "கொண்டிருக்க வேண்டும்"
      }
    };
    function getSizing(origin) {
      var _Sizable$origin;
      return (_Sizable$origin = Sizable[origin]) !== null && _Sizable$origin !== void 0 ? _Sizable$origin : null;
    }
    var parsedType = function parsedType(data) {
      var t = _typeof(data);
      switch (t) {
        case "number":
          {
            return Number.isNaN(data) ? "எண் அல்லாதது" : "எண்";
          }
        case "object":
          {
            if (Array.isArray(data)) {
              return "அணி";
            }
            if (data === null) {
              return "வெறுமை";
            }
            if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
              return data.constructor.name;
            }
          }
      }
      return t;
    };
    var Nouns = {
      regex: "உள்ளீடு",
      email: "மின்னஞ்சல் முகவரி",
      url: "URL",
      emoji: "emoji",
      uuid: "UUID",
      uuidv4: "UUIDv4",
      uuidv6: "UUIDv6",
      nanoid: "nanoid",
      guid: "GUID",
      cuid: "cuid",
      cuid2: "cuid2",
      ulid: "ULID",
      xid: "XID",
      ksuid: "KSUID",
      datetime: "ISO தேதி நேரம்",
      date: "ISO தேதி",
      time: "ISO நேரம்",
      duration: "ISO கால அளவு",
      ipv4: "IPv4 முகவரி",
      ipv6: "IPv6 முகவரி",
      cidrv4: "IPv4 வரம்பு",
      cidrv6: "IPv6 வரம்பு",
      base64: "base64-encoded சரம்",
      base64url: "base64url-encoded சரம்",
      json_string: "JSON சரம்",
      e164: "E.164 எண்",
      jwt: "JWT",
      template_literal: "input"
    };
    return function (issue) {
      switch (issue.code) {
        case "invalid_type":
          return "\u0BA4\u0BB5\u0BB1\u0BBE\u0BA9 \u0B89\u0BB3\u0BCD\u0BB3\u0BC0\u0B9F\u0BC1: \u0B8E\u0BA4\u0BBF\u0BB0\u0BCD\u0BAA\u0BBE\u0BB0\u0BCD\u0B95\u0BCD\u0B95\u0BAA\u0BCD\u0BAA\u0B9F\u0BCD\u0B9F\u0BA4\u0BC1 ".concat(issue.expected, ", \u0BAA\u0BC6\u0BB1\u0BAA\u0BCD\u0BAA\u0B9F\u0BCD\u0B9F\u0BA4\u0BC1 ").concat(parsedType(issue.input));
        case "invalid_value":
          if (issue.values.length === 1) return "\u0BA4\u0BB5\u0BB1\u0BBE\u0BA9 \u0B89\u0BB3\u0BCD\u0BB3\u0BC0\u0B9F\u0BC1: \u0B8E\u0BA4\u0BBF\u0BB0\u0BCD\u0BAA\u0BBE\u0BB0\u0BCD\u0B95\u0BCD\u0B95\u0BAA\u0BCD\u0BAA\u0B9F\u0BCD\u0B9F\u0BA4\u0BC1 ".concat(stringifyPrimitive(issue.values[0]));
          return "\u0BA4\u0BB5\u0BB1\u0BBE\u0BA9 \u0BB5\u0BBF\u0BB0\u0BC1\u0BAA\u0BCD\u0BAA\u0BAE\u0BCD: \u0B8E\u0BA4\u0BBF\u0BB0\u0BCD\u0BAA\u0BBE\u0BB0\u0BCD\u0B95\u0BCD\u0B95\u0BAA\u0BCD\u0BAA\u0B9F\u0BCD\u0B9F\u0BA4\u0BC1 ".concat(joinValues(issue.values, "|"), " \u0B87\u0BB2\u0BCD \u0B92\u0BA9\u0BCD\u0BB1\u0BC1");
        case "too_big":
          {
            var _issue$origin2;
            var adj = issue.inclusive ? "<=" : "<";
            var sizing = getSizing(issue.origin);
            if (sizing) {
              var _issue$origin, _sizing$unit;
              return "\u0BAE\u0BBF\u0B95 \u0BAA\u0BC6\u0BB0\u0BBF\u0BAF\u0BA4\u0BC1: \u0B8E\u0BA4\u0BBF\u0BB0\u0BCD\u0BAA\u0BBE\u0BB0\u0BCD\u0B95\u0BCD\u0B95\u0BAA\u0BCD\u0BAA\u0B9F\u0BCD\u0B9F\u0BA4\u0BC1 ".concat((_issue$origin = issue.origin) !== null && _issue$origin !== void 0 ? _issue$origin : "மதிப்பு", " ").concat(adj).concat(issue.maximum.toString(), " ").concat((_sizing$unit = sizing.unit) !== null && _sizing$unit !== void 0 ? _sizing$unit : "உறுப்புகள்", " \u0B86\u0B95 \u0B87\u0BB0\u0BC1\u0B95\u0BCD\u0B95 \u0BB5\u0BC7\u0BA3\u0BCD\u0B9F\u0BC1\u0BAE\u0BCD");
            }
            return "\u0BAE\u0BBF\u0B95 \u0BAA\u0BC6\u0BB0\u0BBF\u0BAF\u0BA4\u0BC1: \u0B8E\u0BA4\u0BBF\u0BB0\u0BCD\u0BAA\u0BBE\u0BB0\u0BCD\u0B95\u0BCD\u0B95\u0BAA\u0BCD\u0BAA\u0B9F\u0BCD\u0B9F\u0BA4\u0BC1 ".concat((_issue$origin2 = issue.origin) !== null && _issue$origin2 !== void 0 ? _issue$origin2 : "மதிப்பு", " ").concat(adj).concat(issue.maximum.toString(), " \u0B86\u0B95 \u0B87\u0BB0\u0BC1\u0B95\u0BCD\u0B95 \u0BB5\u0BC7\u0BA3\u0BCD\u0B9F\u0BC1\u0BAE\u0BCD");
          }
        case "too_small":
          {
            var _adj = issue.inclusive ? ">=" : ">";
            var _sizing = getSizing(issue.origin);
            if (_sizing) {
              return "\u0BAE\u0BBF\u0B95\u0B9A\u0BCD \u0B9A\u0BBF\u0BB1\u0BBF\u0BAF\u0BA4\u0BC1: \u0B8E\u0BA4\u0BBF\u0BB0\u0BCD\u0BAA\u0BBE\u0BB0\u0BCD\u0B95\u0BCD\u0B95\u0BAA\u0BCD\u0BAA\u0B9F\u0BCD\u0B9F\u0BA4\u0BC1 ".concat(issue.origin, " ").concat(_adj).concat(issue.minimum.toString(), " ").concat(_sizing.unit, " \u0B86\u0B95 \u0B87\u0BB0\u0BC1\u0B95\u0BCD\u0B95 \u0BB5\u0BC7\u0BA3\u0BCD\u0B9F\u0BC1\u0BAE\u0BCD"); //
            }
            return "\u0BAE\u0BBF\u0B95\u0B9A\u0BCD \u0B9A\u0BBF\u0BB1\u0BBF\u0BAF\u0BA4\u0BC1: \u0B8E\u0BA4\u0BBF\u0BB0\u0BCD\u0BAA\u0BBE\u0BB0\u0BCD\u0B95\u0BCD\u0B95\u0BAA\u0BCD\u0BAA\u0B9F\u0BCD\u0B9F\u0BA4\u0BC1 ".concat(issue.origin, " ").concat(_adj).concat(issue.minimum.toString(), " \u0B86\u0B95 \u0B87\u0BB0\u0BC1\u0B95\u0BCD\u0B95 \u0BB5\u0BC7\u0BA3\u0BCD\u0B9F\u0BC1\u0BAE\u0BCD");
          }
        case "invalid_format":
          {
            var _Nouns$_issue$format;
            var _issue = issue;
            if (_issue.format === "starts_with") return "\u0BA4\u0BB5\u0BB1\u0BBE\u0BA9 \u0B9A\u0BB0\u0BAE\u0BCD: \"".concat(_issue.prefix, "\" \u0B87\u0BB2\u0BCD \u0BA4\u0BCA\u0B9F\u0B99\u0BCD\u0B95 \u0BB5\u0BC7\u0BA3\u0BCD\u0B9F\u0BC1\u0BAE\u0BCD");
            if (_issue.format === "ends_with") return "\u0BA4\u0BB5\u0BB1\u0BBE\u0BA9 \u0B9A\u0BB0\u0BAE\u0BCD: \"".concat(_issue.suffix, "\" \u0B87\u0BB2\u0BCD \u0BAE\u0BC1\u0B9F\u0BBF\u0BB5\u0B9F\u0BC8\u0BAF \u0BB5\u0BC7\u0BA3\u0BCD\u0B9F\u0BC1\u0BAE\u0BCD");
            if (_issue.format === "includes") return "\u0BA4\u0BB5\u0BB1\u0BBE\u0BA9 \u0B9A\u0BB0\u0BAE\u0BCD: \"".concat(_issue.includes, "\" \u0B90 \u0B89\u0BB3\u0BCD\u0BB3\u0B9F\u0B95\u0BCD\u0B95 \u0BB5\u0BC7\u0BA3\u0BCD\u0B9F\u0BC1\u0BAE\u0BCD");
            if (_issue.format === "regex") return "\u0BA4\u0BB5\u0BB1\u0BBE\u0BA9 \u0B9A\u0BB0\u0BAE\u0BCD: ".concat(_issue.pattern, " \u0BAE\u0BC1\u0BB1\u0BC8\u0BAA\u0BBE\u0B9F\u0BCD\u0B9F\u0BC1\u0B9F\u0BA9\u0BCD \u0BAA\u0BCA\u0BB0\u0BC1\u0BA8\u0BCD\u0BA4 \u0BB5\u0BC7\u0BA3\u0BCD\u0B9F\u0BC1\u0BAE\u0BCD");
            return "\u0BA4\u0BB5\u0BB1\u0BBE\u0BA9 ".concat((_Nouns$_issue$format = Nouns[_issue.format]) !== null && _Nouns$_issue$format !== void 0 ? _Nouns$_issue$format : issue.format);
          }
        case "not_multiple_of":
          return "\u0BA4\u0BB5\u0BB1\u0BBE\u0BA9 \u0B8E\u0BA3\u0BCD: ".concat(issue.divisor, " \u0B87\u0BA9\u0BCD \u0BAA\u0BB2\u0BAE\u0BBE\u0B95 \u0B87\u0BB0\u0BC1\u0B95\u0BCD\u0B95 \u0BB5\u0BC7\u0BA3\u0BCD\u0B9F\u0BC1\u0BAE\u0BCD");
        case "unrecognized_keys":
          return "\u0B85\u0B9F\u0BC8\u0BAF\u0BBE\u0BB3\u0BAE\u0BCD \u0BA4\u0BC6\u0BB0\u0BBF\u0BAF\u0BBE\u0BA4 \u0BB5\u0BBF\u0B9A\u0BC8".concat(issue.keys.length > 1 ? "கள்" : "", ": ").concat(joinValues(issue.keys, ", "));
        case "invalid_key":
          return "".concat(issue.origin, " \u0B87\u0BB2\u0BCD \u0BA4\u0BB5\u0BB1\u0BBE\u0BA9 \u0BB5\u0BBF\u0B9A\u0BC8");
        case "invalid_union":
          return "தவறான உள்ளீடு";
        case "invalid_element":
          return "".concat(issue.origin, " \u0B87\u0BB2\u0BCD \u0BA4\u0BB5\u0BB1\u0BBE\u0BA9 \u0BAE\u0BA4\u0BBF\u0BAA\u0BCD\u0BAA\u0BC1");
        default:
          return "\u0BA4\u0BB5\u0BB1\u0BBE\u0BA9 \u0B89\u0BB3\u0BCD\u0BB3\u0BC0\u0B9F\u0BC1";
      }
    };
  };
  function ta () {
    return {
      localeError: error$8()
    };
  }

  var error$7 = function error() {
    var Sizable = {
      string: {
        unit: "ตัวอักษร",
        verb: "ควรมี"
      },
      file: {
        unit: "ไบต์",
        verb: "ควรมี"
      },
      array: {
        unit: "รายการ",
        verb: "ควรมี"
      },
      set: {
        unit: "รายการ",
        verb: "ควรมี"
      }
    };
    function getSizing(origin) {
      var _Sizable$origin;
      return (_Sizable$origin = Sizable[origin]) !== null && _Sizable$origin !== void 0 ? _Sizable$origin : null;
    }
    var parsedType = function parsedType(data) {
      var t = _typeof(data);
      switch (t) {
        case "number":
          {
            return Number.isNaN(data) ? "ไม่ใช่ตัวเลข (NaN)" : "ตัวเลข";
          }
        case "object":
          {
            if (Array.isArray(data)) {
              return "อาร์เรย์ (Array)";
            }
            if (data === null) {
              return "ไม่มีค่า (null)";
            }
            if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
              return data.constructor.name;
            }
          }
      }
      return t;
    };
    var Nouns = {
      regex: "ข้อมูลที่ป้อน",
      email: "ที่อยู่อีเมล",
      url: "URL",
      emoji: "อิโมจิ",
      uuid: "UUID",
      uuidv4: "UUIDv4",
      uuidv6: "UUIDv6",
      nanoid: "nanoid",
      guid: "GUID",
      cuid: "cuid",
      cuid2: "cuid2",
      ulid: "ULID",
      xid: "XID",
      ksuid: "KSUID",
      datetime: "วันที่เวลาแบบ ISO",
      date: "วันที่แบบ ISO",
      time: "เวลาแบบ ISO",
      duration: "ช่วงเวลาแบบ ISO",
      ipv4: "ที่อยู่ IPv4",
      ipv6: "ที่อยู่ IPv6",
      cidrv4: "ช่วง IP แบบ IPv4",
      cidrv6: "ช่วง IP แบบ IPv6",
      base64: "ข้อความแบบ Base64",
      base64url: "ข้อความแบบ Base64 สำหรับ URL",
      json_string: "ข้อความแบบ JSON",
      e164: "เบอร์โทรศัพท์ระหว่างประเทศ (E.164)",
      jwt: "โทเคน JWT",
      template_literal: "ข้อมูลที่ป้อน"
    };
    return function (issue) {
      switch (issue.code) {
        case "invalid_type":
          return "\u0E1B\u0E23\u0E30\u0E40\u0E20\u0E17\u0E02\u0E49\u0E2D\u0E21\u0E39\u0E25\u0E44\u0E21\u0E48\u0E16\u0E39\u0E01\u0E15\u0E49\u0E2D\u0E07: \u0E04\u0E27\u0E23\u0E40\u0E1B\u0E47\u0E19 ".concat(issue.expected, " \u0E41\u0E15\u0E48\u0E44\u0E14\u0E49\u0E23\u0E31\u0E1A ").concat(parsedType(issue.input));
        case "invalid_value":
          if (issue.values.length === 1) return "\u0E04\u0E48\u0E32\u0E44\u0E21\u0E48\u0E16\u0E39\u0E01\u0E15\u0E49\u0E2D\u0E07: \u0E04\u0E27\u0E23\u0E40\u0E1B\u0E47\u0E19 ".concat(stringifyPrimitive(issue.values[0]));
          return "\u0E15\u0E31\u0E27\u0E40\u0E25\u0E37\u0E2D\u0E01\u0E44\u0E21\u0E48\u0E16\u0E39\u0E01\u0E15\u0E49\u0E2D\u0E07: \u0E04\u0E27\u0E23\u0E40\u0E1B\u0E47\u0E19\u0E2B\u0E19\u0E36\u0E48\u0E07\u0E43\u0E19 ".concat(joinValues(issue.values, "|"));
        case "too_big":
          {
            var _issue$origin, _sizing$unit, _issue$origin2;
            var adj = issue.inclusive ? "ไม่เกิน" : "น้อยกว่า";
            var sizing = getSizing(issue.origin);
            if (sizing) return "\u0E40\u0E01\u0E34\u0E19\u0E01\u0E33\u0E2B\u0E19\u0E14: ".concat((_issue$origin = issue.origin) !== null && _issue$origin !== void 0 ? _issue$origin : "ค่า", " \u0E04\u0E27\u0E23\u0E21\u0E35").concat(adj, " ").concat(issue.maximum.toString(), " ").concat((_sizing$unit = sizing.unit) !== null && _sizing$unit !== void 0 ? _sizing$unit : "รายการ");
            return "\u0E40\u0E01\u0E34\u0E19\u0E01\u0E33\u0E2B\u0E19\u0E14: ".concat((_issue$origin2 = issue.origin) !== null && _issue$origin2 !== void 0 ? _issue$origin2 : "ค่า", " \u0E04\u0E27\u0E23\u0E21\u0E35").concat(adj, " ").concat(issue.maximum.toString());
          }
        case "too_small":
          {
            var _adj = issue.inclusive ? "อย่างน้อย" : "มากกว่า";
            var _sizing = getSizing(issue.origin);
            if (_sizing) {
              return "\u0E19\u0E49\u0E2D\u0E22\u0E01\u0E27\u0E48\u0E32\u0E01\u0E33\u0E2B\u0E19\u0E14: ".concat(issue.origin, " \u0E04\u0E27\u0E23\u0E21\u0E35").concat(_adj, " ").concat(issue.minimum.toString(), " ").concat(_sizing.unit);
            }
            return "\u0E19\u0E49\u0E2D\u0E22\u0E01\u0E27\u0E48\u0E32\u0E01\u0E33\u0E2B\u0E19\u0E14: ".concat(issue.origin, " \u0E04\u0E27\u0E23\u0E21\u0E35").concat(_adj, " ").concat(issue.minimum.toString());
          }
        case "invalid_format":
          {
            var _Nouns$_issue$format;
            var _issue = issue;
            if (_issue.format === "starts_with") {
              return "\u0E23\u0E39\u0E1B\u0E41\u0E1A\u0E1A\u0E44\u0E21\u0E48\u0E16\u0E39\u0E01\u0E15\u0E49\u0E2D\u0E07: \u0E02\u0E49\u0E2D\u0E04\u0E27\u0E32\u0E21\u0E15\u0E49\u0E2D\u0E07\u0E02\u0E36\u0E49\u0E19\u0E15\u0E49\u0E19\u0E14\u0E49\u0E27\u0E22 \"".concat(_issue.prefix, "\"");
            }
            if (_issue.format === "ends_with") return "\u0E23\u0E39\u0E1B\u0E41\u0E1A\u0E1A\u0E44\u0E21\u0E48\u0E16\u0E39\u0E01\u0E15\u0E49\u0E2D\u0E07: \u0E02\u0E49\u0E2D\u0E04\u0E27\u0E32\u0E21\u0E15\u0E49\u0E2D\u0E07\u0E25\u0E07\u0E17\u0E49\u0E32\u0E22\u0E14\u0E49\u0E27\u0E22 \"".concat(_issue.suffix, "\"");
            if (_issue.format === "includes") return "\u0E23\u0E39\u0E1B\u0E41\u0E1A\u0E1A\u0E44\u0E21\u0E48\u0E16\u0E39\u0E01\u0E15\u0E49\u0E2D\u0E07: \u0E02\u0E49\u0E2D\u0E04\u0E27\u0E32\u0E21\u0E15\u0E49\u0E2D\u0E07\u0E21\u0E35 \"".concat(_issue.includes, "\" \u0E2D\u0E22\u0E39\u0E48\u0E43\u0E19\u0E02\u0E49\u0E2D\u0E04\u0E27\u0E32\u0E21");
            if (_issue.format === "regex") return "\u0E23\u0E39\u0E1B\u0E41\u0E1A\u0E1A\u0E44\u0E21\u0E48\u0E16\u0E39\u0E01\u0E15\u0E49\u0E2D\u0E07: \u0E15\u0E49\u0E2D\u0E07\u0E15\u0E23\u0E07\u0E01\u0E31\u0E1A\u0E23\u0E39\u0E1B\u0E41\u0E1A\u0E1A\u0E17\u0E35\u0E48\u0E01\u0E33\u0E2B\u0E19\u0E14 ".concat(_issue.pattern);
            return "\u0E23\u0E39\u0E1B\u0E41\u0E1A\u0E1A\u0E44\u0E21\u0E48\u0E16\u0E39\u0E01\u0E15\u0E49\u0E2D\u0E07: ".concat((_Nouns$_issue$format = Nouns[_issue.format]) !== null && _Nouns$_issue$format !== void 0 ? _Nouns$_issue$format : issue.format);
          }
        case "not_multiple_of":
          return "\u0E15\u0E31\u0E27\u0E40\u0E25\u0E02\u0E44\u0E21\u0E48\u0E16\u0E39\u0E01\u0E15\u0E49\u0E2D\u0E07: \u0E15\u0E49\u0E2D\u0E07\u0E40\u0E1B\u0E47\u0E19\u0E08\u0E33\u0E19\u0E27\u0E19\u0E17\u0E35\u0E48\u0E2B\u0E32\u0E23\u0E14\u0E49\u0E27\u0E22 ".concat(issue.divisor, " \u0E44\u0E14\u0E49\u0E25\u0E07\u0E15\u0E31\u0E27");
        case "unrecognized_keys":
          return "\u0E1E\u0E1A\u0E04\u0E35\u0E22\u0E4C\u0E17\u0E35\u0E48\u0E44\u0E21\u0E48\u0E23\u0E39\u0E49\u0E08\u0E31\u0E01: ".concat(joinValues(issue.keys, ", "));
        case "invalid_key":
          return "\u0E04\u0E35\u0E22\u0E4C\u0E44\u0E21\u0E48\u0E16\u0E39\u0E01\u0E15\u0E49\u0E2D\u0E07\u0E43\u0E19 ".concat(issue.origin);
        case "invalid_union":
          return "ข้อมูลไม่ถูกต้อง: ไม่ตรงกับรูปแบบยูเนียนที่กำหนดไว้";
        case "invalid_element":
          return "\u0E02\u0E49\u0E2D\u0E21\u0E39\u0E25\u0E44\u0E21\u0E48\u0E16\u0E39\u0E01\u0E15\u0E49\u0E2D\u0E07\u0E43\u0E19 ".concat(issue.origin);
        default:
          return "\u0E02\u0E49\u0E2D\u0E21\u0E39\u0E25\u0E44\u0E21\u0E48\u0E16\u0E39\u0E01\u0E15\u0E49\u0E2D\u0E07";
      }
    };
  };
  function th () {
    return {
      localeError: error$7()
    };
  }

  var parsedType = function parsedType(data) {
    var t = _typeof(data);
    switch (t) {
      case "number":
        {
          return Number.isNaN(data) ? "NaN" : "number";
        }
      case "object":
        {
          if (Array.isArray(data)) {
            return "array";
          }
          if (data === null) {
            return "null";
          }
          if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
            return data.constructor.name;
          }
        }
    }
    return t;
  };
  var error$6 = function error() {
    var Sizable = {
      string: {
        unit: "karakter",
        verb: "olmalı"
      },
      file: {
        unit: "bayt",
        verb: "olmalı"
      },
      array: {
        unit: "öğe",
        verb: "olmalı"
      },
      set: {
        unit: "öğe",
        verb: "olmalı"
      }
    };
    function getSizing(origin) {
      var _Sizable$origin;
      return (_Sizable$origin = Sizable[origin]) !== null && _Sizable$origin !== void 0 ? _Sizable$origin : null;
    }
    var Nouns = {
      regex: "girdi",
      email: "e-posta adresi",
      url: "URL",
      emoji: "emoji",
      uuid: "UUID",
      uuidv4: "UUIDv4",
      uuidv6: "UUIDv6",
      nanoid: "nanoid",
      guid: "GUID",
      cuid: "cuid",
      cuid2: "cuid2",
      ulid: "ULID",
      xid: "XID",
      ksuid: "KSUID",
      datetime: "ISO tarih ve saat",
      date: "ISO tarih",
      time: "ISO saat",
      duration: "ISO süre",
      ipv4: "IPv4 adresi",
      ipv6: "IPv6 adresi",
      cidrv4: "IPv4 aralığı",
      cidrv6: "IPv6 aralığı",
      base64: "base64 ile şifrelenmiş metin",
      base64url: "base64url ile şifrelenmiş metin",
      json_string: "JSON dizesi",
      e164: "E.164 sayısı",
      jwt: "JWT",
      template_literal: "Şablon dizesi"
    };
    return function (issue) {
      switch (issue.code) {
        case "invalid_type":
          return "Ge\xE7ersiz de\u011Fer: beklenen ".concat(issue.expected, ", al\u0131nan ").concat(parsedType(issue.input));
        case "invalid_value":
          if (issue.values.length === 1) return "Ge\xE7ersiz de\u011Fer: beklenen ".concat(stringifyPrimitive(issue.values[0]));
          return "Ge\xE7ersiz se\xE7enek: a\u015Fa\u011F\u0131dakilerden biri olmal\u0131: ".concat(joinValues(issue.values, "|"));
        case "too_big":
          {
            var _issue$origin, _sizing$unit, _issue$origin2;
            var adj = issue.inclusive ? "<=" : "<";
            var sizing = getSizing(issue.origin);
            if (sizing) return "\xC7ok b\xFCy\xFCk: beklenen ".concat((_issue$origin = issue.origin) !== null && _issue$origin !== void 0 ? _issue$origin : "değer", " ").concat(adj).concat(issue.maximum.toString(), " ").concat((_sizing$unit = sizing.unit) !== null && _sizing$unit !== void 0 ? _sizing$unit : "öğe");
            return "\xC7ok b\xFCy\xFCk: beklenen ".concat((_issue$origin2 = issue.origin) !== null && _issue$origin2 !== void 0 ? _issue$origin2 : "değer", " ").concat(adj).concat(issue.maximum.toString());
          }
        case "too_small":
          {
            var _adj = issue.inclusive ? ">=" : ">";
            var _sizing = getSizing(issue.origin);
            if (_sizing) return "\xC7ok k\xFC\xE7\xFCk: beklenen ".concat(issue.origin, " ").concat(_adj).concat(issue.minimum.toString(), " ").concat(_sizing.unit);
            return "\xC7ok k\xFC\xE7\xFCk: beklenen ".concat(issue.origin, " ").concat(_adj).concat(issue.minimum.toString());
          }
        case "invalid_format":
          {
            var _Nouns$_issue$format;
            var _issue = issue;
            if (_issue.format === "starts_with") return "Ge\xE7ersiz metin: \"".concat(_issue.prefix, "\" ile ba\u015Flamal\u0131");
            if (_issue.format === "ends_with") return "Ge\xE7ersiz metin: \"".concat(_issue.suffix, "\" ile bitmeli");
            if (_issue.format === "includes") return "Ge\xE7ersiz metin: \"".concat(_issue.includes, "\" i\xE7ermeli");
            if (_issue.format === "regex") return "Ge\xE7ersiz metin: ".concat(_issue.pattern, " desenine uymal\u0131");
            return "Ge\xE7ersiz ".concat((_Nouns$_issue$format = Nouns[_issue.format]) !== null && _Nouns$_issue$format !== void 0 ? _Nouns$_issue$format : issue.format);
          }
        case "not_multiple_of":
          return "Ge\xE7ersiz say\u0131: ".concat(issue.divisor, " ile tam b\xF6l\xFCnebilmeli");
        case "unrecognized_keys":
          return "Tan\u0131nmayan anahtar".concat(issue.keys.length > 1 ? "lar" : "", ": ").concat(joinValues(issue.keys, ", "));
        case "invalid_key":
          return "".concat(issue.origin, " i\xE7inde ge\xE7ersiz anahtar");
        case "invalid_union":
          return "Geçersiz değer";
        case "invalid_element":
          return "".concat(issue.origin, " i\xE7inde ge\xE7ersiz de\u011Fer");
        default:
          return "Ge\xE7ersiz de\u011Fer";
      }
    };
  };
  function tr () {
    return {
      localeError: error$6()
    };
  }

  var error$5 = function error() {
    var Sizable = {
      string: {
        unit: "символів",
        verb: "матиме"
      },
      file: {
        unit: "байтів",
        verb: "матиме"
      },
      array: {
        unit: "елементів",
        verb: "матиме"
      },
      set: {
        unit: "елементів",
        verb: "матиме"
      }
    };
    function getSizing(origin) {
      var _Sizable$origin;
      return (_Sizable$origin = Sizable[origin]) !== null && _Sizable$origin !== void 0 ? _Sizable$origin : null;
    }
    var parsedType = function parsedType(data) {
      var t = _typeof(data);
      switch (t) {
        case "number":
          {
            return Number.isNaN(data) ? "NaN" : "число";
          }
        case "object":
          {
            if (Array.isArray(data)) {
              return "масив";
            }
            if (data === null) {
              return "null";
            }
            if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
              return data.constructor.name;
            }
          }
      }
      return t;
    };
    var Nouns = {
      regex: "вхідні дані",
      email: "адреса електронної пошти",
      url: "URL",
      emoji: "емодзі",
      uuid: "UUID",
      uuidv4: "UUIDv4",
      uuidv6: "UUIDv6",
      nanoid: "nanoid",
      guid: "GUID",
      cuid: "cuid",
      cuid2: "cuid2",
      ulid: "ULID",
      xid: "XID",
      ksuid: "KSUID",
      datetime: "дата та час ISO",
      date: "дата ISO",
      time: "час ISO",
      duration: "тривалість ISO",
      ipv4: "адреса IPv4",
      ipv6: "адреса IPv6",
      cidrv4: "діапазон IPv4",
      cidrv6: "діапазон IPv6",
      base64: "рядок у кодуванні base64",
      base64url: "рядок у кодуванні base64url",
      json_string: "рядок JSON",
      e164: "номер E.164",
      jwt: "JWT",
      template_literal: "вхідні дані"
    };
    return function (issue) {
      switch (issue.code) {
        case "invalid_type":
          return "\u041D\u0435\u043F\u0440\u0430\u0432\u0438\u043B\u044C\u043D\u0456 \u0432\u0445\u0456\u0434\u043D\u0456 \u0434\u0430\u043D\u0456: \u043E\u0447\u0456\u043A\u0443\u0454\u0442\u044C\u0441\u044F ".concat(issue.expected, ", \u043E\u0442\u0440\u0438\u043C\u0430\u043D\u043E ").concat(parsedType(issue.input));
        // return `Неправильні вхідні дані: очікується ${issue.expected}, отримано ${util.getParsedType(issue.input)}`;
        case "invalid_value":
          if (issue.values.length === 1) return "\u041D\u0435\u043F\u0440\u0430\u0432\u0438\u043B\u044C\u043D\u0456 \u0432\u0445\u0456\u0434\u043D\u0456 \u0434\u0430\u043D\u0456: \u043E\u0447\u0456\u043A\u0443\u0454\u0442\u044C\u0441\u044F ".concat(stringifyPrimitive(issue.values[0]));
          return "\u041D\u0435\u043F\u0440\u0430\u0432\u0438\u043B\u044C\u043D\u0430 \u043E\u043F\u0446\u0456\u044F: \u043E\u0447\u0456\u043A\u0443\u0454\u0442\u044C\u0441\u044F \u043E\u0434\u043D\u0435 \u0437 ".concat(joinValues(issue.values, "|"));
        case "too_big":
          {
            var _issue$origin, _sizing$unit, _issue$origin2;
            var adj = issue.inclusive ? "<=" : "<";
            var sizing = getSizing(issue.origin);
            if (sizing) return "\u0417\u0430\u043D\u0430\u0434\u0442\u043E \u0432\u0435\u043B\u0438\u043A\u0435: \u043E\u0447\u0456\u043A\u0443\u0454\u0442\u044C\u0441\u044F, \u0449\u043E ".concat((_issue$origin = issue.origin) !== null && _issue$origin !== void 0 ? _issue$origin : "значення", " ").concat(sizing.verb, " ").concat(adj).concat(issue.maximum.toString(), " ").concat((_sizing$unit = sizing.unit) !== null && _sizing$unit !== void 0 ? _sizing$unit : "елементів");
            return "\u0417\u0430\u043D\u0430\u0434\u0442\u043E \u0432\u0435\u043B\u0438\u043A\u0435: \u043E\u0447\u0456\u043A\u0443\u0454\u0442\u044C\u0441\u044F, \u0449\u043E ".concat((_issue$origin2 = issue.origin) !== null && _issue$origin2 !== void 0 ? _issue$origin2 : "значення", " \u0431\u0443\u0434\u0435 ").concat(adj).concat(issue.maximum.toString());
          }
        case "too_small":
          {
            var _adj = issue.inclusive ? ">=" : ">";
            var _sizing = getSizing(issue.origin);
            if (_sizing) {
              return "\u0417\u0430\u043D\u0430\u0434\u0442\u043E \u043C\u0430\u043B\u0435: \u043E\u0447\u0456\u043A\u0443\u0454\u0442\u044C\u0441\u044F, \u0449\u043E ".concat(issue.origin, " ").concat(_sizing.verb, " ").concat(_adj).concat(issue.minimum.toString(), " ").concat(_sizing.unit);
            }
            return "\u0417\u0430\u043D\u0430\u0434\u0442\u043E \u043C\u0430\u043B\u0435: \u043E\u0447\u0456\u043A\u0443\u0454\u0442\u044C\u0441\u044F, \u0449\u043E ".concat(issue.origin, " \u0431\u0443\u0434\u0435 ").concat(_adj).concat(issue.minimum.toString());
          }
        case "invalid_format":
          {
            var _Nouns$_issue$format;
            var _issue = issue;
            if (_issue.format === "starts_with") return "\u041D\u0435\u043F\u0440\u0430\u0432\u0438\u043B\u044C\u043D\u0438\u0439 \u0440\u044F\u0434\u043E\u043A: \u043F\u043E\u0432\u0438\u043D\u0435\u043D \u043F\u043E\u0447\u0438\u043D\u0430\u0442\u0438\u0441\u044F \u0437 \"".concat(_issue.prefix, "\"");
            if (_issue.format === "ends_with") return "\u041D\u0435\u043F\u0440\u0430\u0432\u0438\u043B\u044C\u043D\u0438\u0439 \u0440\u044F\u0434\u043E\u043A: \u043F\u043E\u0432\u0438\u043D\u0435\u043D \u0437\u0430\u043A\u0456\u043D\u0447\u0443\u0432\u0430\u0442\u0438\u0441\u044F \u043D\u0430 \"".concat(_issue.suffix, "\"");
            if (_issue.format === "includes") return "\u041D\u0435\u043F\u0440\u0430\u0432\u0438\u043B\u044C\u043D\u0438\u0439 \u0440\u044F\u0434\u043E\u043A: \u043F\u043E\u0432\u0438\u043D\u0435\u043D \u043C\u0456\u0441\u0442\u0438\u0442\u0438 \"".concat(_issue.includes, "\"");
            if (_issue.format === "regex") return "\u041D\u0435\u043F\u0440\u0430\u0432\u0438\u043B\u044C\u043D\u0438\u0439 \u0440\u044F\u0434\u043E\u043A: \u043F\u043E\u0432\u0438\u043D\u0435\u043D \u0432\u0456\u0434\u043F\u043E\u0432\u0456\u0434\u0430\u0442\u0438 \u0448\u0430\u0431\u043B\u043E\u043D\u0443 ".concat(_issue.pattern);
            return "\u041D\u0435\u043F\u0440\u0430\u0432\u0438\u043B\u044C\u043D\u0438\u0439 ".concat((_Nouns$_issue$format = Nouns[_issue.format]) !== null && _Nouns$_issue$format !== void 0 ? _Nouns$_issue$format : issue.format);
          }
        case "not_multiple_of":
          return "\u041D\u0435\u043F\u0440\u0430\u0432\u0438\u043B\u044C\u043D\u0435 \u0447\u0438\u0441\u043B\u043E: \u043F\u043E\u0432\u0438\u043D\u043D\u043E \u0431\u0443\u0442\u0438 \u043A\u0440\u0430\u0442\u043D\u0438\u043C ".concat(issue.divisor);
        case "unrecognized_keys":
          return "\u041D\u0435\u0440\u043E\u0437\u043F\u0456\u0437\u043D\u0430\u043D\u0438\u0439 \u043A\u043B\u044E\u0447".concat(issue.keys.length > 1 ? "і" : "", ": ").concat(joinValues(issue.keys, ", "));
        case "invalid_key":
          return "\u041D\u0435\u043F\u0440\u0430\u0432\u0438\u043B\u044C\u043D\u0438\u0439 \u043A\u043B\u044E\u0447 \u0443 ".concat(issue.origin);
        case "invalid_union":
          return "Неправильні вхідні дані";
        case "invalid_element":
          return "\u041D\u0435\u043F\u0440\u0430\u0432\u0438\u043B\u044C\u043D\u0435 \u0437\u043D\u0430\u0447\u0435\u043D\u043D\u044F \u0443 ".concat(issue.origin);
        default:
          return "\u041D\u0435\u043F\u0440\u0430\u0432\u0438\u043B\u044C\u043D\u0456 \u0432\u0445\u0456\u0434\u043D\u0456 \u0434\u0430\u043D\u0456";
      }
    };
  };
  function uk () {
    return {
      localeError: error$5()
    };
  }

  /** @deprecated Use `uk` instead. */
  function ua () {
    return uk();
  }

  var error$4 = function error() {
    var Sizable = {
      string: {
        unit: "حروف",
        verb: "ہونا"
      },
      file: {
        unit: "بائٹس",
        verb: "ہونا"
      },
      array: {
        unit: "آئٹمز",
        verb: "ہونا"
      },
      set: {
        unit: "آئٹمز",
        verb: "ہونا"
      }
    };
    function getSizing(origin) {
      var _Sizable$origin;
      return (_Sizable$origin = Sizable[origin]) !== null && _Sizable$origin !== void 0 ? _Sizable$origin : null;
    }
    var parsedType = function parsedType(data) {
      var t = _typeof(data);
      switch (t) {
        case "number":
          {
            return Number.isNaN(data) ? "NaN" : "نمبر";
          }
        case "object":
          {
            if (Array.isArray(data)) {
              return "آرے";
            }
            if (data === null) {
              return "نل";
            }
            if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
              return data.constructor.name;
            }
          }
      }
      return t;
    };
    var Nouns = {
      regex: "ان پٹ",
      email: "ای میل ایڈریس",
      url: "یو آر ایل",
      emoji: "ایموجی",
      uuid: "یو یو آئی ڈی",
      uuidv4: "یو یو آئی ڈی وی 4",
      uuidv6: "یو یو آئی ڈی وی 6",
      nanoid: "نینو آئی ڈی",
      guid: "جی یو آئی ڈی",
      cuid: "سی یو آئی ڈی",
      cuid2: "سی یو آئی ڈی 2",
      ulid: "یو ایل آئی ڈی",
      xid: "ایکس آئی ڈی",
      ksuid: "کے ایس یو آئی ڈی",
      datetime: "آئی ایس او ڈیٹ ٹائم",
      date: "آئی ایس او تاریخ",
      time: "آئی ایس او وقت",
      duration: "آئی ایس او مدت",
      ipv4: "آئی پی وی 4 ایڈریس",
      ipv6: "آئی پی وی 6 ایڈریس",
      cidrv4: "آئی پی وی 4 رینج",
      cidrv6: "آئی پی وی 6 رینج",
      base64: "بیس 64 ان کوڈڈ سٹرنگ",
      base64url: "بیس 64 یو آر ایل ان کوڈڈ سٹرنگ",
      json_string: "جے ایس او این سٹرنگ",
      e164: "ای 164 نمبر",
      jwt: "جے ڈبلیو ٹی",
      template_literal: "ان پٹ"
    };
    return function (issue) {
      switch (issue.code) {
        case "invalid_type":
          return "\u063A\u0644\u0637 \u0627\u0646 \u067E\u0679: ".concat(issue.expected, " \u0645\u062A\u0648\u0642\u0639 \u062A\u06BE\u0627\u060C ").concat(parsedType(issue.input), " \u0645\u0648\u0635\u0648\u0644 \u06C1\u0648\u0627");
        case "invalid_value":
          if (issue.values.length === 1) return "\u063A\u0644\u0637 \u0627\u0646 \u067E\u0679: ".concat(stringifyPrimitive(issue.values[0]), " \u0645\u062A\u0648\u0642\u0639 \u062A\u06BE\u0627");
          return "\u063A\u0644\u0637 \u0622\u067E\u0634\u0646: ".concat(joinValues(issue.values, "|"), " \u0645\u06CC\u06BA \u0633\u06D2 \u0627\u06CC\u06A9 \u0645\u062A\u0648\u0642\u0639 \u062A\u06BE\u0627");
        case "too_big":
          {
            var _issue$origin, _sizing$unit, _issue$origin2;
            var adj = issue.inclusive ? "<=" : "<";
            var sizing = getSizing(issue.origin);
            if (sizing) return "\u0628\u06C1\u062A \u0628\u0691\u0627: ".concat((_issue$origin = issue.origin) !== null && _issue$origin !== void 0 ? _issue$origin : "ویلیو", " \u06A9\u06D2 ").concat(adj).concat(issue.maximum.toString(), " ").concat((_sizing$unit = sizing.unit) !== null && _sizing$unit !== void 0 ? _sizing$unit : "عناصر", " \u06C1\u0648\u0646\u06D2 \u0645\u062A\u0648\u0642\u0639 \u062A\u06BE\u06D2");
            return "\u0628\u06C1\u062A \u0628\u0691\u0627: ".concat((_issue$origin2 = issue.origin) !== null && _issue$origin2 !== void 0 ? _issue$origin2 : "ویلیو", " \u06A9\u0627 ").concat(adj).concat(issue.maximum.toString(), " \u06C1\u0648\u0646\u0627 \u0645\u062A\u0648\u0642\u0639 \u062A\u06BE\u0627");
          }
        case "too_small":
          {
            var _adj = issue.inclusive ? ">=" : ">";
            var _sizing = getSizing(issue.origin);
            if (_sizing) {
              return "\u0628\u06C1\u062A \u0686\u06BE\u0648\u0679\u0627: ".concat(issue.origin, " \u06A9\u06D2 ").concat(_adj).concat(issue.minimum.toString(), " ").concat(_sizing.unit, " \u06C1\u0648\u0646\u06D2 \u0645\u062A\u0648\u0642\u0639 \u062A\u06BE\u06D2");
            }
            return "\u0628\u06C1\u062A \u0686\u06BE\u0648\u0679\u0627: ".concat(issue.origin, " \u06A9\u0627 ").concat(_adj).concat(issue.minimum.toString(), " \u06C1\u0648\u0646\u0627 \u0645\u062A\u0648\u0642\u0639 \u062A\u06BE\u0627");
          }
        case "invalid_format":
          {
            var _Nouns$_issue$format;
            var _issue = issue;
            if (_issue.format === "starts_with") {
              return "\u063A\u0644\u0637 \u0633\u0679\u0631\u0646\u06AF: \"".concat(_issue.prefix, "\" \u0633\u06D2 \u0634\u0631\u0648\u0639 \u06C1\u0648\u0646\u0627 \u0686\u0627\u06C1\u06CC\u06D2");
            }
            if (_issue.format === "ends_with") return "\u063A\u0644\u0637 \u0633\u0679\u0631\u0646\u06AF: \"".concat(_issue.suffix, "\" \u067E\u0631 \u062E\u062A\u0645 \u06C1\u0648\u0646\u0627 \u0686\u0627\u06C1\u06CC\u06D2");
            if (_issue.format === "includes") return "\u063A\u0644\u0637 \u0633\u0679\u0631\u0646\u06AF: \"".concat(_issue.includes, "\" \u0634\u0627\u0645\u0644 \u06C1\u0648\u0646\u0627 \u0686\u0627\u06C1\u06CC\u06D2");
            if (_issue.format === "regex") return "\u063A\u0644\u0637 \u0633\u0679\u0631\u0646\u06AF: \u067E\u06CC\u0679\u0631\u0646 ".concat(_issue.pattern, " \u0633\u06D2 \u0645\u06CC\u0686 \u06C1\u0648\u0646\u0627 \u0686\u0627\u06C1\u06CC\u06D2");
            return "\u063A\u0644\u0637 ".concat((_Nouns$_issue$format = Nouns[_issue.format]) !== null && _Nouns$_issue$format !== void 0 ? _Nouns$_issue$format : issue.format);
          }
        case "not_multiple_of":
          return "\u063A\u0644\u0637 \u0646\u0645\u0628\u0631: ".concat(issue.divisor, " \u06A9\u0627 \u0645\u0636\u0627\u0639\u0641 \u06C1\u0648\u0646\u0627 \u0686\u0627\u06C1\u06CC\u06D2");
        case "unrecognized_keys":
          return "\u063A\u06CC\u0631 \u062A\u0633\u0644\u06CC\u0645 \u0634\u062F\u06C1 \u06A9\u06CC".concat(issue.keys.length > 1 ? "ز" : "", ": ").concat(joinValues(issue.keys, "، "));
        case "invalid_key":
          return "".concat(issue.origin, " \u0645\u06CC\u06BA \u063A\u0644\u0637 \u06A9\u06CC");
        case "invalid_union":
          return "غلط ان پٹ";
        case "invalid_element":
          return "".concat(issue.origin, " \u0645\u06CC\u06BA \u063A\u0644\u0637 \u0648\u06CC\u0644\u06CC\u0648");
        default:
          return "\u063A\u0644\u0637 \u0627\u0646 \u067E\u0679";
      }
    };
  };
  function ur () {
    return {
      localeError: error$4()
    };
  }

  var error$3 = function error() {
    var Sizable = {
      string: {
        unit: "ký tự",
        verb: "có"
      },
      file: {
        unit: "byte",
        verb: "có"
      },
      array: {
        unit: "phần tử",
        verb: "có"
      },
      set: {
        unit: "phần tử",
        verb: "có"
      }
    };
    function getSizing(origin) {
      var _Sizable$origin;
      return (_Sizable$origin = Sizable[origin]) !== null && _Sizable$origin !== void 0 ? _Sizable$origin : null;
    }
    var parsedType = function parsedType(data) {
      var t = _typeof(data);
      switch (t) {
        case "number":
          {
            return Number.isNaN(data) ? "NaN" : "số";
          }
        case "object":
          {
            if (Array.isArray(data)) {
              return "mảng";
            }
            if (data === null) {
              return "null";
            }
            if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
              return data.constructor.name;
            }
          }
      }
      return t;
    };
    var Nouns = {
      regex: "đầu vào",
      email: "địa chỉ email",
      url: "URL",
      emoji: "emoji",
      uuid: "UUID",
      uuidv4: "UUIDv4",
      uuidv6: "UUIDv6",
      nanoid: "nanoid",
      guid: "GUID",
      cuid: "cuid",
      cuid2: "cuid2",
      ulid: "ULID",
      xid: "XID",
      ksuid: "KSUID",
      datetime: "ngày giờ ISO",
      date: "ngày ISO",
      time: "giờ ISO",
      duration: "khoảng thời gian ISO",
      ipv4: "địa chỉ IPv4",
      ipv6: "địa chỉ IPv6",
      cidrv4: "dải IPv4",
      cidrv6: "dải IPv6",
      base64: "chuỗi mã hóa base64",
      base64url: "chuỗi mã hóa base64url",
      json_string: "chuỗi JSON",
      e164: "số E.164",
      jwt: "JWT",
      template_literal: "đầu vào"
    };
    return function (issue) {
      switch (issue.code) {
        case "invalid_type":
          return "\u0110\u1EA7u v\xE0o kh\xF4ng h\u1EE3p l\u1EC7: mong \u0111\u1EE3i ".concat(issue.expected, ", nh\u1EADn \u0111\u01B0\u1EE3c ").concat(parsedType(issue.input));
        case "invalid_value":
          if (issue.values.length === 1) return "\u0110\u1EA7u v\xE0o kh\xF4ng h\u1EE3p l\u1EC7: mong \u0111\u1EE3i ".concat(stringifyPrimitive(issue.values[0]));
          return "T\xF9y ch\u1ECDn kh\xF4ng h\u1EE3p l\u1EC7: mong \u0111\u1EE3i m\u1ED9t trong c\xE1c gi\xE1 tr\u1ECB ".concat(joinValues(issue.values, "|"));
        case "too_big":
          {
            var _issue$origin, _sizing$unit, _issue$origin2;
            var adj = issue.inclusive ? "<=" : "<";
            var sizing = getSizing(issue.origin);
            if (sizing) return "Qu\xE1 l\u1EDBn: mong \u0111\u1EE3i ".concat((_issue$origin = issue.origin) !== null && _issue$origin !== void 0 ? _issue$origin : "giá trị", " ").concat(sizing.verb, " ").concat(adj).concat(issue.maximum.toString(), " ").concat((_sizing$unit = sizing.unit) !== null && _sizing$unit !== void 0 ? _sizing$unit : "phần tử");
            return "Qu\xE1 l\u1EDBn: mong \u0111\u1EE3i ".concat((_issue$origin2 = issue.origin) !== null && _issue$origin2 !== void 0 ? _issue$origin2 : "giá trị", " ").concat(adj).concat(issue.maximum.toString());
          }
        case "too_small":
          {
            var _adj = issue.inclusive ? ">=" : ">";
            var _sizing = getSizing(issue.origin);
            if (_sizing) {
              return "Qu\xE1 nh\u1ECF: mong \u0111\u1EE3i ".concat(issue.origin, " ").concat(_sizing.verb, " ").concat(_adj).concat(issue.minimum.toString(), " ").concat(_sizing.unit);
            }
            return "Qu\xE1 nh\u1ECF: mong \u0111\u1EE3i ".concat(issue.origin, " ").concat(_adj).concat(issue.minimum.toString());
          }
        case "invalid_format":
          {
            var _Nouns$_issue$format;
            var _issue = issue;
            if (_issue.format === "starts_with") return "Chu\u1ED7i kh\xF4ng h\u1EE3p l\u1EC7: ph\u1EA3i b\u1EAFt \u0111\u1EA7u b\u1EB1ng \"".concat(_issue.prefix, "\"");
            if (_issue.format === "ends_with") return "Chu\u1ED7i kh\xF4ng h\u1EE3p l\u1EC7: ph\u1EA3i k\u1EBFt th\xFAc b\u1EB1ng \"".concat(_issue.suffix, "\"");
            if (_issue.format === "includes") return "Chu\u1ED7i kh\xF4ng h\u1EE3p l\u1EC7: ph\u1EA3i bao g\u1ED3m \"".concat(_issue.includes, "\"");
            if (_issue.format === "regex") return "Chu\u1ED7i kh\xF4ng h\u1EE3p l\u1EC7: ph\u1EA3i kh\u1EDBp v\u1EDBi m\u1EABu ".concat(_issue.pattern);
            return "".concat((_Nouns$_issue$format = Nouns[_issue.format]) !== null && _Nouns$_issue$format !== void 0 ? _Nouns$_issue$format : issue.format, " kh\xF4ng h\u1EE3p l\u1EC7");
          }
        case "not_multiple_of":
          return "S\u1ED1 kh\xF4ng h\u1EE3p l\u1EC7: ph\u1EA3i l\xE0 b\u1ED9i s\u1ED1 c\u1EE7a ".concat(issue.divisor);
        case "unrecognized_keys":
          return "Kh\xF3a kh\xF4ng \u0111\u01B0\u1EE3c nh\u1EADn d\u1EA1ng: ".concat(joinValues(issue.keys, ", "));
        case "invalid_key":
          return "Kh\xF3a kh\xF4ng h\u1EE3p l\u1EC7 trong ".concat(issue.origin);
        case "invalid_union":
          return "Đầu vào không hợp lệ";
        case "invalid_element":
          return "Gi\xE1 tr\u1ECB kh\xF4ng h\u1EE3p l\u1EC7 trong ".concat(issue.origin);
        default:
          return "\u0110\u1EA7u v\xE0o kh\xF4ng h\u1EE3p l\u1EC7";
      }
    };
  };
  function vi () {
    return {
      localeError: error$3()
    };
  }

  var error$2 = function error() {
    var Sizable = {
      string: {
        unit: "字符",
        verb: "包含"
      },
      file: {
        unit: "字节",
        verb: "包含"
      },
      array: {
        unit: "项",
        verb: "包含"
      },
      set: {
        unit: "项",
        verb: "包含"
      }
    };
    function getSizing(origin) {
      var _Sizable$origin;
      return (_Sizable$origin = Sizable[origin]) !== null && _Sizable$origin !== void 0 ? _Sizable$origin : null;
    }
    var parsedType = function parsedType(data) {
      var t = _typeof(data);
      switch (t) {
        case "number":
          {
            return Number.isNaN(data) ? "非数字(NaN)" : "数字";
          }
        case "object":
          {
            if (Array.isArray(data)) {
              return "数组";
            }
            if (data === null) {
              return "空值(null)";
            }
            if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
              return data.constructor.name;
            }
          }
      }
      return t;
    };
    var Nouns = {
      regex: "输入",
      email: "电子邮件",
      url: "URL",
      emoji: "表情符号",
      uuid: "UUID",
      uuidv4: "UUIDv4",
      uuidv6: "UUIDv6",
      nanoid: "nanoid",
      guid: "GUID",
      cuid: "cuid",
      cuid2: "cuid2",
      ulid: "ULID",
      xid: "XID",
      ksuid: "KSUID",
      datetime: "ISO日期时间",
      date: "ISO日期",
      time: "ISO时间",
      duration: "ISO时长",
      ipv4: "IPv4地址",
      ipv6: "IPv6地址",
      cidrv4: "IPv4网段",
      cidrv6: "IPv6网段",
      base64: "base64编码字符串",
      base64url: "base64url编码字符串",
      json_string: "JSON字符串",
      e164: "E.164号码",
      jwt: "JWT",
      template_literal: "输入"
    };
    return function (issue) {
      switch (issue.code) {
        case "invalid_type":
          return "\u65E0\u6548\u8F93\u5165\uFF1A\u671F\u671B ".concat(issue.expected, "\uFF0C\u5B9E\u9645\u63A5\u6536 ").concat(parsedType(issue.input));
        case "invalid_value":
          if (issue.values.length === 1) return "\u65E0\u6548\u8F93\u5165\uFF1A\u671F\u671B ".concat(stringifyPrimitive(issue.values[0]));
          return "\u65E0\u6548\u9009\u9879\uFF1A\u671F\u671B\u4EE5\u4E0B\u4E4B\u4E00 ".concat(joinValues(issue.values, "|"));
        case "too_big":
          {
            var _issue$origin, _sizing$unit, _issue$origin2;
            var adj = issue.inclusive ? "<=" : "<";
            var sizing = getSizing(issue.origin);
            if (sizing) return "\u6570\u503C\u8FC7\u5927\uFF1A\u671F\u671B ".concat((_issue$origin = issue.origin) !== null && _issue$origin !== void 0 ? _issue$origin : "值", " ").concat(adj).concat(issue.maximum.toString(), " ").concat((_sizing$unit = sizing.unit) !== null && _sizing$unit !== void 0 ? _sizing$unit : "个元素");
            return "\u6570\u503C\u8FC7\u5927\uFF1A\u671F\u671B ".concat((_issue$origin2 = issue.origin) !== null && _issue$origin2 !== void 0 ? _issue$origin2 : "值", " ").concat(adj).concat(issue.maximum.toString());
          }
        case "too_small":
          {
            var _adj = issue.inclusive ? ">=" : ">";
            var _sizing = getSizing(issue.origin);
            if (_sizing) {
              return "\u6570\u503C\u8FC7\u5C0F\uFF1A\u671F\u671B ".concat(issue.origin, " ").concat(_adj).concat(issue.minimum.toString(), " ").concat(_sizing.unit);
            }
            return "\u6570\u503C\u8FC7\u5C0F\uFF1A\u671F\u671B ".concat(issue.origin, " ").concat(_adj).concat(issue.minimum.toString());
          }
        case "invalid_format":
          {
            var _Nouns$_issue$format;
            var _issue = issue;
            if (_issue.format === "starts_with") return "\u65E0\u6548\u5B57\u7B26\u4E32\uFF1A\u5FC5\u987B\u4EE5 \"".concat(_issue.prefix, "\" \u5F00\u5934");
            if (_issue.format === "ends_with") return "\u65E0\u6548\u5B57\u7B26\u4E32\uFF1A\u5FC5\u987B\u4EE5 \"".concat(_issue.suffix, "\" \u7ED3\u5C3E");
            if (_issue.format === "includes") return "\u65E0\u6548\u5B57\u7B26\u4E32\uFF1A\u5FC5\u987B\u5305\u542B \"".concat(_issue.includes, "\"");
            if (_issue.format === "regex") return "\u65E0\u6548\u5B57\u7B26\u4E32\uFF1A\u5FC5\u987B\u6EE1\u8DB3\u6B63\u5219\u8868\u8FBE\u5F0F ".concat(_issue.pattern);
            return "\u65E0\u6548".concat((_Nouns$_issue$format = Nouns[_issue.format]) !== null && _Nouns$_issue$format !== void 0 ? _Nouns$_issue$format : issue.format);
          }
        case "not_multiple_of":
          return "\u65E0\u6548\u6570\u5B57\uFF1A\u5FC5\u987B\u662F ".concat(issue.divisor, " \u7684\u500D\u6570");
        case "unrecognized_keys":
          return "\u51FA\u73B0\u672A\u77E5\u7684\u952E(key): ".concat(joinValues(issue.keys, ", "));
        case "invalid_key":
          return "".concat(issue.origin, " \u4E2D\u7684\u952E(key)\u65E0\u6548");
        case "invalid_union":
          return "无效输入";
        case "invalid_element":
          return "".concat(issue.origin, " \u4E2D\u5305\u542B\u65E0\u6548\u503C(value)");
        default:
          return "\u65E0\u6548\u8F93\u5165";
      }
    };
  };
  function zhCN () {
    return {
      localeError: error$2()
    };
  }

  var error$1 = function error() {
    var Sizable = {
      string: {
        unit: "字元",
        verb: "擁有"
      },
      file: {
        unit: "位元組",
        verb: "擁有"
      },
      array: {
        unit: "項目",
        verb: "擁有"
      },
      set: {
        unit: "項目",
        verb: "擁有"
      }
    };
    function getSizing(origin) {
      var _Sizable$origin;
      return (_Sizable$origin = Sizable[origin]) !== null && _Sizable$origin !== void 0 ? _Sizable$origin : null;
    }
    var parsedType = function parsedType(data) {
      var t = _typeof(data);
      switch (t) {
        case "number":
          {
            return Number.isNaN(data) ? "NaN" : "number";
          }
        case "object":
          {
            if (Array.isArray(data)) {
              return "array";
            }
            if (data === null) {
              return "null";
            }
            if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
              return data.constructor.name;
            }
          }
      }
      return t;
    };
    var Nouns = {
      regex: "輸入",
      email: "郵件地址",
      url: "URL",
      emoji: "emoji",
      uuid: "UUID",
      uuidv4: "UUIDv4",
      uuidv6: "UUIDv6",
      nanoid: "nanoid",
      guid: "GUID",
      cuid: "cuid",
      cuid2: "cuid2",
      ulid: "ULID",
      xid: "XID",
      ksuid: "KSUID",
      datetime: "ISO 日期時間",
      date: "ISO 日期",
      time: "ISO 時間",
      duration: "ISO 期間",
      ipv4: "IPv4 位址",
      ipv6: "IPv6 位址",
      cidrv4: "IPv4 範圍",
      cidrv6: "IPv6 範圍",
      base64: "base64 編碼字串",
      base64url: "base64url 編碼字串",
      json_string: "JSON 字串",
      e164: "E.164 數值",
      jwt: "JWT",
      template_literal: "輸入"
    };
    return function (issue) {
      switch (issue.code) {
        case "invalid_type":
          return "\u7121\u6548\u7684\u8F38\u5165\u503C\uFF1A\u9810\u671F\u70BA ".concat(issue.expected, "\uFF0C\u4F46\u6536\u5230 ").concat(parsedType(issue.input));
        case "invalid_value":
          if (issue.values.length === 1) return "\u7121\u6548\u7684\u8F38\u5165\u503C\uFF1A\u9810\u671F\u70BA ".concat(stringifyPrimitive(issue.values[0]));
          return "\u7121\u6548\u7684\u9078\u9805\uFF1A\u9810\u671F\u70BA\u4EE5\u4E0B\u5176\u4E2D\u4E4B\u4E00 ".concat(joinValues(issue.values, "|"));
        case "too_big":
          {
            var _issue$origin, _sizing$unit, _issue$origin2;
            var adj = issue.inclusive ? "<=" : "<";
            var sizing = getSizing(issue.origin);
            if (sizing) return "\u6578\u503C\u904E\u5927\uFF1A\u9810\u671F ".concat((_issue$origin = issue.origin) !== null && _issue$origin !== void 0 ? _issue$origin : "值", " \u61C9\u70BA ").concat(adj).concat(issue.maximum.toString(), " ").concat((_sizing$unit = sizing.unit) !== null && _sizing$unit !== void 0 ? _sizing$unit : "個元素");
            return "\u6578\u503C\u904E\u5927\uFF1A\u9810\u671F ".concat((_issue$origin2 = issue.origin) !== null && _issue$origin2 !== void 0 ? _issue$origin2 : "值", " \u61C9\u70BA ").concat(adj).concat(issue.maximum.toString());
          }
        case "too_small":
          {
            var _adj = issue.inclusive ? ">=" : ">";
            var _sizing = getSizing(issue.origin);
            if (_sizing) {
              return "\u6578\u503C\u904E\u5C0F\uFF1A\u9810\u671F ".concat(issue.origin, " \u61C9\u70BA ").concat(_adj).concat(issue.minimum.toString(), " ").concat(_sizing.unit);
            }
            return "\u6578\u503C\u904E\u5C0F\uFF1A\u9810\u671F ".concat(issue.origin, " \u61C9\u70BA ").concat(_adj).concat(issue.minimum.toString());
          }
        case "invalid_format":
          {
            var _Nouns$_issue$format;
            var _issue = issue;
            if (_issue.format === "starts_with") {
              return "\u7121\u6548\u7684\u5B57\u4E32\uFF1A\u5FC5\u9808\u4EE5 \"".concat(_issue.prefix, "\" \u958B\u982D");
            }
            if (_issue.format === "ends_with") return "\u7121\u6548\u7684\u5B57\u4E32\uFF1A\u5FC5\u9808\u4EE5 \"".concat(_issue.suffix, "\" \u7D50\u5C3E");
            if (_issue.format === "includes") return "\u7121\u6548\u7684\u5B57\u4E32\uFF1A\u5FC5\u9808\u5305\u542B \"".concat(_issue.includes, "\"");
            if (_issue.format === "regex") return "\u7121\u6548\u7684\u5B57\u4E32\uFF1A\u5FC5\u9808\u7B26\u5408\u683C\u5F0F ".concat(_issue.pattern);
            return "\u7121\u6548\u7684 ".concat((_Nouns$_issue$format = Nouns[_issue.format]) !== null && _Nouns$_issue$format !== void 0 ? _Nouns$_issue$format : issue.format);
          }
        case "not_multiple_of":
          return "\u7121\u6548\u7684\u6578\u5B57\uFF1A\u5FC5\u9808\u70BA ".concat(issue.divisor, " \u7684\u500D\u6578");
        case "unrecognized_keys":
          return "\u7121\u6CD5\u8B58\u5225\u7684\u9375\u503C".concat(issue.keys.length > 1 ? "們" : "", "\uFF1A").concat(joinValues(issue.keys, "、"));
        case "invalid_key":
          return "".concat(issue.origin, " \u4E2D\u6709\u7121\u6548\u7684\u9375\u503C");
        case "invalid_union":
          return "無效的輸入值";
        case "invalid_element":
          return "".concat(issue.origin, " \u4E2D\u6709\u7121\u6548\u7684\u503C");
        default:
          return "\u7121\u6548\u7684\u8F38\u5165\u503C";
      }
    };
  };
  function zhTW () {
    return {
      localeError: error$1()
    };
  }

  var error = function error() {
    var Sizable = {
      string: {
        unit: "àmi",
        verb: "ní"
      },
      file: {
        unit: "bytes",
        verb: "ní"
      },
      array: {
        unit: "nkan",
        verb: "ní"
      },
      set: {
        unit: "nkan",
        verb: "ní"
      }
    };
    function getSizing(origin) {
      var _Sizable$origin;
      return (_Sizable$origin = Sizable[origin]) !== null && _Sizable$origin !== void 0 ? _Sizable$origin : null;
    }
    var parsedType = function parsedType(data) {
      var t = _typeof(data);
      switch (t) {
        case "number":
          {
            return Number.isNaN(data) ? "NaN" : "nọ́mbà";
          }
        case "object":
          {
            if (Array.isArray(data)) {
              return "akopọ";
            }
            if (data === null) {
              return "null";
            }
            if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
              return data.constructor.name;
            }
          }
      }
      return t;
    };
    var Nouns = {
      regex: "ẹ̀rọ ìbáwọlé",
      email: "àdírẹ́sì ìmẹ́lì",
      url: "URL",
      emoji: "emoji",
      uuid: "UUID",
      uuidv4: "UUIDv4",
      uuidv6: "UUIDv6",
      nanoid: "nanoid",
      guid: "GUID",
      cuid: "cuid",
      cuid2: "cuid2",
      ulid: "ULID",
      xid: "XID",
      ksuid: "KSUID",
      datetime: "àkókò ISO",
      date: "ọjọ́ ISO",
      time: "àkókò ISO",
      duration: "àkókò tó pé ISO",
      ipv4: "àdírẹ́sì IPv4",
      ipv6: "àdírẹ́sì IPv6",
      cidrv4: "àgbègbè IPv4",
      cidrv6: "àgbègbè IPv6",
      base64: "ọ̀rọ̀ tí a kọ́ ní base64",
      base64url: "ọ̀rọ̀ base64url",
      json_string: "ọ̀rọ̀ JSON",
      e164: "nọ́mbà E.164",
      jwt: "JWT",
      template_literal: "ẹ̀rọ ìbáwọlé"
    };
    return function (issue) {
      switch (issue.code) {
        case "invalid_type":
          return "\xCCb\xE1w\u1ECDl\xE9 a\u1E63\xEC\u1E63e: a n\xED l\xE1ti fi ".concat(issue.expected, ", \xE0m\u1ECD\u0300 a r\xED ").concat(parsedType(issue.input));
        case "invalid_value":
          if (issue.values.length === 1) return "\xCCb\xE1w\u1ECDl\xE9 a\u1E63\xEC\u1E63e: a n\xED l\xE1ti fi ".concat(stringifyPrimitive(issue.values[0]));
          return "\xC0\u1E63\xE0y\xE0n a\u1E63\xEC\u1E63e: yan \u1ECD\u0300kan l\xE1ra ".concat(joinValues(issue.values, "|"));
        case "too_big":
          {
            var _issue$origin;
            var adj = issue.inclusive ? "<=" : "<";
            var sizing = getSizing(issue.origin);
            if (sizing) return "T\xF3 p\u1ECD\u0300 j\xF9: a n\xED l\xE1ti j\u1EB9\u0301 p\xE9 ".concat((_issue$origin = issue.origin) !== null && _issue$origin !== void 0 ? _issue$origin : "iye", " ").concat(sizing.verb, " ").concat(adj).concat(issue.maximum, " ").concat(sizing.unit);
            return "T\xF3 p\u1ECD\u0300 j\xF9: a n\xED l\xE1ti j\u1EB9\u0301 ".concat(adj).concat(issue.maximum);
          }
        case "too_small":
          {
            var _adj = issue.inclusive ? ">=" : ">";
            var _sizing = getSizing(issue.origin);
            if (_sizing) return "K\xE9r\xE9 ju: a n\xED l\xE1ti j\u1EB9\u0301 p\xE9 ".concat(issue.origin, " ").concat(_sizing.verb, " ").concat(_adj).concat(issue.minimum, " ").concat(_sizing.unit);
            return "K\xE9r\xE9 ju: a n\xED l\xE1ti j\u1EB9\u0301 ".concat(_adj).concat(issue.minimum);
          }
        case "invalid_format":
          {
            var _Nouns$_issue$format;
            var _issue = issue;
            if (_issue.format === "starts_with") return "\u1ECC\u0300r\u1ECD\u0300 a\u1E63\xEC\u1E63e: gb\u1ECD\u0301d\u1ECD\u0300 b\u1EB9\u0300r\u1EB9\u0300 p\u1EB9\u0300l\xFA \"".concat(_issue.prefix, "\"");
            if (_issue.format === "ends_with") return "\u1ECC\u0300r\u1ECD\u0300 a\u1E63\xEC\u1E63e: gb\u1ECD\u0301d\u1ECD\u0300 par\xED p\u1EB9\u0300l\xFA \"".concat(_issue.suffix, "\"");
            if (_issue.format === "includes") return "\u1ECC\u0300r\u1ECD\u0300 a\u1E63\xEC\u1E63e: gb\u1ECD\u0301d\u1ECD\u0300 n\xED \"".concat(_issue.includes, "\"");
            if (_issue.format === "regex") return "\u1ECC\u0300r\u1ECD\u0300 a\u1E63\xEC\u1E63e: gb\u1ECD\u0301d\u1ECD\u0300 b\xE1 \xE0p\u1EB9\u1EB9r\u1EB9 mu ".concat(_issue.pattern);
            return "A\u1E63\xEC\u1E63e: ".concat((_Nouns$_issue$format = Nouns[_issue.format]) !== null && _Nouns$_issue$format !== void 0 ? _Nouns$_issue$format : issue.format);
          }
        case "not_multiple_of":
          return "N\u1ECD\u0301mb\xE0 a\u1E63\xEC\u1E63e: gb\u1ECD\u0301d\u1ECD\u0300 j\u1EB9\u0301 \xE8y\xE0 p\xEDp\xEDn ti ".concat(issue.divisor);
        case "unrecognized_keys":
          return "B\u1ECDt\xECn\xEC \xE0\xECm\u1ECD\u0300: ".concat(joinValues(issue.keys, ", "));
        case "invalid_key":
          return "B\u1ECDt\xECn\xEC a\u1E63\xEC\u1E63e n\xEDn\xFA ".concat(issue.origin);
        case "invalid_union":
          return "Ìbáwọlé aṣìṣe";
        case "invalid_element":
          return "Iye a\u1E63\xEC\u1E63e n\xEDn\xFA ".concat(issue.origin);
        default:
          return "Ìbáwọlé aṣìṣe";
      }
    };
  };
  function yo () {
    return {
      localeError: error()
    };
  }

  var index = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ar: ar,
    az: az,
    be: be,
    bg: bg,
    ca: ca,
    cs: cs,
    da: da,
    de: de,
    en: en,
    eo: eo,
    es: es,
    fa: fa,
    fi: fi,
    fr: fr,
    frCA: frCA,
    he: he,
    hu: hu,
    id: id,
    is: is,
    it: it,
    ja: ja,
    ka: ka,
    kh: kh,
    km: km,
    ko: ko,
    lt: lt,
    mk: mk,
    ms: ms,
    nl: nl,
    no: no,
    ota: ota,
    pl: pl,
    ps: ps,
    pt: pt,
    ru: ru,
    sl: sl,
    sv: sv,
    ta: ta,
    th: th,
    tr: tr,
    ua: ua,
    uk: uk,
    ur: ur,
    vi: vi,
    yo: yo,
    zhCN: zhCN,
    zhTW: zhTW
  });

  var $output = Symbol("ZodOutput");
  var $input = Symbol("ZodInput");
  var $ZodRegistry = /*#__PURE__*/function () {
    function $ZodRegistry() {
      _classCallCheck(this, $ZodRegistry);
      this._map = new WeakMap();
      this._idmap = new Map();
    }
    return _createClass($ZodRegistry, [{
      key: "add",
      value: function add(schema) {
        var meta = arguments.length <= 1 ? undefined : arguments[1];
        this._map.set(schema, meta);
        if (meta && _typeof(meta) === "object" && "id" in meta) {
          if (this._idmap.has(meta.id)) {
            throw new Error("ID ".concat(meta.id, " already exists in the registry"));
          }
          this._idmap.set(meta.id, schema);
        }
        return this;
      }
    }, {
      key: "clear",
      value: function clear() {
        this._map = new WeakMap();
        this._idmap = new Map();
        return this;
      }
    }, {
      key: "remove",
      value: function remove(schema) {
        var meta = this._map.get(schema);
        if (meta && _typeof(meta) === "object" && "id" in meta) {
          this._idmap["delete"](meta.id);
        }
        this._map["delete"](schema);
        return this;
      }
    }, {
      key: "get",
      value: function get(schema) {
        // return this._map.get(schema) as any;
        // inherit metadata
        var p = schema._zod.parent;
        if (p) {
          var _this$get;
          var pm = _objectSpread2({}, (_this$get = this.get(p)) !== null && _this$get !== void 0 ? _this$get : {});
          delete pm.id; // do not inherit id
          var f = _objectSpread2(_objectSpread2({}, pm), this._map.get(schema));
          return Object.keys(f).length ? f : undefined;
        }
        return this._map.get(schema);
      }
    }, {
      key: "has",
      value: function has(schema) {
        return this._map.has(schema);
      }
    }]);
  }();
  // registries
  function registry() {
    return new $ZodRegistry();
  }
  var globalRegistry = /*@__PURE__*/registry();

  function _string(Class, params) {
    return new Class(_objectSpread2({
      type: "string"
    }, normalizeParams(params)));
  }
  function _coercedString(Class, params) {
    return new Class(_objectSpread2({
      type: "string",
      coerce: true
    }, normalizeParams(params)));
  }
  function _email(Class, params) {
    return new Class(_objectSpread2({
      type: "string",
      format: "email",
      check: "string_format",
      abort: false
    }, normalizeParams(params)));
  }
  function _guid(Class, params) {
    return new Class(_objectSpread2({
      type: "string",
      format: "guid",
      check: "string_format",
      abort: false
    }, normalizeParams(params)));
  }
  function _uuid(Class, params) {
    return new Class(_objectSpread2({
      type: "string",
      format: "uuid",
      check: "string_format",
      abort: false
    }, normalizeParams(params)));
  }
  function _uuidv4(Class, params) {
    return new Class(_objectSpread2({
      type: "string",
      format: "uuid",
      check: "string_format",
      abort: false,
      version: "v4"
    }, normalizeParams(params)));
  }
  function _uuidv6(Class, params) {
    return new Class(_objectSpread2({
      type: "string",
      format: "uuid",
      check: "string_format",
      abort: false,
      version: "v6"
    }, normalizeParams(params)));
  }
  function _uuidv7(Class, params) {
    return new Class(_objectSpread2({
      type: "string",
      format: "uuid",
      check: "string_format",
      abort: false,
      version: "v7"
    }, normalizeParams(params)));
  }
  function _url(Class, params) {
    return new Class(_objectSpread2({
      type: "string",
      format: "url",
      check: "string_format",
      abort: false
    }, normalizeParams(params)));
  }
  function _emoji(Class, params) {
    return new Class(_objectSpread2({
      type: "string",
      format: "emoji",
      check: "string_format",
      abort: false
    }, normalizeParams(params)));
  }
  function _nanoid(Class, params) {
    return new Class(_objectSpread2({
      type: "string",
      format: "nanoid",
      check: "string_format",
      abort: false
    }, normalizeParams(params)));
  }
  function _cuid(Class, params) {
    return new Class(_objectSpread2({
      type: "string",
      format: "cuid",
      check: "string_format",
      abort: false
    }, normalizeParams(params)));
  }
  function _cuid2(Class, params) {
    return new Class(_objectSpread2({
      type: "string",
      format: "cuid2",
      check: "string_format",
      abort: false
    }, normalizeParams(params)));
  }
  function _ulid(Class, params) {
    return new Class(_objectSpread2({
      type: "string",
      format: "ulid",
      check: "string_format",
      abort: false
    }, normalizeParams(params)));
  }
  function _xid(Class, params) {
    return new Class(_objectSpread2({
      type: "string",
      format: "xid",
      check: "string_format",
      abort: false
    }, normalizeParams(params)));
  }
  function _ksuid(Class, params) {
    return new Class(_objectSpread2({
      type: "string",
      format: "ksuid",
      check: "string_format",
      abort: false
    }, normalizeParams(params)));
  }
  function _ipv4(Class, params) {
    return new Class(_objectSpread2({
      type: "string",
      format: "ipv4",
      check: "string_format",
      abort: false
    }, normalizeParams(params)));
  }
  function _ipv6(Class, params) {
    return new Class(_objectSpread2({
      type: "string",
      format: "ipv6",
      check: "string_format",
      abort: false
    }, normalizeParams(params)));
  }
  function _cidrv4(Class, params) {
    return new Class(_objectSpread2({
      type: "string",
      format: "cidrv4",
      check: "string_format",
      abort: false
    }, normalizeParams(params)));
  }
  function _cidrv6(Class, params) {
    return new Class(_objectSpread2({
      type: "string",
      format: "cidrv6",
      check: "string_format",
      abort: false
    }, normalizeParams(params)));
  }
  function _base64(Class, params) {
    return new Class(_objectSpread2({
      type: "string",
      format: "base64",
      check: "string_format",
      abort: false
    }, normalizeParams(params)));
  }
  function _base64url(Class, params) {
    return new Class(_objectSpread2({
      type: "string",
      format: "base64url",
      check: "string_format",
      abort: false
    }, normalizeParams(params)));
  }
  function _e164(Class, params) {
    return new Class(_objectSpread2({
      type: "string",
      format: "e164",
      check: "string_format",
      abort: false
    }, normalizeParams(params)));
  }
  function _jwt(Class, params) {
    return new Class(_objectSpread2({
      type: "string",
      format: "jwt",
      check: "string_format",
      abort: false
    }, normalizeParams(params)));
  }
  var TimePrecision = {
    Any: null,
    Minute: -1,
    Second: 0,
    Millisecond: 3,
    Microsecond: 6
  };
  function _isoDateTime(Class, params) {
    return new Class(_objectSpread2({
      type: "string",
      format: "datetime",
      check: "string_format",
      offset: false,
      local: false,
      precision: null
    }, normalizeParams(params)));
  }
  function _isoDate(Class, params) {
    return new Class(_objectSpread2({
      type: "string",
      format: "date",
      check: "string_format"
    }, normalizeParams(params)));
  }
  function _isoTime(Class, params) {
    return new Class(_objectSpread2({
      type: "string",
      format: "time",
      check: "string_format",
      precision: null
    }, normalizeParams(params)));
  }
  function _isoDuration(Class, params) {
    return new Class(_objectSpread2({
      type: "string",
      format: "duration",
      check: "string_format"
    }, normalizeParams(params)));
  }
  function _number(Class, params) {
    return new Class(_objectSpread2({
      type: "number",
      checks: []
    }, normalizeParams(params)));
  }
  function _coercedNumber(Class, params) {
    return new Class(_objectSpread2({
      type: "number",
      coerce: true,
      checks: []
    }, normalizeParams(params)));
  }
  function _int$1(Class, params) {
    return new Class(_objectSpread2({
      type: "number",
      check: "number_format",
      abort: false,
      format: "safeint"
    }, normalizeParams(params)));
  }
  function _float32(Class, params) {
    return new Class(_objectSpread2({
      type: "number",
      check: "number_format",
      abort: false,
      format: "float32"
    }, normalizeParams(params)));
  }
  function _float64(Class, params) {
    return new Class(_objectSpread2({
      type: "number",
      check: "number_format",
      abort: false,
      format: "float64"
    }, normalizeParams(params)));
  }
  function _int32(Class, params) {
    return new Class(_objectSpread2({
      type: "number",
      check: "number_format",
      abort: false,
      format: "int32"
    }, normalizeParams(params)));
  }
  function _uint32(Class, params) {
    return new Class(_objectSpread2({
      type: "number",
      check: "number_format",
      abort: false,
      format: "uint32"
    }, normalizeParams(params)));
  }
  function _boolean$2(Class, params) {
    return new Class(_objectSpread2({
      type: "boolean"
    }, normalizeParams(params)));
  }
  function _coercedBoolean(Class, params) {
    return new Class(_objectSpread2({
      type: "boolean",
      coerce: true
    }, normalizeParams(params)));
  }
  function _bigint(Class, params) {
    return new Class(_objectSpread2({
      type: "bigint"
    }, normalizeParams(params)));
  }
  function _coercedBigint(Class, params) {
    return new Class(_objectSpread2({
      type: "bigint",
      coerce: true
    }, normalizeParams(params)));
  }
  function _int64(Class, params) {
    return new Class(_objectSpread2({
      type: "bigint",
      check: "bigint_format",
      abort: false,
      format: "int64"
    }, normalizeParams(params)));
  }
  function _uint64(Class, params) {
    return new Class(_objectSpread2({
      type: "bigint",
      check: "bigint_format",
      abort: false,
      format: "uint64"
    }, normalizeParams(params)));
  }
  function _symbol(Class, params) {
    return new Class(_objectSpread2({
      type: "symbol"
    }, normalizeParams(params)));
  }
  function _undefined$1(Class, params) {
    return new Class(_objectSpread2({
      type: "undefined"
    }, normalizeParams(params)));
  }
  function _null$1(Class, params) {
    return new Class(_objectSpread2({
      type: "null"
    }, normalizeParams(params)));
  }
  function _any(Class) {
    return new Class({
      type: "any"
    });
  }
  function _unknown(Class) {
    return new Class({
      type: "unknown"
    });
  }
  function _never(Class, params) {
    return new Class(_objectSpread2({
      type: "never"
    }, normalizeParams(params)));
  }
  function _void$1(Class, params) {
    return new Class(_objectSpread2({
      type: "void"
    }, normalizeParams(params)));
  }
  function _date(Class, params) {
    return new Class(_objectSpread2({
      type: "date"
    }, normalizeParams(params)));
  }
  function _coercedDate(Class, params) {
    return new Class(_objectSpread2({
      type: "date",
      coerce: true
    }, normalizeParams(params)));
  }
  function _nan(Class, params) {
    return new Class(_objectSpread2({
      type: "nan"
    }, normalizeParams(params)));
  }
  function _lt(value, params) {
    return new $ZodCheckLessThan(_objectSpread2(_objectSpread2({
      check: "less_than"
    }, normalizeParams(params)), {}, {
      value: value,
      inclusive: false
    }));
  }
  function _lte(value, params) {
    return new $ZodCheckLessThan(_objectSpread2(_objectSpread2({
      check: "less_than"
    }, normalizeParams(params)), {}, {
      value: value,
      inclusive: true
    }));
  }
  function _gt(value, params) {
    return new $ZodCheckGreaterThan(_objectSpread2(_objectSpread2({
      check: "greater_than"
    }, normalizeParams(params)), {}, {
      value: value,
      inclusive: false
    }));
  }
  function _gte(value, params) {
    return new $ZodCheckGreaterThan(_objectSpread2(_objectSpread2({
      check: "greater_than"
    }, normalizeParams(params)), {}, {
      value: value,
      inclusive: true
    }));
  }
  function _positive(params) {
    return _gt(0, params);
  }
  // negative
  function _negative(params) {
    return _lt(0, params);
  }
  // nonpositive
  function _nonpositive(params) {
    return _lte(0, params);
  }
  // nonnegative
  function _nonnegative(params) {
    return _gte(0, params);
  }
  function _multipleOf(value, params) {
    return new $ZodCheckMultipleOf(_objectSpread2(_objectSpread2({
      check: "multiple_of"
    }, normalizeParams(params)), {}, {
      value: value
    }));
  }
  function _maxSize(maximum, params) {
    return new $ZodCheckMaxSize(_objectSpread2(_objectSpread2({
      check: "max_size"
    }, normalizeParams(params)), {}, {
      maximum: maximum
    }));
  }
  function _minSize(minimum, params) {
    return new $ZodCheckMinSize(_objectSpread2(_objectSpread2({
      check: "min_size"
    }, normalizeParams(params)), {}, {
      minimum: minimum
    }));
  }
  function _size(size, params) {
    return new $ZodCheckSizeEquals(_objectSpread2(_objectSpread2({
      check: "size_equals"
    }, normalizeParams(params)), {}, {
      size: size
    }));
  }
  function _maxLength(maximum, params) {
    var ch = new $ZodCheckMaxLength(_objectSpread2(_objectSpread2({
      check: "max_length"
    }, normalizeParams(params)), {}, {
      maximum: maximum
    }));
    return ch;
  }
  function _minLength(minimum, params) {
    return new $ZodCheckMinLength(_objectSpread2(_objectSpread2({
      check: "min_length"
    }, normalizeParams(params)), {}, {
      minimum: minimum
    }));
  }
  function _length(length, params) {
    return new $ZodCheckLengthEquals(_objectSpread2(_objectSpread2({
      check: "length_equals"
    }, normalizeParams(params)), {}, {
      length: length
    }));
  }
  function _regex(pattern, params) {
    return new $ZodCheckRegex(_objectSpread2(_objectSpread2({
      check: "string_format",
      format: "regex"
    }, normalizeParams(params)), {}, {
      pattern: pattern
    }));
  }
  function _lowercase(params) {
    return new $ZodCheckLowerCase(_objectSpread2({
      check: "string_format",
      format: "lowercase"
    }, normalizeParams(params)));
  }
  function _uppercase(params) {
    return new $ZodCheckUpperCase(_objectSpread2({
      check: "string_format",
      format: "uppercase"
    }, normalizeParams(params)));
  }
  function _includes(includes, params) {
    return new $ZodCheckIncludes(_objectSpread2(_objectSpread2({
      check: "string_format",
      format: "includes"
    }, normalizeParams(params)), {}, {
      includes: includes
    }));
  }
  function _startsWith(prefix, params) {
    return new $ZodCheckStartsWith(_objectSpread2(_objectSpread2({
      check: "string_format",
      format: "starts_with"
    }, normalizeParams(params)), {}, {
      prefix: prefix
    }));
  }
  function _endsWith(suffix, params) {
    return new $ZodCheckEndsWith(_objectSpread2(_objectSpread2({
      check: "string_format",
      format: "ends_with"
    }, normalizeParams(params)), {}, {
      suffix: suffix
    }));
  }
  function _property(property, schema, params) {
    return new $ZodCheckProperty(_objectSpread2({
      check: "property",
      property: property,
      schema: schema
    }, normalizeParams(params)));
  }
  function _mime(types, params) {
    return new $ZodCheckMimeType(_objectSpread2({
      check: "mime_type",
      mime: types
    }, normalizeParams(params)));
  }
  function _overwrite(tx) {
    return new $ZodCheckOverwrite({
      check: "overwrite",
      tx: tx
    });
  }
  // normalize
  function _normalize(form) {
    return _overwrite(function (input) {
      return input.normalize(form);
    });
  }
  // trim
  function _trim() {
    return _overwrite(function (input) {
      return input.trim();
    });
  }
  // toLowerCase
  function _toLowerCase() {
    return _overwrite(function (input) {
      return input.toLowerCase();
    });
  }
  // toUpperCase
  function _toUpperCase() {
    return _overwrite(function (input) {
      return input.toUpperCase();
    });
  }
  function _array(Class, element, params) {
    return new Class(_objectSpread2({
      type: "array",
      element: element
    }, normalizeParams(params)));
  }
  function _union(Class, options, params) {
    return new Class(_objectSpread2({
      type: "union",
      options: options
    }, normalizeParams(params)));
  }
  function _discriminatedUnion(Class, discriminator, options, params) {
    return new Class(_objectSpread2({
      type: "union",
      options: options,
      discriminator: discriminator
    }, normalizeParams(params)));
  }
  function _intersection(Class, left, right) {
    return new Class({
      type: "intersection",
      left: left,
      right: right
    });
  }
  // export function _tuple(
  //   Class: util.SchemaClass<schemas.$ZodTuple>,
  //   items: [],
  //   params?: string | $ZodTupleParams
  // ): schemas.$ZodTuple<[], null>;
  function _tuple(Class, items, _paramsOrRest, _params) {
    var hasRest = _paramsOrRest instanceof $ZodType;
    var params = hasRest ? _params : _paramsOrRest;
    var rest = hasRest ? _paramsOrRest : null;
    return new Class(_objectSpread2({
      type: "tuple",
      items: items,
      rest: rest
    }, normalizeParams(params)));
  }
  function _record(Class, keyType, valueType, params) {
    return new Class(_objectSpread2({
      type: "record",
      keyType: keyType,
      valueType: valueType
    }, normalizeParams(params)));
  }
  function _map(Class, keyType, valueType, params) {
    return new Class(_objectSpread2({
      type: "map",
      keyType: keyType,
      valueType: valueType
    }, normalizeParams(params)));
  }
  function _set(Class, valueType, params) {
    return new Class(_objectSpread2({
      type: "set",
      valueType: valueType
    }, normalizeParams(params)));
  }
  function _enum$1(Class, values, params) {
    var entries = Array.isArray(values) ? Object.fromEntries(values.map(function (v) {
      return [v, v];
    })) : values;
    // if (Array.isArray(values)) {
    //   for (const value of values) {
    //     entries[value] = value;
    //   }
    // } else {
    //   Object.assign(entries, values);
    // }
    // const entries: util.EnumLike = {};
    // for (const val of values) {
    //   entries[val] = val;
    // }
    return new Class(_objectSpread2({
      type: "enum",
      entries: entries
    }, normalizeParams(params)));
  }
  /** @deprecated This API has been merged into `z.enum()`. Use `z.enum()` instead.
   *
   * ```ts
   * enum Colors { red, green, blue }
   * z.enum(Colors);
   * ```
   */
  function _nativeEnum(Class, entries, params) {
    return new Class(_objectSpread2({
      type: "enum",
      entries: entries
    }, normalizeParams(params)));
  }
  function _literal(Class, value, params) {
    return new Class(_objectSpread2({
      type: "literal",
      values: Array.isArray(value) ? value : [value]
    }, normalizeParams(params)));
  }
  function _file(Class, params) {
    return new Class(_objectSpread2({
      type: "file"
    }, normalizeParams(params)));
  }
  function _transform(Class, fn) {
    return new Class({
      type: "transform",
      transform: fn
    });
  }
  function _optional(Class, innerType) {
    return new Class({
      type: "optional",
      innerType: innerType
    });
  }
  function _nullable(Class, innerType) {
    return new Class({
      type: "nullable",
      innerType: innerType
    });
  }
  function _default$1(Class, innerType, defaultValue) {
    return new Class({
      type: "default",
      innerType: innerType,
      get defaultValue() {
        return typeof defaultValue === "function" ? defaultValue() : shallowClone(defaultValue);
      }
    });
  }
  function _nonoptional(Class, innerType, params) {
    return new Class(_objectSpread2({
      type: "nonoptional",
      innerType: innerType
    }, normalizeParams(params)));
  }
  function _success(Class, innerType) {
    return new Class({
      type: "success",
      innerType: innerType
    });
  }
  function _catch$1(Class, innerType, catchValue) {
    return new Class({
      type: "catch",
      innerType: innerType,
      catchValue: typeof catchValue === "function" ? catchValue : function () {
        return catchValue;
      }
    });
  }
  function _pipe(Class, in_, out) {
    return new Class({
      type: "pipe",
      "in": in_,
      out: out
    });
  }
  function _readonly(Class, innerType) {
    return new Class({
      type: "readonly",
      innerType: innerType
    });
  }
  function _templateLiteral(Class, parts, params) {
    return new Class(_objectSpread2({
      type: "template_literal",
      parts: parts
    }, normalizeParams(params)));
  }
  function _lazy(Class, getter) {
    return new Class({
      type: "lazy",
      getter: getter
    });
  }
  function _promise(Class, innerType) {
    return new Class({
      type: "promise",
      innerType: innerType
    });
  }
  function _custom(Class, fn, _params) {
    var _norm$abort;
    var norm = normalizeParams(_params);
    (_norm$abort = norm.abort) !== null && _norm$abort !== void 0 ? _norm$abort : norm.abort = true; // default to abort:false
    var schema = new Class(_objectSpread2({
      type: "custom",
      check: "custom",
      fn: fn
    }, norm));
    return schema;
  }
  // same as _custom but defaults to abort:false
  function _refine(Class, fn, _params) {
    var schema = new Class(_objectSpread2({
      type: "custom",
      check: "custom",
      fn: fn
    }, normalizeParams(_params)));
    return schema;
  }
  function _superRefine(fn) {
    var ch = _check(function (payload) {
      payload.addIssue = function (issue$1) {
        if (typeof issue$1 === "string") {
          payload.issues.push(issue(issue$1, payload.value, ch._zod.def));
        } else {
          var _issue$code, _issue$input, _issue$inst, _issue$continue;
          // for Zod 3 backwards compatibility
          var _issue = issue$1;
          if (_issue.fatal) _issue["continue"] = false;
          (_issue$code = _issue.code) !== null && _issue$code !== void 0 ? _issue$code : _issue.code = "custom";
          (_issue$input = _issue.input) !== null && _issue$input !== void 0 ? _issue$input : _issue.input = payload.value;
          (_issue$inst = _issue.inst) !== null && _issue$inst !== void 0 ? _issue$inst : _issue.inst = ch;
          (_issue$continue = _issue["continue"]) !== null && _issue$continue !== void 0 ? _issue$continue : _issue["continue"] = !ch._zod.def.abort; // abort is always undefined, so this is always true...
          payload.issues.push(issue(_issue));
        }
      };
      return fn(payload.value, payload);
    });
    return ch;
  }
  function _check(fn, params) {
    var ch = new $ZodCheck(_objectSpread2({
      check: "custom"
    }, normalizeParams(params)));
    ch._zod.check = fn;
    return ch;
  }
  function _stringbool(Classes, _params) {
    var _params$truthy, _params$falsy, _Classes$Codec, _Classes$Boolean, _Classes$String;
    var params = normalizeParams(_params);
    var truthyArray = (_params$truthy = params.truthy) !== null && _params$truthy !== void 0 ? _params$truthy : ["true", "1", "yes", "on", "y", "enabled"];
    var falsyArray = (_params$falsy = params.falsy) !== null && _params$falsy !== void 0 ? _params$falsy : ["false", "0", "no", "off", "n", "disabled"];
    if (params["case"] !== "sensitive") {
      truthyArray = truthyArray.map(function (v) {
        return typeof v === "string" ? v.toLowerCase() : v;
      });
      falsyArray = falsyArray.map(function (v) {
        return typeof v === "string" ? v.toLowerCase() : v;
      });
    }
    var truthySet = new Set(truthyArray);
    var falsySet = new Set(falsyArray);
    var _Codec = (_Classes$Codec = Classes.Codec) !== null && _Classes$Codec !== void 0 ? _Classes$Codec : $ZodCodec;
    var _Boolean = (_Classes$Boolean = Classes.Boolean) !== null && _Classes$Boolean !== void 0 ? _Classes$Boolean : $ZodBoolean;
    var _String = (_Classes$String = Classes.String) !== null && _Classes$String !== void 0 ? _Classes$String : $ZodString;
    var stringSchema = new _String({
      type: "string",
      error: params.error
    });
    var booleanSchema = new _Boolean({
      type: "boolean",
      error: params.error
    });
    var codec = new _Codec({
      type: "pipe",
      "in": stringSchema,
      out: booleanSchema,
      transform: function transform(input, payload) {
        var data = input;
        if (params["case"] !== "sensitive") data = data.toLowerCase();
        if (truthySet.has(data)) {
          return true;
        } else if (falsySet.has(data)) {
          return false;
        } else {
          payload.issues.push({
            code: "invalid_value",
            expected: "stringbool",
            values: [].concat(_toConsumableArray(truthySet), _toConsumableArray(falsySet)),
            input: payload.value,
            inst: codec,
            "continue": false
          });
          return {};
        }
      },
      reverseTransform: function reverseTransform(input, _payload) {
        if (input === true) {
          return truthyArray[0] || "true";
        } else {
          return falsyArray[0] || "false";
        }
      },
      error: params.error
    });
    return codec;
  }
  function _stringFormat(Class, format, fnOrRegex) {
    var _params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
    var params = normalizeParams(_params);
    var def = _objectSpread2(_objectSpread2({}, normalizeParams(_params)), {}, {
      check: "string_format",
      type: "string",
      format: format,
      fn: typeof fnOrRegex === "function" ? fnOrRegex : function (val) {
        return fnOrRegex.test(val);
      }
    }, params);
    if (fnOrRegex instanceof RegExp) {
      def.pattern = fnOrRegex;
    }
    var inst = new Class(def);
    return inst;
  }

  var JSONSchemaGenerator = /*#__PURE__*/function () {
    function JSONSchemaGenerator(params) {
      var _params$metadata, _params$target, _params$unrepresentab, _params$override, _params$io;
      _classCallCheck(this, JSONSchemaGenerator);
      this.counter = 0;
      this.metadataRegistry = (_params$metadata = params === null || params === void 0 ? void 0 : params.metadata) !== null && _params$metadata !== void 0 ? _params$metadata : globalRegistry;
      this.target = (_params$target = params === null || params === void 0 ? void 0 : params.target) !== null && _params$target !== void 0 ? _params$target : "draft-2020-12";
      this.unrepresentable = (_params$unrepresentab = params === null || params === void 0 ? void 0 : params.unrepresentable) !== null && _params$unrepresentab !== void 0 ? _params$unrepresentab : "throw";
      this.override = (_params$override = params === null || params === void 0 ? void 0 : params.override) !== null && _params$override !== void 0 ? _params$override : function () {};
      this.io = (_params$io = params === null || params === void 0 ? void 0 : params.io) !== null && _params$io !== void 0 ? _params$io : "output";
      this.seen = new Map();
    }
    return _createClass(JSONSchemaGenerator, [{
      key: "process",
      value: function process(schema) {
        var _schema$_zod$toJSONSc,
          _schema$_zod,
          _this = this,
          _a$default;
        var _params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
          path: [],
          schemaPath: []
        };
        var _a;
        var def = schema._zod.def;
        var formatMap = {
          guid: "uuid",
          url: "uri",
          datetime: "date-time",
          json_string: "json-string",
          regex: "" // do not set
        };
        // check for schema in seens
        var seen = this.seen.get(schema);
        if (seen) {
          seen.count++;
          // check if cycle
          var isCycle = _params.schemaPath.includes(schema);
          if (isCycle) {
            seen.cycle = _params.path;
          }
          return seen.schema;
        }
        // initialize
        var result = {
          schema: {},
          count: 1,
          cycle: undefined,
          path: _params.path
        };
        this.seen.set(schema, result);
        // custom method overrides default behavior
        var overrideSchema = (_schema$_zod$toJSONSc = (_schema$_zod = schema._zod).toJSONSchema) === null || _schema$_zod$toJSONSc === void 0 ? void 0 : _schema$_zod$toJSONSc.call(_schema$_zod);
        if (overrideSchema) {
          result.schema = overrideSchema;
        } else {
          var params = _objectSpread2(_objectSpread2({}, _params), {}, {
            schemaPath: [].concat(_toConsumableArray(_params.schemaPath), [schema]),
            path: _params.path
          });
          var parent = schema._zod.parent;
          if (parent) {
            // schema was cloned from another schema
            result.ref = parent;
            this.process(parent, params);
            this.seen.get(parent).isParent = true;
          } else {
            var _json = result.schema;
            switch (def.type) {
              case "string":
                {
                  var json = _json;
                  json.type = "string";
                  var _schema$_zod$bag = schema._zod.bag,
                    minimum = _schema$_zod$bag.minimum,
                    maximum = _schema$_zod$bag.maximum,
                    format = _schema$_zod$bag.format,
                    patterns = _schema$_zod$bag.patterns,
                    contentEncoding = _schema$_zod$bag.contentEncoding;
                  if (typeof minimum === "number") json.minLength = minimum;
                  if (typeof maximum === "number") json.maxLength = maximum;
                  // custom pattern overrides format
                  if (format) {
                    var _formatMap$format;
                    json.format = (_formatMap$format = formatMap[format]) !== null && _formatMap$format !== void 0 ? _formatMap$format : format;
                    if (json.format === "") delete json.format; // empty format is not valid
                  }
                  if (contentEncoding) json.contentEncoding = contentEncoding;
                  if (patterns && patterns.size > 0) {
                    var regexes = _toConsumableArray(patterns);
                    if (regexes.length === 1) json.pattern = regexes[0].source;else if (regexes.length > 1) {
                      result.schema.allOf = _toConsumableArray(regexes.map(function (regex) {
                        return _objectSpread2(_objectSpread2({}, _this.target === "draft-7" || _this.target === "draft-4" || _this.target === "openapi-3.0" ? {
                          type: "string"
                        } : {}), {}, {
                          pattern: regex.source
                        });
                      }));
                    }
                  }
                  break;
                }
              case "number":
                {
                  var _json2 = _json;
                  var _schema$_zod$bag2 = schema._zod.bag,
                    _minimum = _schema$_zod$bag2.minimum,
                    _maximum = _schema$_zod$bag2.maximum,
                    _format = _schema$_zod$bag2.format,
                    multipleOf = _schema$_zod$bag2.multipleOf,
                    exclusiveMaximum = _schema$_zod$bag2.exclusiveMaximum,
                    exclusiveMinimum = _schema$_zod$bag2.exclusiveMinimum;
                  if (typeof _format === "string" && _format.includes("int")) _json2.type = "integer";else _json2.type = "number";
                  if (typeof exclusiveMinimum === "number") {
                    if (this.target === "draft-4" || this.target === "openapi-3.0") {
                      _json2.minimum = exclusiveMinimum;
                      _json2.exclusiveMinimum = true;
                    } else {
                      _json2.exclusiveMinimum = exclusiveMinimum;
                    }
                  }
                  if (typeof _minimum === "number") {
                    _json2.minimum = _minimum;
                    if (typeof exclusiveMinimum === "number" && this.target !== "draft-4") {
                      if (exclusiveMinimum >= _minimum) delete _json2.minimum;else delete _json2.exclusiveMinimum;
                    }
                  }
                  if (typeof exclusiveMaximum === "number") {
                    if (this.target === "draft-4" || this.target === "openapi-3.0") {
                      _json2.maximum = exclusiveMaximum;
                      _json2.exclusiveMaximum = true;
                    } else {
                      _json2.exclusiveMaximum = exclusiveMaximum;
                    }
                  }
                  if (typeof _maximum === "number") {
                    _json2.maximum = _maximum;
                    if (typeof exclusiveMaximum === "number" && this.target !== "draft-4") {
                      if (exclusiveMaximum <= _maximum) delete _json2.maximum;else delete _json2.exclusiveMaximum;
                    }
                  }
                  if (typeof multipleOf === "number") _json2.multipleOf = multipleOf;
                  break;
                }
              case "boolean":
                {
                  var _json3 = _json;
                  _json3.type = "boolean";
                  break;
                }
              case "bigint":
                {
                  if (this.unrepresentable === "throw") {
                    throw new Error("BigInt cannot be represented in JSON Schema");
                  }
                  break;
                }
              case "symbol":
                {
                  if (this.unrepresentable === "throw") {
                    throw new Error("Symbols cannot be represented in JSON Schema");
                  }
                  break;
                }
              case "null":
                {
                  if (this.target === "openapi-3.0") {
                    _json.type = "string";
                    _json.nullable = true;
                    _json["enum"] = [null];
                  } else _json.type = "null";
                  break;
                }
              case "any":
                {
                  break;
                }
              case "unknown":
                {
                  break;
                }
              case "undefined":
                {
                  if (this.unrepresentable === "throw") {
                    throw new Error("Undefined cannot be represented in JSON Schema");
                  }
                  break;
                }
              case "void":
                {
                  if (this.unrepresentable === "throw") {
                    throw new Error("Void cannot be represented in JSON Schema");
                  }
                  break;
                }
              case "never":
                {
                  _json.not = {};
                  break;
                }
              case "date":
                {
                  if (this.unrepresentable === "throw") {
                    throw new Error("Date cannot be represented in JSON Schema");
                  }
                  break;
                }
              case "array":
                {
                  var _json4 = _json;
                  var _schema$_zod$bag3 = schema._zod.bag,
                    _minimum2 = _schema$_zod$bag3.minimum,
                    _maximum2 = _schema$_zod$bag3.maximum;
                  if (typeof _minimum2 === "number") _json4.minItems = _minimum2;
                  if (typeof _maximum2 === "number") _json4.maxItems = _maximum2;
                  _json4.type = "array";
                  _json4.items = this.process(def.element, _objectSpread2(_objectSpread2({}, params), {}, {
                    path: [].concat(_toConsumableArray(params.path), ["items"])
                  }));
                  break;
                }
              case "object":
                {
                  var _def$catchall;
                  var _json5 = _json;
                  _json5.type = "object";
                  _json5.properties = {};
                  var shape = def.shape; // params.shapeCache.get(schema)!;
                  for (var key in shape) {
                    _json5.properties[key] = this.process(shape[key], _objectSpread2(_objectSpread2({}, params), {}, {
                      path: [].concat(_toConsumableArray(params.path), ["properties", key])
                    }));
                  }
                  // required keys
                  var allKeys = new Set(Object.keys(shape));
                  // const optionalKeys = new Set(def.optional);
                  var requiredKeys = new Set(_toConsumableArray(allKeys).filter(function (key) {
                    var v = def.shape[key]._zod;
                    if (_this.io === "input") {
                      return v.optin === undefined;
                    } else {
                      return v.optout === undefined;
                    }
                  }));
                  if (requiredKeys.size > 0) {
                    _json5.required = Array.from(requiredKeys);
                  }
                  // catchall
                  if (((_def$catchall = def.catchall) === null || _def$catchall === void 0 ? void 0 : _def$catchall._zod.def.type) === "never") {
                    // strict
                    _json5.additionalProperties = false;
                  } else if (!def.catchall) {
                    // regular
                    if (this.io === "output") _json5.additionalProperties = false;
                  } else if (def.catchall) {
                    _json5.additionalProperties = this.process(def.catchall, _objectSpread2(_objectSpread2({}, params), {}, {
                      path: [].concat(_toConsumableArray(params.path), ["additionalProperties"])
                    }));
                  }
                  break;
                }
              case "union":
                {
                  var _json6 = _json;
                  var options = def.options.map(function (x, i) {
                    return _this.process(x, _objectSpread2(_objectSpread2({}, params), {}, {
                      path: [].concat(_toConsumableArray(params.path), ["anyOf", i])
                    }));
                  });
                  _json6.anyOf = options;
                  break;
                }
              case "intersection":
                {
                  var _json7 = _json;
                  var a = this.process(def.left, _objectSpread2(_objectSpread2({}, params), {}, {
                    path: [].concat(_toConsumableArray(params.path), ["allOf", 0])
                  }));
                  var b = this.process(def.right, _objectSpread2(_objectSpread2({}, params), {}, {
                    path: [].concat(_toConsumableArray(params.path), ["allOf", 1])
                  }));
                  var isSimpleIntersection = function isSimpleIntersection(val) {
                    return "allOf" in val && Object.keys(val).length === 1;
                  };
                  var allOf = [].concat(_toConsumableArray(isSimpleIntersection(a) ? a.allOf : [a]), _toConsumableArray(isSimpleIntersection(b) ? b.allOf : [b]));
                  _json7.allOf = allOf;
                  break;
                }
              case "tuple":
                {
                  var _json8 = _json;
                  _json8.type = "array";
                  var prefixPath = this.target === "draft-2020-12" ? "prefixItems" : "items";
                  var restPath = this.target === "draft-2020-12" ? "items" : this.target === "openapi-3.0" ? "items" : "additionalItems";
                  var prefixItems = def.items.map(function (x, i) {
                    return _this.process(x, _objectSpread2(_objectSpread2({}, params), {}, {
                      path: [].concat(_toConsumableArray(params.path), [prefixPath, i])
                    }));
                  });
                  var rest = def.rest ? this.process(def.rest, _objectSpread2(_objectSpread2({}, params), {}, {
                    path: [].concat(_toConsumableArray(params.path), [restPath], _toConsumableArray(this.target === "openapi-3.0" ? [def.items.length] : []))
                  })) : null;
                  if (this.target === "draft-2020-12") {
                    _json8.prefixItems = prefixItems;
                    if (rest) {
                      _json8.items = rest;
                    }
                  } else if (this.target === "openapi-3.0") {
                    _json8.items = {
                      anyOf: prefixItems
                    };
                    if (rest) {
                      _json8.items.anyOf.push(rest);
                    }
                    _json8.minItems = prefixItems.length;
                    if (!rest) {
                      _json8.maxItems = prefixItems.length;
                    }
                  } else {
                    _json8.items = prefixItems;
                    if (rest) {
                      _json8.additionalItems = rest;
                    }
                  }
                  // length
                  var _schema$_zod$bag4 = schema._zod.bag,
                    _minimum3 = _schema$_zod$bag4.minimum,
                    _maximum3 = _schema$_zod$bag4.maximum;
                  if (typeof _minimum3 === "number") _json8.minItems = _minimum3;
                  if (typeof _maximum3 === "number") _json8.maxItems = _maximum3;
                  break;
                }
              case "record":
                {
                  var _json9 = _json;
                  _json9.type = "object";
                  if (this.target === "draft-7" || this.target === "draft-2020-12") {
                    _json9.propertyNames = this.process(def.keyType, _objectSpread2(_objectSpread2({}, params), {}, {
                      path: [].concat(_toConsumableArray(params.path), ["propertyNames"])
                    }));
                  }
                  _json9.additionalProperties = this.process(def.valueType, _objectSpread2(_objectSpread2({}, params), {}, {
                    path: [].concat(_toConsumableArray(params.path), ["additionalProperties"])
                  }));
                  break;
                }
              case "map":
                {
                  if (this.unrepresentable === "throw") {
                    throw new Error("Map cannot be represented in JSON Schema");
                  }
                  break;
                }
              case "set":
                {
                  if (this.unrepresentable === "throw") {
                    throw new Error("Set cannot be represented in JSON Schema");
                  }
                  break;
                }
              case "enum":
                {
                  var _json0 = _json;
                  var values = getEnumValues(def.entries);
                  // Number enums can have both string and number values
                  if (values.every(function (v) {
                    return typeof v === "number";
                  })) _json0.type = "number";
                  if (values.every(function (v) {
                    return typeof v === "string";
                  })) _json0.type = "string";
                  _json0["enum"] = values;
                  break;
                }
              case "literal":
                {
                  var _json1 = _json;
                  var vals = [];
                  var _iterator = _createForOfIteratorHelper(def.values),
                    _step;
                  try {
                    for (_iterator.s(); !(_step = _iterator.n()).done;) {
                      var _val = _step.value;
                      if (_val === undefined) {
                        if (this.unrepresentable === "throw") {
                          throw new Error("Literal `undefined` cannot be represented in JSON Schema");
                        } else {
                          // do not add to vals
                        }
                      } else if (typeof _val === "bigint") {
                        if (this.unrepresentable === "throw") {
                          throw new Error("BigInt literals cannot be represented in JSON Schema");
                        } else {
                          vals.push(Number(_val));
                        }
                      } else {
                        vals.push(_val);
                      }
                    }
                  } catch (err) {
                    _iterator.e(err);
                  } finally {
                    _iterator.f();
                  }
                  if (vals.length === 0) ; else if (vals.length === 1) {
                    var val = vals[0];
                    _json1.type = val === null ? "null" : _typeof(val);
                    if (this.target === "draft-4" || this.target === "openapi-3.0") {
                      _json1["enum"] = [val];
                    } else {
                      _json1["const"] = val;
                    }
                  } else {
                    if (vals.every(function (v) {
                      return typeof v === "number";
                    })) _json1.type = "number";
                    if (vals.every(function (v) {
                      return typeof v === "string";
                    })) _json1.type = "string";
                    if (vals.every(function (v) {
                      return typeof v === "boolean";
                    })) _json1.type = "string";
                    if (vals.every(function (v) {
                      return v === null;
                    })) _json1.type = "null";
                    _json1["enum"] = vals;
                  }
                  break;
                }
              case "file":
                {
                  var _json10 = _json;
                  var file = {
                    type: "string",
                    format: "binary",
                    contentEncoding: "binary"
                  };
                  var _schema$_zod$bag5 = schema._zod.bag,
                    _minimum4 = _schema$_zod$bag5.minimum,
                    _maximum4 = _schema$_zod$bag5.maximum,
                    mime = _schema$_zod$bag5.mime;
                  if (_minimum4 !== undefined) file.minLength = _minimum4;
                  if (_maximum4 !== undefined) file.maxLength = _maximum4;
                  if (mime) {
                    if (mime.length === 1) {
                      file.contentMediaType = mime[0];
                      Object.assign(_json10, file);
                    } else {
                      _json10.anyOf = mime.map(function (m) {
                        var mFile = _objectSpread2(_objectSpread2({}, file), {}, {
                          contentMediaType: m
                        });
                        return mFile;
                      });
                    }
                  } else {
                    Object.assign(_json10, file);
                  }
                  // if (this.unrepresentable === "throw") {
                  //   throw new Error("File cannot be represented in JSON Schema");
                  // }
                  break;
                }
              case "transform":
                {
                  if (this.unrepresentable === "throw") {
                    throw new Error("Transforms cannot be represented in JSON Schema");
                  }
                  break;
                }
              case "nullable":
                {
                  var inner = this.process(def.innerType, params);
                  if (this.target === "openapi-3.0") {
                    result.ref = def.innerType;
                    _json.nullable = true;
                  } else {
                    _json.anyOf = [inner, {
                      type: "null"
                    }];
                  }
                  break;
                }
              case "nonoptional":
                {
                  this.process(def.innerType, params);
                  result.ref = def.innerType;
                  break;
                }
              case "success":
                {
                  var _json11 = _json;
                  _json11.type = "boolean";
                  break;
                }
              case "default":
                {
                  this.process(def.innerType, params);
                  result.ref = def.innerType;
                  _json["default"] = JSON.parse(JSON.stringify(def.defaultValue));
                  break;
                }
              case "prefault":
                {
                  this.process(def.innerType, params);
                  result.ref = def.innerType;
                  if (this.io === "input") _json._prefault = JSON.parse(JSON.stringify(def.defaultValue));
                  break;
                }
              case "catch":
                {
                  // use conditionals
                  this.process(def.innerType, params);
                  result.ref = def.innerType;
                  var catchValue;
                  try {
                    catchValue = def.catchValue(undefined);
                  } catch (_unused) {
                    throw new Error("Dynamic catch values are not supported in JSON Schema");
                  }
                  _json["default"] = catchValue;
                  break;
                }
              case "nan":
                {
                  if (this.unrepresentable === "throw") {
                    throw new Error("NaN cannot be represented in JSON Schema");
                  }
                  break;
                }
              case "template_literal":
                {
                  var _json12 = _json;
                  var pattern = schema._zod.pattern;
                  if (!pattern) throw new Error("Pattern not found in template literal");
                  _json12.type = "string";
                  _json12.pattern = pattern.source;
                  break;
                }
              case "pipe":
                {
                  var innerType = this.io === "input" ? def["in"]._zod.def.type === "transform" ? def.out : def["in"] : def.out;
                  this.process(innerType, params);
                  result.ref = innerType;
                  break;
                }
              case "readonly":
                {
                  this.process(def.innerType, params);
                  result.ref = def.innerType;
                  _json.readOnly = true;
                  break;
                }
              // passthrough types
              case "promise":
                {
                  this.process(def.innerType, params);
                  result.ref = def.innerType;
                  break;
                }
              case "optional":
                {
                  this.process(def.innerType, params);
                  result.ref = def.innerType;
                  break;
                }
              case "lazy":
                {
                  var _innerType = schema._zod.innerType;
                  this.process(_innerType, params);
                  result.ref = _innerType;
                  break;
                }
              case "custom":
                {
                  if (this.unrepresentable === "throw") {
                    throw new Error("Custom types cannot be represented in JSON Schema");
                  }
                  break;
                }
              case "function":
                {
                  if (this.unrepresentable === "throw") {
                    throw new Error("Function types cannot be represented in JSON Schema");
                  }
                  break;
                }
            }
          }
        }
        // metadata
        var meta = this.metadataRegistry.get(schema);
        if (meta) Object.assign(result.schema, meta);
        if (this.io === "input" && isTransforming(schema)) {
          // examples/defaults only apply to output type of pipe
          delete result.schema.examples;
          delete result.schema["default"];
        }
        // set prefault as default
        if (this.io === "input" && result.schema._prefault) (_a$default = (_a = result.schema)["default"]) !== null && _a$default !== void 0 ? _a$default : _a["default"] = result.schema._prefault;
        delete result.schema._prefault;
        // pulling fresh from this.seen in case it was overwritten
        var _result = this.seen.get(schema);
        return _result.schema;
      }
    }, {
      key: "emit",
      value: function emit(schema, _params) {
        var _params$cycles,
          _params$reused,
          _params$external,
          _this2 = this,
          _params$external2,
          _params$external$defs,
          _params$external3;
        var params = {
          cycles: (_params$cycles = _params === null || _params === void 0 ? void 0 : _params.cycles) !== null && _params$cycles !== void 0 ? _params$cycles : "ref",
          reused: (_params$reused = _params === null || _params === void 0 ? void 0 : _params.reused) !== null && _params$reused !== void 0 ? _params$reused : "inline",
          // unrepresentable: _params?.unrepresentable ?? "throw",
          // uri: _params?.uri ?? ((id) => `${id}`),
          external: (_params$external = _params === null || _params === void 0 ? void 0 : _params.external) !== null && _params$external !== void 0 ? _params$external : undefined
        };
        // iterate over seen map;
        var root = this.seen.get(schema);
        if (!root) throw new Error("Unprocessed schema. This is a bug in Zod.");
        // initialize result with root schema fields
        // Object.assign(result, seen.cached);
        // returns a ref to the schema
        // defId will be empty if the ref points to an external schema (or #)
        var makeURI = function makeURI(entry) {
          var _entry$1$schema$id;
          // comparing the seen objects because sometimes
          // multiple schemas map to the same seen object.
          // e.g. lazy
          // external is configured
          var defsSegment = _this2.target === "draft-2020-12" ? "$defs" : "definitions";
          if (params.external) {
            var _params$external$regi, _params$external$uri, _ref, _entry$1$defId;
            var externalId = (_params$external$regi = params.external.registry.get(entry[0])) === null || _params$external$regi === void 0 ? void 0 : _params$external$regi.id; // ?? "__shared";// `__schema${this.counter++}`;
            // check if schema is in the external registry
            var uriGenerator = (_params$external$uri = params.external.uri) !== null && _params$external$uri !== void 0 ? _params$external$uri : function (id) {
              return id;
            };
            if (externalId) {
              return {
                ref: uriGenerator(externalId)
              };
            }
            // otherwise, add to __shared
            var id = (_ref = (_entry$1$defId = entry[1].defId) !== null && _entry$1$defId !== void 0 ? _entry$1$defId : entry[1].schema.id) !== null && _ref !== void 0 ? _ref : "schema".concat(_this2.counter++);
            entry[1].defId = id; // set defId so it will be reused if needed
            return {
              defId: id,
              ref: "".concat(uriGenerator("__shared"), "#/").concat(defsSegment, "/").concat(id)
            };
          }
          if (entry[1] === root) {
            return {
              ref: "#"
            };
          }
          // self-contained schema
          var uriPrefix = "#";
          var defUriPrefix = "".concat(uriPrefix, "/").concat(defsSegment, "/");
          var defId = (_entry$1$schema$id = entry[1].schema.id) !== null && _entry$1$schema$id !== void 0 ? _entry$1$schema$id : "__schema".concat(_this2.counter++);
          return {
            defId: defId,
            ref: defUriPrefix + defId
          };
        };
        // stored cached version in `def` property
        // remove all properties, set $ref
        var extractToDef = function extractToDef(entry) {
          // if the schema is already a reference, do not extract it
          if (entry[1].schema.$ref) {
            return;
          }
          var seen = entry[1];
          var _makeURI = makeURI(entry),
            ref = _makeURI.ref,
            defId = _makeURI.defId;
          seen.def = _objectSpread2({}, seen.schema);
          // defId won't be set if the schema is a reference to an external schema
          if (defId) seen.defId = defId;
          // wipe away all properties except $ref
          var schema = seen.schema;
          for (var key in schema) {
            delete schema[key];
          }
          schema.$ref = ref;
        };
        // throw on cycles
        // break cycles
        if (params.cycles === "throw") {
          var _iterator2 = _createForOfIteratorHelper(this.seen.entries()),
            _step2;
          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              var entry = _step2.value;
              var seen = entry[1];
              if (seen.cycle) {
                var _seen$cycle;
                throw new Error("Cycle detected: " + "#/".concat((_seen$cycle = seen.cycle) === null || _seen$cycle === void 0 ? void 0 : _seen$cycle.join("/"), "/<root>") + '\n\nSet the `cycles` parameter to `"ref"` to resolve cyclical schemas with defs.');
              }
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }
        }
        // extract schemas into $defs
        var _iterator3 = _createForOfIteratorHelper(this.seen.entries()),
          _step3;
        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var _this$metadataRegistr;
            var _entry = _step3.value;
            var _seen = _entry[1];
            // convert root schema to # $ref
            if (schema === _entry[0]) {
              extractToDef(_entry); // this has special handling for the root schema
              continue;
            }
            // extract schemas that are in the external registry
            if (params.external) {
              var _params$external$regi3;
              var ext = (_params$external$regi3 = params.external.registry.get(_entry[0])) === null || _params$external$regi3 === void 0 ? void 0 : _params$external$regi3.id;
              if (schema !== _entry[0] && ext) {
                extractToDef(_entry);
                continue;
              }
            }
            // extract schemas with `id` meta
            var _id = (_this$metadataRegistr = this.metadataRegistry.get(_entry[0])) === null || _this$metadataRegistr === void 0 ? void 0 : _this$metadataRegistr.id;
            if (_id) {
              extractToDef(_entry);
              continue;
            }
            // break cycles
            if (_seen.cycle) {
              // any
              extractToDef(_entry);
              continue;
            }
            // extract reused schemas
            if (_seen.count > 1) {
              if (params.reused === "ref") {
                extractToDef(_entry);
                // biome-ignore lint:
                continue;
              }
            }
          }
          // flatten _refs
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }
        var _flattenRef = function flattenRef(zodSchema, params) {
          var _seen$def, _seen$path;
          var seen = _this2.seen.get(zodSchema);
          var schema = (_seen$def = seen.def) !== null && _seen$def !== void 0 ? _seen$def : seen.schema;
          var _cached = _objectSpread2({}, schema);
          // already seen
          if (seen.ref === null) {
            return;
          }
          // flatten ref if defined
          var ref = seen.ref;
          seen.ref = null; // prevent recursion
          if (ref) {
            _flattenRef(ref, params);
            // merge referenced schema into current
            var refSchema = _this2.seen.get(ref).schema;
            if (refSchema.$ref && (params.target === "draft-7" || params.target === "draft-4" || params.target === "openapi-3.0")) {
              var _schema$allOf;
              schema.allOf = (_schema$allOf = schema.allOf) !== null && _schema$allOf !== void 0 ? _schema$allOf : [];
              schema.allOf.push(refSchema);
            } else {
              Object.assign(schema, refSchema);
              Object.assign(schema, _cached); // prevent overwriting any fields in the original schema
            }
          }
          // execute overrides
          if (!seen.isParent) _this2.override({
            zodSchema: zodSchema,
            jsonSchema: schema,
            path: (_seen$path = seen.path) !== null && _seen$path !== void 0 ? _seen$path : []
          });
        };
        var _iterator4 = _createForOfIteratorHelper(_toConsumableArray(this.seen.entries()).reverse()),
          _step4;
        try {
          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
            var _entry2 = _step4.value;
            _flattenRef(_entry2[0], {
              target: this.target
            });
          }
        } catch (err) {
          _iterator4.e(err);
        } finally {
          _iterator4.f();
        }
        var result = {};
        if (this.target === "draft-2020-12") {
          result.$schema = "https://json-schema.org/draft/2020-12/schema";
        } else if (this.target === "draft-7") {
          result.$schema = "http://json-schema.org/draft-07/schema#";
        } else if (this.target === "draft-4") {
          result.$schema = "http://json-schema.org/draft-04/schema#";
        } else if (this.target === "openapi-3.0") ; else {
          // @ts-ignore
          console.warn("Invalid target: ".concat(this.target));
        }
        if ((_params$external2 = params.external) !== null && _params$external2 !== void 0 && _params$external2.uri) {
          var _params$external$regi2;
          var id = (_params$external$regi2 = params.external.registry.get(schema)) === null || _params$external$regi2 === void 0 ? void 0 : _params$external$regi2.id;
          if (!id) throw new Error("Schema is missing an `id` property");
          result.$id = params.external.uri(id);
        }
        Object.assign(result, root.def);
        // build defs object
        var defs = (_params$external$defs = (_params$external3 = params.external) === null || _params$external3 === void 0 ? void 0 : _params$external3.defs) !== null && _params$external$defs !== void 0 ? _params$external$defs : {};
        var _iterator5 = _createForOfIteratorHelper(this.seen.entries()),
          _step5;
        try {
          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
            var _entry3 = _step5.value;
            var _seen2 = _entry3[1];
            if (_seen2.def && _seen2.defId) {
              defs[_seen2.defId] = _seen2.def;
            }
          }
          // set definitions in result
        } catch (err) {
          _iterator5.e(err);
        } finally {
          _iterator5.f();
        }
        if (params.external) ; else {
          if (Object.keys(defs).length > 0) {
            if (this.target === "draft-2020-12") {
              result.$defs = defs;
            } else {
              result.definitions = defs;
            }
          }
        }
        try {
          // this "finalizes" this schema and ensures all cycles are removed
          // each call to .emit() is functionally independent
          // though the seen map is shared
          return JSON.parse(JSON.stringify(result));
        } catch (_err) {
          throw new Error("Error converting schema to JSON.");
        }
      }
    }]);
  }();
  function toJSONSchema(input, _params) {
    if (input instanceof $ZodRegistry) {
      var _gen = new JSONSchemaGenerator(_params);
      var defs = {};
      var _iterator6 = _createForOfIteratorHelper(input._idmap.entries()),
        _step6;
      try {
        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
          var entry = _step6.value;
          var _entry4 = _slicedToArray(entry, 2),
            _ = _entry4[0],
            schema = _entry4[1];
          _gen.process(schema);
        }
      } catch (err) {
        _iterator6.e(err);
      } finally {
        _iterator6.f();
      }
      var schemas = {};
      var external = {
        registry: input,
        uri: _params === null || _params === void 0 ? void 0 : _params.uri,
        defs: defs
      };
      var _iterator7 = _createForOfIteratorHelper(input._idmap.entries()),
        _step7;
      try {
        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
          var _entry5 = _step7.value;
          var _entry6 = _slicedToArray(_entry5, 2),
            key = _entry6[0],
            _schema2 = _entry6[1];
          schemas[key] = _gen.emit(_schema2, _objectSpread2(_objectSpread2({}, _params), {}, {
            external: external
          }));
        }
      } catch (err) {
        _iterator7.e(err);
      } finally {
        _iterator7.f();
      }
      if (Object.keys(defs).length > 0) {
        var defsSegment = _gen.target === "draft-2020-12" ? "$defs" : "definitions";
        schemas.__shared = _defineProperty({}, defsSegment, defs);
      }
      return {
        schemas: schemas
      };
    }
    var gen = new JSONSchemaGenerator(_params);
    gen.process(input);
    return gen.emit(input, _params);
  }
  function isTransforming(_schema, _ctx) {
    var ctx = _ctx !== null && _ctx !== void 0 ? _ctx : {
      seen: new Set()
    };
    if (ctx.seen.has(_schema)) return false;
    ctx.seen.add(_schema);
    var schema = _schema;
    var def = schema._zod.def;
    switch (def.type) {
      case "string":
      case "number":
      case "bigint":
      case "boolean":
      case "date":
      case "symbol":
      case "undefined":
      case "null":
      case "any":
      case "unknown":
      case "never":
      case "void":
      case "literal":
      case "enum":
      case "nan":
      case "file":
      case "template_literal":
        return false;
      case "array":
        {
          return isTransforming(def.element, ctx);
        }
      case "object":
        {
          for (var key in def.shape) {
            if (isTransforming(def.shape[key], ctx)) return true;
          }
          return false;
        }
      case "union":
        {
          var _iterator8 = _createForOfIteratorHelper(def.options),
            _step8;
          try {
            for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
              var option = _step8.value;
              if (isTransforming(option, ctx)) return true;
            }
          } catch (err) {
            _iterator8.e(err);
          } finally {
            _iterator8.f();
          }
          return false;
        }
      case "intersection":
        {
          return isTransforming(def.left, ctx) || isTransforming(def.right, ctx);
        }
      case "tuple":
        {
          var _iterator9 = _createForOfIteratorHelper(def.items),
            _step9;
          try {
            for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
              var item = _step9.value;
              if (isTransforming(item, ctx)) return true;
            }
          } catch (err) {
            _iterator9.e(err);
          } finally {
            _iterator9.f();
          }
          if (def.rest && isTransforming(def.rest, ctx)) return true;
          return false;
        }
      case "record":
        {
          return isTransforming(def.keyType, ctx) || isTransforming(def.valueType, ctx);
        }
      case "map":
        {
          return isTransforming(def.keyType, ctx) || isTransforming(def.valueType, ctx);
        }
      case "set":
        {
          return isTransforming(def.valueType, ctx);
        }
      // inner types
      case "promise":
      case "optional":
      case "nonoptional":
      case "nullable":
      case "readonly":
        return isTransforming(def.innerType, ctx);
      case "lazy":
        return isTransforming(def.getter(), ctx);
      case "default":
        {
          return isTransforming(def.innerType, ctx);
        }
      case "prefault":
        {
          return isTransforming(def.innerType, ctx);
        }
      case "custom":
        {
          return false;
        }
      case "transform":
        {
          return true;
        }
      case "pipe":
        {
          return isTransforming(def["in"], ctx) || isTransforming(def.out, ctx);
        }
      case "success":
        {
          return false;
        }
      case "catch":
        {
          return false;
        }
      case "function":
        {
          return false;
        }
    }
    throw new Error("Unknown schema type: ".concat(def.type));
  }

  var jsonSchema = /*#__PURE__*/Object.freeze({
    __proto__: null
  });

  var core = /*#__PURE__*/Object.freeze({
    __proto__: null,
    $ZodAny: $ZodAny,
    $ZodArray: $ZodArray,
    $ZodAsyncError: $ZodAsyncError,
    $ZodBase64: $ZodBase64,
    $ZodBase64URL: $ZodBase64URL,
    $ZodBigInt: $ZodBigInt,
    $ZodBigIntFormat: $ZodBigIntFormat,
    $ZodBoolean: $ZodBoolean,
    $ZodCIDRv4: $ZodCIDRv4,
    $ZodCIDRv6: $ZodCIDRv6,
    $ZodCUID: $ZodCUID,
    $ZodCUID2: $ZodCUID2,
    $ZodCatch: $ZodCatch,
    $ZodCheck: $ZodCheck,
    $ZodCheckBigIntFormat: $ZodCheckBigIntFormat,
    $ZodCheckEndsWith: $ZodCheckEndsWith,
    $ZodCheckGreaterThan: $ZodCheckGreaterThan,
    $ZodCheckIncludes: $ZodCheckIncludes,
    $ZodCheckLengthEquals: $ZodCheckLengthEquals,
    $ZodCheckLessThan: $ZodCheckLessThan,
    $ZodCheckLowerCase: $ZodCheckLowerCase,
    $ZodCheckMaxLength: $ZodCheckMaxLength,
    $ZodCheckMaxSize: $ZodCheckMaxSize,
    $ZodCheckMimeType: $ZodCheckMimeType,
    $ZodCheckMinLength: $ZodCheckMinLength,
    $ZodCheckMinSize: $ZodCheckMinSize,
    $ZodCheckMultipleOf: $ZodCheckMultipleOf,
    $ZodCheckNumberFormat: $ZodCheckNumberFormat,
    $ZodCheckOverwrite: $ZodCheckOverwrite,
    $ZodCheckProperty: $ZodCheckProperty,
    $ZodCheckRegex: $ZodCheckRegex,
    $ZodCheckSizeEquals: $ZodCheckSizeEquals,
    $ZodCheckStartsWith: $ZodCheckStartsWith,
    $ZodCheckStringFormat: $ZodCheckStringFormat,
    $ZodCheckUpperCase: $ZodCheckUpperCase,
    $ZodCodec: $ZodCodec,
    $ZodCustom: $ZodCustom,
    $ZodCustomStringFormat: $ZodCustomStringFormat,
    $ZodDate: $ZodDate,
    $ZodDefault: $ZodDefault,
    $ZodDiscriminatedUnion: $ZodDiscriminatedUnion,
    $ZodE164: $ZodE164,
    $ZodEmail: $ZodEmail,
    $ZodEmoji: $ZodEmoji,
    $ZodEncodeError: $ZodEncodeError,
    $ZodEnum: $ZodEnum,
    $ZodError: $ZodError,
    $ZodFile: $ZodFile,
    $ZodFunction: $ZodFunction,
    $ZodGUID: $ZodGUID,
    $ZodIPv4: $ZodIPv4,
    $ZodIPv6: $ZodIPv6,
    $ZodISODate: $ZodISODate,
    $ZodISODateTime: $ZodISODateTime,
    $ZodISODuration: $ZodISODuration,
    $ZodISOTime: $ZodISOTime,
    $ZodIntersection: $ZodIntersection,
    $ZodJWT: $ZodJWT,
    $ZodKSUID: $ZodKSUID,
    $ZodLazy: $ZodLazy,
    $ZodLiteral: $ZodLiteral,
    $ZodMap: $ZodMap,
    $ZodNaN: $ZodNaN,
    $ZodNanoID: $ZodNanoID,
    $ZodNever: $ZodNever,
    $ZodNonOptional: $ZodNonOptional,
    $ZodNull: $ZodNull,
    $ZodNullable: $ZodNullable,
    $ZodNumber: $ZodNumber,
    $ZodNumberFormat: $ZodNumberFormat,
    $ZodObject: $ZodObject,
    $ZodObjectJIT: $ZodObjectJIT,
    $ZodOptional: $ZodOptional,
    $ZodPipe: $ZodPipe,
    $ZodPrefault: $ZodPrefault,
    $ZodPromise: $ZodPromise,
    $ZodReadonly: $ZodReadonly,
    $ZodRealError: $ZodRealError,
    $ZodRecord: $ZodRecord,
    $ZodRegistry: $ZodRegistry,
    $ZodSet: $ZodSet,
    $ZodString: $ZodString,
    $ZodStringFormat: $ZodStringFormat,
    $ZodSuccess: $ZodSuccess,
    $ZodSymbol: $ZodSymbol,
    $ZodTemplateLiteral: $ZodTemplateLiteral,
    $ZodTransform: $ZodTransform,
    $ZodTuple: $ZodTuple,
    $ZodType: $ZodType,
    $ZodULID: $ZodULID,
    $ZodURL: $ZodURL,
    $ZodUUID: $ZodUUID,
    $ZodUndefined: $ZodUndefined,
    $ZodUnion: $ZodUnion,
    $ZodUnknown: $ZodUnknown,
    $ZodVoid: $ZodVoid,
    $ZodXID: $ZodXID,
    $brand: $brand,
    $constructor: $constructor,
    $input: $input,
    $output: $output,
    Doc: Doc,
    JSONSchema: jsonSchema,
    JSONSchemaGenerator: JSONSchemaGenerator,
    NEVER: NEVER,
    TimePrecision: TimePrecision,
    _any: _any,
    _array: _array,
    _base64: _base64,
    _base64url: _base64url,
    _bigint: _bigint,
    _boolean: _boolean$2,
    _catch: _catch$1,
    _check: _check,
    _cidrv4: _cidrv4,
    _cidrv6: _cidrv6,
    _coercedBigint: _coercedBigint,
    _coercedBoolean: _coercedBoolean,
    _coercedDate: _coercedDate,
    _coercedNumber: _coercedNumber,
    _coercedString: _coercedString,
    _cuid: _cuid,
    _cuid2: _cuid2,
    _custom: _custom,
    _date: _date,
    _decode: _decode,
    _decodeAsync: _decodeAsync,
    _default: _default$1,
    _discriminatedUnion: _discriminatedUnion,
    _e164: _e164,
    _email: _email,
    _emoji: _emoji,
    _encode: _encode,
    _encodeAsync: _encodeAsync,
    _endsWith: _endsWith,
    _enum: _enum$1,
    _file: _file,
    _float32: _float32,
    _float64: _float64,
    _gt: _gt,
    _gte: _gte,
    _guid: _guid,
    _includes: _includes,
    _int: _int$1,
    _int32: _int32,
    _int64: _int64,
    _intersection: _intersection,
    _ipv4: _ipv4,
    _ipv6: _ipv6,
    _isoDate: _isoDate,
    _isoDateTime: _isoDateTime,
    _isoDuration: _isoDuration,
    _isoTime: _isoTime,
    _jwt: _jwt,
    _ksuid: _ksuid,
    _lazy: _lazy,
    _length: _length,
    _literal: _literal,
    _lowercase: _lowercase,
    _lt: _lt,
    _lte: _lte,
    _map: _map,
    _max: _lte,
    _maxLength: _maxLength,
    _maxSize: _maxSize,
    _mime: _mime,
    _min: _gte,
    _minLength: _minLength,
    _minSize: _minSize,
    _multipleOf: _multipleOf,
    _nan: _nan,
    _nanoid: _nanoid,
    _nativeEnum: _nativeEnum,
    _negative: _negative,
    _never: _never,
    _nonnegative: _nonnegative,
    _nonoptional: _nonoptional,
    _nonpositive: _nonpositive,
    _normalize: _normalize,
    _null: _null$1,
    _nullable: _nullable,
    _number: _number,
    _optional: _optional,
    _overwrite: _overwrite,
    _parse: _parse,
    _parseAsync: _parseAsync,
    _pipe: _pipe,
    _positive: _positive,
    _promise: _promise,
    _property: _property,
    _readonly: _readonly,
    _record: _record,
    _refine: _refine,
    _regex: _regex,
    _safeDecode: _safeDecode,
    _safeDecodeAsync: _safeDecodeAsync,
    _safeEncode: _safeEncode,
    _safeEncodeAsync: _safeEncodeAsync,
    _safeParse: _safeParse,
    _safeParseAsync: _safeParseAsync,
    _set: _set,
    _size: _size,
    _startsWith: _startsWith,
    _string: _string,
    _stringFormat: _stringFormat,
    _stringbool: _stringbool,
    _success: _success,
    _superRefine: _superRefine,
    _symbol: _symbol,
    _templateLiteral: _templateLiteral,
    _toLowerCase: _toLowerCase,
    _toUpperCase: _toUpperCase,
    _transform: _transform,
    _trim: _trim,
    _tuple: _tuple,
    _uint32: _uint32,
    _uint64: _uint64,
    _ulid: _ulid,
    _undefined: _undefined$1,
    _union: _union,
    _unknown: _unknown,
    _uppercase: _uppercase,
    _url: _url,
    _uuid: _uuid,
    _uuidv4: _uuidv4,
    _uuidv6: _uuidv6,
    _uuidv7: _uuidv7,
    _void: _void$1,
    _xid: _xid,
    clone: clone,
    config: config,
    decode: decode$1,
    decodeAsync: decodeAsync$1,
    encode: encode$1,
    encodeAsync: encodeAsync$1,
    flattenError: flattenError,
    formatError: formatError,
    globalConfig: globalConfig,
    globalRegistry: globalRegistry,
    isValidBase64: isValidBase64,
    isValidBase64URL: isValidBase64URL,
    isValidJWT: isValidJWT,
    locales: index,
    parse: parse$1,
    parseAsync: parseAsync$1,
    prettifyError: prettifyError,
    regexes: regexes,
    registry: registry,
    safeDecode: safeDecode$1,
    safeDecodeAsync: safeDecodeAsync$1,
    safeEncode: safeEncode$1,
    safeEncodeAsync: safeEncodeAsync$1,
    safeParse: safeParse$1,
    safeParseAsync: safeParseAsync$1,
    toDotPath: toDotPath,
    toJSONSchema: toJSONSchema,
    treeifyError: treeifyError,
    util: util,
    version: version
  });

  var checks = /*#__PURE__*/Object.freeze({
    __proto__: null,
    endsWith: _endsWith,
    gt: _gt,
    gte: _gte,
    includes: _includes,
    length: _length,
    lowercase: _lowercase,
    lt: _lt,
    lte: _lte,
    maxLength: _maxLength,
    maxSize: _maxSize,
    mime: _mime,
    minLength: _minLength,
    minSize: _minSize,
    multipleOf: _multipleOf,
    negative: _negative,
    nonnegative: _nonnegative,
    nonpositive: _nonpositive,
    normalize: _normalize,
    overwrite: _overwrite,
    positive: _positive,
    property: _property,
    regex: _regex,
    size: _size,
    startsWith: _startsWith,
    toLowerCase: _toLowerCase,
    toUpperCase: _toUpperCase,
    trim: _trim,
    uppercase: _uppercase
  });

  var ZodISODateTime = /*@__PURE__*/$constructor("ZodISODateTime", function (inst, def) {
    $ZodISODateTime.init(inst, def);
    ZodStringFormat.init(inst, def);
  });
  function datetime(params) {
    return _isoDateTime(ZodISODateTime, params);
  }
  var ZodISODate = /*@__PURE__*/$constructor("ZodISODate", function (inst, def) {
    $ZodISODate.init(inst, def);
    ZodStringFormat.init(inst, def);
  });
  function date$2(params) {
    return _isoDate(ZodISODate, params);
  }
  var ZodISOTime = /*@__PURE__*/$constructor("ZodISOTime", function (inst, def) {
    $ZodISOTime.init(inst, def);
    ZodStringFormat.init(inst, def);
  });
  function time(params) {
    return _isoTime(ZodISOTime, params);
  }
  var ZodISODuration = /*@__PURE__*/$constructor("ZodISODuration", function (inst, def) {
    $ZodISODuration.init(inst, def);
    ZodStringFormat.init(inst, def);
  });
  function duration(params) {
    return _isoDuration(ZodISODuration, params);
  }

  var iso = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ZodISODate: ZodISODate,
    ZodISODateTime: ZodISODateTime,
    ZodISODuration: ZodISODuration,
    ZodISOTime: ZodISOTime,
    date: date$2,
    datetime: datetime,
    duration: duration,
    time: time
  });

  var initializer = function initializer(inst, issues) {
    $ZodError.init(inst, issues);
    inst.name = "ZodError";
    Object.defineProperties(inst, {
      format: {
        value: function value(mapper) {
          return formatError(inst, mapper);
        }
        // enumerable: false,
      },
      flatten: {
        value: function value(mapper) {
          return flattenError(inst, mapper);
        }
        // enumerable: false,
      },
      addIssue: {
        value: function value(issue) {
          inst.issues.push(issue);
          inst.message = JSON.stringify(inst.issues, jsonStringifyReplacer, 2);
        }
        // enumerable: false,
      },
      addIssues: {
        value: function value(issues) {
          var _inst$issues;
          (_inst$issues = inst.issues).push.apply(_inst$issues, _toConsumableArray(issues));
          inst.message = JSON.stringify(inst.issues, jsonStringifyReplacer, 2);
        }
        // enumerable: false,
      },
      isEmpty: {
        get: function get() {
          return inst.issues.length === 0;
        } // enumerable: false,
      }
    });
    // Object.defineProperty(inst, "isEmpty", {
    //   get() {
    //     return inst.issues.length === 0;
    //   },
    // });
  };
  var ZodError = $constructor("ZodError", initializer);
  var ZodRealError = $constructor("ZodError", initializer, {
    Parent: Error
  });
  // /** @deprecated Use `z.core.$ZodErrorMapCtx` instead. */
  // export type ErrorMapCtx = core.$ZodErrorMapCtx;

  var parse = /* @__PURE__ */_parse(ZodRealError);
  var parseAsync = /* @__PURE__ */_parseAsync(ZodRealError);
  var safeParse = /* @__PURE__ */_safeParse(ZodRealError);
  var safeParseAsync = /* @__PURE__ */_safeParseAsync(ZodRealError);
  // Codec functions
  var encode = /* @__PURE__ */_encode(ZodRealError);
  var decode = /* @__PURE__ */_decode(ZodRealError);
  var encodeAsync = /* @__PURE__ */_encodeAsync(ZodRealError);
  var decodeAsync = /* @__PURE__ */_decodeAsync(ZodRealError);
  var safeEncode = /* @__PURE__ */_safeEncode(ZodRealError);
  var safeDecode = /* @__PURE__ */_safeDecode(ZodRealError);
  var safeEncodeAsync = /* @__PURE__ */_safeEncodeAsync(ZodRealError);
  var safeDecodeAsync = /* @__PURE__ */_safeDecodeAsync(ZodRealError);

  var ZodType = /*@__PURE__*/$constructor("ZodType", function (inst, def) {
    $ZodType.init(inst, def);
    inst.def = def;
    inst.type = def.type;
    Object.defineProperty(inst, "_def", {
      value: def
    });
    // base methods
    inst.check = function () {
      var _def$checks;
      for (var _len = arguments.length, checks = new Array(_len), _key = 0; _key < _len; _key++) {
        checks[_key] = arguments[_key];
      }
      return inst.clone(mergeDefs(def, {
        checks: [].concat(_toConsumableArray((_def$checks = def.checks) !== null && _def$checks !== void 0 ? _def$checks : []), _toConsumableArray(checks.map(function (ch) {
          return typeof ch === "function" ? {
            _zod: {
              check: ch,
              def: {
                check: "custom"
              },
              onattach: []
            }
          } : ch;
        })))
      }));
    };
    inst.clone = function (def, params) {
      return clone(inst, def, params);
    };
    inst.brand = function () {
      return inst;
    };
    inst.register = function (reg, meta) {
      reg.add(inst, meta);
      return inst;
    };
    // parsing
    inst.parse = function (data, params) {
      return parse(inst, data, params, {
        callee: inst.parse
      });
    };
    inst.safeParse = function (data, params) {
      return safeParse(inst, data, params);
    };
    inst.parseAsync = /*#__PURE__*/function () {
      var _ref = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee(data, params) {
        return _regenerator().w(function (_context) {
          while (1) switch (_context.n) {
            case 0:
              return _context.a(2, parseAsync(inst, data, params, {
                callee: inst.parseAsync
              }));
          }
        }, _callee);
      }));
      return function (_x, _x2) {
        return _ref.apply(this, arguments);
      };
    }();
    inst.safeParseAsync = /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2(data, params) {
        return _regenerator().w(function (_context2) {
          while (1) switch (_context2.n) {
            case 0:
              return _context2.a(2, safeParseAsync(inst, data, params));
          }
        }, _callee2);
      }));
      return function (_x3, _x4) {
        return _ref2.apply(this, arguments);
      };
    }();
    inst.spa = inst.safeParseAsync;
    // encoding/decoding
    inst.encode = function (data, params) {
      return encode(inst, data, params);
    };
    inst.decode = function (data, params) {
      return decode(inst, data, params);
    };
    inst.encodeAsync = /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee3(data, params) {
        return _regenerator().w(function (_context3) {
          while (1) switch (_context3.n) {
            case 0:
              return _context3.a(2, encodeAsync(inst, data, params));
          }
        }, _callee3);
      }));
      return function (_x5, _x6) {
        return _ref3.apply(this, arguments);
      };
    }();
    inst.decodeAsync = /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee4(data, params) {
        return _regenerator().w(function (_context4) {
          while (1) switch (_context4.n) {
            case 0:
              return _context4.a(2, decodeAsync(inst, data, params));
          }
        }, _callee4);
      }));
      return function (_x7, _x8) {
        return _ref4.apply(this, arguments);
      };
    }();
    inst.safeEncode = function (data, params) {
      return safeEncode(inst, data, params);
    };
    inst.safeDecode = function (data, params) {
      return safeDecode(inst, data, params);
    };
    inst.safeEncodeAsync = /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee5(data, params) {
        return _regenerator().w(function (_context5) {
          while (1) switch (_context5.n) {
            case 0:
              return _context5.a(2, safeEncodeAsync(inst, data, params));
          }
        }, _callee5);
      }));
      return function (_x9, _x0) {
        return _ref5.apply(this, arguments);
      };
    }();
    inst.safeDecodeAsync = /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee6(data, params) {
        return _regenerator().w(function (_context6) {
          while (1) switch (_context6.n) {
            case 0:
              return _context6.a(2, safeDecodeAsync(inst, data, params));
          }
        }, _callee6);
      }));
      return function (_x1, _x10) {
        return _ref6.apply(this, arguments);
      };
    }();
    // refinements
    inst.refine = function (check, params) {
      return inst.check(refine(check, params));
    };
    inst.superRefine = function (refinement) {
      return inst.check(superRefine(refinement));
    };
    inst.overwrite = function (fn) {
      return inst.check(_overwrite(fn));
    };
    // wrappers
    inst.optional = function () {
      return optional(inst);
    };
    inst.nullable = function () {
      return nullable(inst);
    };
    inst.nullish = function () {
      return optional(nullable(inst));
    };
    inst.nonoptional = function (params) {
      return nonoptional(inst, params);
    };
    inst.array = function () {
      return array(inst);
    };
    inst.or = function (arg) {
      return union([inst, arg]);
    };
    inst.and = function (arg) {
      return intersection(inst, arg);
    };
    inst.transform = function (tx) {
      return pipe(inst, transform(tx));
    };
    inst["default"] = function (def) {
      return _default(inst, def);
    };
    inst.prefault = function (def) {
      return prefault(inst, def);
    };
    // inst.coalesce = (def, params) => coalesce(inst, def, params);
    inst["catch"] = function (params) {
      return _catch(inst, params);
    };
    inst.pipe = function (target) {
      return pipe(inst, target);
    };
    inst.readonly = function () {
      return readonly(inst);
    };
    // meta
    inst.describe = function (description) {
      var cl = inst.clone();
      globalRegistry.add(cl, {
        description: description
      });
      return cl;
    };
    Object.defineProperty(inst, "description", {
      get: function get() {
        var _core$globalRegistry$;
        return (_core$globalRegistry$ = globalRegistry.get(inst)) === null || _core$globalRegistry$ === void 0 ? void 0 : _core$globalRegistry$.description;
      },
      configurable: true
    });
    inst.meta = function () {
      if (arguments.length === 0) {
        return globalRegistry.get(inst);
      }
      var cl = inst.clone();
      globalRegistry.add(cl, arguments.length <= 0 ? undefined : arguments[0]);
      return cl;
    };
    // helpers
    inst.isOptional = function () {
      return inst.safeParse(undefined).success;
    };
    inst.isNullable = function () {
      return inst.safeParse(null).success;
    };
    return inst;
  });
  /** @internal */
  var _ZodString = /*@__PURE__*/$constructor("_ZodString", function (inst, def) {
    var _bag$format, _bag$minimum, _bag$maximum;
    $ZodString.init(inst, def);
    ZodType.init(inst, def);
    var bag = inst._zod.bag;
    inst.format = (_bag$format = bag.format) !== null && _bag$format !== void 0 ? _bag$format : null;
    inst.minLength = (_bag$minimum = bag.minimum) !== null && _bag$minimum !== void 0 ? _bag$minimum : null;
    inst.maxLength = (_bag$maximum = bag.maximum) !== null && _bag$maximum !== void 0 ? _bag$maximum : null;
    // validations
    inst.regex = function () {
      return inst.check(_regex.apply(checks, arguments));
    };
    inst.includes = function () {
      return inst.check(_includes.apply(checks, arguments));
    };
    inst.startsWith = function () {
      return inst.check(_startsWith.apply(checks, arguments));
    };
    inst.endsWith = function () {
      return inst.check(_endsWith.apply(checks, arguments));
    };
    inst.min = function () {
      return inst.check(_minLength.apply(checks, arguments));
    };
    inst.max = function () {
      return inst.check(_maxLength.apply(checks, arguments));
    };
    inst.length = function () {
      return inst.check(_length.apply(checks, arguments));
    };
    inst.nonempty = function () {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }
      return inst.check(_minLength.apply(checks, [1].concat(args)));
    };
    inst.lowercase = function (params) {
      return inst.check(_lowercase(params));
    };
    inst.uppercase = function (params) {
      return inst.check(_uppercase(params));
    };
    // transforms
    inst.trim = function () {
      return inst.check(_trim());
    };
    inst.normalize = function () {
      return inst.check(_normalize.apply(checks, arguments));
    };
    inst.toLowerCase = function () {
      return inst.check(_toLowerCase());
    };
    inst.toUpperCase = function () {
      return inst.check(_toUpperCase());
    };
  });
  var ZodString = /*@__PURE__*/$constructor("ZodString", function (inst, def) {
    $ZodString.init(inst, def);
    _ZodString.init(inst, def);
    inst.email = function (params) {
      return inst.check(_email(ZodEmail, params));
    };
    inst.url = function (params) {
      return inst.check(_url(ZodURL, params));
    };
    inst.jwt = function (params) {
      return inst.check(_jwt(ZodJWT, params));
    };
    inst.emoji = function (params) {
      return inst.check(_emoji(ZodEmoji, params));
    };
    inst.guid = function (params) {
      return inst.check(_guid(ZodGUID, params));
    };
    inst.uuid = function (params) {
      return inst.check(_uuid(ZodUUID, params));
    };
    inst.uuidv4 = function (params) {
      return inst.check(_uuidv4(ZodUUID, params));
    };
    inst.uuidv6 = function (params) {
      return inst.check(_uuidv6(ZodUUID, params));
    };
    inst.uuidv7 = function (params) {
      return inst.check(_uuidv7(ZodUUID, params));
    };
    inst.nanoid = function (params) {
      return inst.check(_nanoid(ZodNanoID, params));
    };
    inst.guid = function (params) {
      return inst.check(_guid(ZodGUID, params));
    };
    inst.cuid = function (params) {
      return inst.check(_cuid(ZodCUID, params));
    };
    inst.cuid2 = function (params) {
      return inst.check(_cuid2(ZodCUID2, params));
    };
    inst.ulid = function (params) {
      return inst.check(_ulid(ZodULID, params));
    };
    inst.base64 = function (params) {
      return inst.check(_base64(ZodBase64, params));
    };
    inst.base64url = function (params) {
      return inst.check(_base64url(ZodBase64URL, params));
    };
    inst.xid = function (params) {
      return inst.check(_xid(ZodXID, params));
    };
    inst.ksuid = function (params) {
      return inst.check(_ksuid(ZodKSUID, params));
    };
    inst.ipv4 = function (params) {
      return inst.check(_ipv4(ZodIPv4, params));
    };
    inst.ipv6 = function (params) {
      return inst.check(_ipv6(ZodIPv6, params));
    };
    inst.cidrv4 = function (params) {
      return inst.check(_cidrv4(ZodCIDRv4, params));
    };
    inst.cidrv6 = function (params) {
      return inst.check(_cidrv6(ZodCIDRv6, params));
    };
    inst.e164 = function (params) {
      return inst.check(_e164(ZodE164, params));
    };
    // iso
    inst.datetime = function (params) {
      return inst.check(datetime(params));
    };
    inst.date = function (params) {
      return inst.check(date$2(params));
    };
    inst.time = function (params) {
      return inst.check(time(params));
    };
    inst.duration = function (params) {
      return inst.check(duration(params));
    };
  });
  function string$1(params) {
    return _string(ZodString, params);
  }
  var ZodStringFormat = /*@__PURE__*/$constructor("ZodStringFormat", function (inst, def) {
    $ZodStringFormat.init(inst, def);
    _ZodString.init(inst, def);
  });
  var ZodEmail = /*@__PURE__*/$constructor("ZodEmail", function (inst, def) {
    // ZodStringFormat.init(inst, def);
    $ZodEmail.init(inst, def);
    ZodStringFormat.init(inst, def);
  });
  function email(params) {
    return _email(ZodEmail, params);
  }
  var ZodGUID = /*@__PURE__*/$constructor("ZodGUID", function (inst, def) {
    // ZodStringFormat.init(inst, def);
    $ZodGUID.init(inst, def);
    ZodStringFormat.init(inst, def);
  });
  function guid(params) {
    return _guid(ZodGUID, params);
  }
  var ZodUUID = /*@__PURE__*/$constructor("ZodUUID", function (inst, def) {
    // ZodStringFormat.init(inst, def);
    $ZodUUID.init(inst, def);
    ZodStringFormat.init(inst, def);
  });
  function uuid(params) {
    return _uuid(ZodUUID, params);
  }
  function uuidv4(params) {
    return _uuidv4(ZodUUID, params);
  }
  // ZodUUIDv6
  function uuidv6(params) {
    return _uuidv6(ZodUUID, params);
  }
  // ZodUUIDv7
  function uuidv7(params) {
    return _uuidv7(ZodUUID, params);
  }
  var ZodURL = /*@__PURE__*/$constructor("ZodURL", function (inst, def) {
    // ZodStringFormat.init(inst, def);
    $ZodURL.init(inst, def);
    ZodStringFormat.init(inst, def);
  });
  function url(params) {
    return _url(ZodURL, params);
  }
  function httpUrl(params) {
    return _url(ZodURL, _objectSpread2({
      protocol: /^https?$/,
      hostname: domain
    }, normalizeParams(params)));
  }
  var ZodEmoji = /*@__PURE__*/$constructor("ZodEmoji", function (inst, def) {
    // ZodStringFormat.init(inst, def);
    $ZodEmoji.init(inst, def);
    ZodStringFormat.init(inst, def);
  });
  function emoji(params) {
    return _emoji(ZodEmoji, params);
  }
  var ZodNanoID = /*@__PURE__*/$constructor("ZodNanoID", function (inst, def) {
    // ZodStringFormat.init(inst, def);
    $ZodNanoID.init(inst, def);
    ZodStringFormat.init(inst, def);
  });
  function nanoid(params) {
    return _nanoid(ZodNanoID, params);
  }
  var ZodCUID = /*@__PURE__*/$constructor("ZodCUID", function (inst, def) {
    // ZodStringFormat.init(inst, def);
    $ZodCUID.init(inst, def);
    ZodStringFormat.init(inst, def);
  });
  function cuid(params) {
    return _cuid(ZodCUID, params);
  }
  var ZodCUID2 = /*@__PURE__*/$constructor("ZodCUID2", function (inst, def) {
    // ZodStringFormat.init(inst, def);
    $ZodCUID2.init(inst, def);
    ZodStringFormat.init(inst, def);
  });
  function cuid2(params) {
    return _cuid2(ZodCUID2, params);
  }
  var ZodULID = /*@__PURE__*/$constructor("ZodULID", function (inst, def) {
    // ZodStringFormat.init(inst, def);
    $ZodULID.init(inst, def);
    ZodStringFormat.init(inst, def);
  });
  function ulid(params) {
    return _ulid(ZodULID, params);
  }
  var ZodXID = /*@__PURE__*/$constructor("ZodXID", function (inst, def) {
    // ZodStringFormat.init(inst, def);
    $ZodXID.init(inst, def);
    ZodStringFormat.init(inst, def);
  });
  function xid(params) {
    return _xid(ZodXID, params);
  }
  var ZodKSUID = /*@__PURE__*/$constructor("ZodKSUID", function (inst, def) {
    // ZodStringFormat.init(inst, def);
    $ZodKSUID.init(inst, def);
    ZodStringFormat.init(inst, def);
  });
  function ksuid(params) {
    return _ksuid(ZodKSUID, params);
  }
  var ZodIPv4 = /*@__PURE__*/$constructor("ZodIPv4", function (inst, def) {
    // ZodStringFormat.init(inst, def);
    $ZodIPv4.init(inst, def);
    ZodStringFormat.init(inst, def);
  });
  function ipv4(params) {
    return _ipv4(ZodIPv4, params);
  }
  var ZodIPv6 = /*@__PURE__*/$constructor("ZodIPv6", function (inst, def) {
    // ZodStringFormat.init(inst, def);
    $ZodIPv6.init(inst, def);
    ZodStringFormat.init(inst, def);
  });
  function ipv6(params) {
    return _ipv6(ZodIPv6, params);
  }
  var ZodCIDRv4 = /*@__PURE__*/$constructor("ZodCIDRv4", function (inst, def) {
    $ZodCIDRv4.init(inst, def);
    ZodStringFormat.init(inst, def);
  });
  function cidrv4(params) {
    return _cidrv4(ZodCIDRv4, params);
  }
  var ZodCIDRv6 = /*@__PURE__*/$constructor("ZodCIDRv6", function (inst, def) {
    $ZodCIDRv6.init(inst, def);
    ZodStringFormat.init(inst, def);
  });
  function cidrv6(params) {
    return _cidrv6(ZodCIDRv6, params);
  }
  var ZodBase64 = /*@__PURE__*/$constructor("ZodBase64", function (inst, def) {
    // ZodStringFormat.init(inst, def);
    $ZodBase64.init(inst, def);
    ZodStringFormat.init(inst, def);
  });
  function base64(params) {
    return _base64(ZodBase64, params);
  }
  var ZodBase64URL = /*@__PURE__*/$constructor("ZodBase64URL", function (inst, def) {
    // ZodStringFormat.init(inst, def);
    $ZodBase64URL.init(inst, def);
    ZodStringFormat.init(inst, def);
  });
  function base64url(params) {
    return _base64url(ZodBase64URL, params);
  }
  var ZodE164 = /*@__PURE__*/$constructor("ZodE164", function (inst, def) {
    // ZodStringFormat.init(inst, def);
    $ZodE164.init(inst, def);
    ZodStringFormat.init(inst, def);
  });
  function e164(params) {
    return _e164(ZodE164, params);
  }
  var ZodJWT = /*@__PURE__*/$constructor("ZodJWT", function (inst, def) {
    // ZodStringFormat.init(inst, def);
    $ZodJWT.init(inst, def);
    ZodStringFormat.init(inst, def);
  });
  function jwt(params) {
    return _jwt(ZodJWT, params);
  }
  var ZodCustomStringFormat = /*@__PURE__*/$constructor("ZodCustomStringFormat", function (inst, def) {
    // ZodStringFormat.init(inst, def);
    $ZodCustomStringFormat.init(inst, def);
    ZodStringFormat.init(inst, def);
  });
  function stringFormat(format, fnOrRegex) {
    var _params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    return _stringFormat(ZodCustomStringFormat, format, fnOrRegex, _params);
  }
  function hostname(_params) {
    return _stringFormat(ZodCustomStringFormat, "hostname", hostname$1, _params);
  }
  function hex(_params) {
    return _stringFormat(ZodCustomStringFormat, "hex", hex$1, _params);
  }
  function hash(alg, params) {
    var _params$enc;
    var enc = (_params$enc = params === null || params === void 0 ? void 0 : params.enc) !== null && _params$enc !== void 0 ? _params$enc : "hex";
    var format = "".concat(alg, "_").concat(enc);
    var regex = regexes[format];
    if (!regex) throw new Error("Unrecognized hash format: ".concat(format));
    return _stringFormat(ZodCustomStringFormat, format, regex, params);
  }
  var ZodNumber = /*@__PURE__*/$constructor("ZodNumber", function (inst, def) {
    var _Math$max, _bag$minimum2, _bag$exclusiveMinimum, _Math$min, _bag$maximum2, _bag$exclusiveMaximum, _bag$format2, _bag$multipleOf, _bag$format3;
    $ZodNumber.init(inst, def);
    ZodType.init(inst, def);
    inst.gt = function (value, params) {
      return inst.check(_gt(value, params));
    };
    inst.gte = function (value, params) {
      return inst.check(_gte(value, params));
    };
    inst.min = function (value, params) {
      return inst.check(_gte(value, params));
    };
    inst.lt = function (value, params) {
      return inst.check(_lt(value, params));
    };
    inst.lte = function (value, params) {
      return inst.check(_lte(value, params));
    };
    inst.max = function (value, params) {
      return inst.check(_lte(value, params));
    };
    inst["int"] = function (params) {
      return inst.check(_int(params));
    };
    inst.safe = function (params) {
      return inst.check(_int(params));
    };
    inst.positive = function (params) {
      return inst.check(_gt(0, params));
    };
    inst.nonnegative = function (params) {
      return inst.check(_gte(0, params));
    };
    inst.negative = function (params) {
      return inst.check(_lt(0, params));
    };
    inst.nonpositive = function (params) {
      return inst.check(_lte(0, params));
    };
    inst.multipleOf = function (value, params) {
      return inst.check(_multipleOf(value, params));
    };
    inst.step = function (value, params) {
      return inst.check(_multipleOf(value, params));
    };
    // inst.finite = (params) => inst.check(core.finite(params));
    inst.finite = function () {
      return inst;
    };
    var bag = inst._zod.bag;
    inst.minValue = (_Math$max = Math.max((_bag$minimum2 = bag.minimum) !== null && _bag$minimum2 !== void 0 ? _bag$minimum2 : Number.NEGATIVE_INFINITY, (_bag$exclusiveMinimum = bag.exclusiveMinimum) !== null && _bag$exclusiveMinimum !== void 0 ? _bag$exclusiveMinimum : Number.NEGATIVE_INFINITY)) !== null && _Math$max !== void 0 ? _Math$max : null;
    inst.maxValue = (_Math$min = Math.min((_bag$maximum2 = bag.maximum) !== null && _bag$maximum2 !== void 0 ? _bag$maximum2 : Number.POSITIVE_INFINITY, (_bag$exclusiveMaximum = bag.exclusiveMaximum) !== null && _bag$exclusiveMaximum !== void 0 ? _bag$exclusiveMaximum : Number.POSITIVE_INFINITY)) !== null && _Math$min !== void 0 ? _Math$min : null;
    inst.isInt = ((_bag$format2 = bag.format) !== null && _bag$format2 !== void 0 ? _bag$format2 : "").includes("int") || Number.isSafeInteger((_bag$multipleOf = bag.multipleOf) !== null && _bag$multipleOf !== void 0 ? _bag$multipleOf : 0.5);
    inst.isFinite = true;
    inst.format = (_bag$format3 = bag.format) !== null && _bag$format3 !== void 0 ? _bag$format3 : null;
  });
  function number$1(params) {
    return _number(ZodNumber, params);
  }
  var ZodNumberFormat = /*@__PURE__*/$constructor("ZodNumberFormat", function (inst, def) {
    $ZodNumberFormat.init(inst, def);
    ZodNumber.init(inst, def);
  });
  function _int(params) {
    return _int$1(ZodNumberFormat, params);
  }
  function float32(params) {
    return _float32(ZodNumberFormat, params);
  }
  function float64(params) {
    return _float64(ZodNumberFormat, params);
  }
  function int32(params) {
    return _int32(ZodNumberFormat, params);
  }
  function uint32(params) {
    return _uint32(ZodNumberFormat, params);
  }
  var ZodBoolean = /*@__PURE__*/$constructor("ZodBoolean", function (inst, def) {
    $ZodBoolean.init(inst, def);
    ZodType.init(inst, def);
  });
  function _boolean$1(params) {
    return _boolean$2(ZodBoolean, params);
  }
  var ZodBigInt = /*@__PURE__*/$constructor("ZodBigInt", function (inst, def) {
    var _bag$minimum3, _bag$maximum3, _bag$format4;
    $ZodBigInt.init(inst, def);
    ZodType.init(inst, def);
    inst.gte = function (value, params) {
      return inst.check(_gte(value, params));
    };
    inst.min = function (value, params) {
      return inst.check(_gte(value, params));
    };
    inst.gt = function (value, params) {
      return inst.check(_gt(value, params));
    };
    inst.gte = function (value, params) {
      return inst.check(_gte(value, params));
    };
    inst.min = function (value, params) {
      return inst.check(_gte(value, params));
    };
    inst.lt = function (value, params) {
      return inst.check(_lt(value, params));
    };
    inst.lte = function (value, params) {
      return inst.check(_lte(value, params));
    };
    inst.max = function (value, params) {
      return inst.check(_lte(value, params));
    };
    inst.positive = function (params) {
      return inst.check(_gt(BigInt(0), params));
    };
    inst.negative = function (params) {
      return inst.check(_lt(BigInt(0), params));
    };
    inst.nonpositive = function (params) {
      return inst.check(_lte(BigInt(0), params));
    };
    inst.nonnegative = function (params) {
      return inst.check(_gte(BigInt(0), params));
    };
    inst.multipleOf = function (value, params) {
      return inst.check(_multipleOf(value, params));
    };
    var bag = inst._zod.bag;
    inst.minValue = (_bag$minimum3 = bag.minimum) !== null && _bag$minimum3 !== void 0 ? _bag$minimum3 : null;
    inst.maxValue = (_bag$maximum3 = bag.maximum) !== null && _bag$maximum3 !== void 0 ? _bag$maximum3 : null;
    inst.format = (_bag$format4 = bag.format) !== null && _bag$format4 !== void 0 ? _bag$format4 : null;
  });
  function bigint$1(params) {
    return _bigint(ZodBigInt, params);
  }
  var ZodBigIntFormat = /*@__PURE__*/$constructor("ZodBigIntFormat", function (inst, def) {
    $ZodBigIntFormat.init(inst, def);
    ZodBigInt.init(inst, def);
  });
  // int64
  function int64(params) {
    return _int64(ZodBigIntFormat, params);
  }
  // uint64
  function uint64(params) {
    return _uint64(ZodBigIntFormat, params);
  }
  var ZodSymbol = /*@__PURE__*/$constructor("ZodSymbol", function (inst, def) {
    $ZodSymbol.init(inst, def);
    ZodType.init(inst, def);
  });
  function symbol(params) {
    return _symbol(ZodSymbol, params);
  }
  var ZodUndefined = /*@__PURE__*/$constructor("ZodUndefined", function (inst, def) {
    $ZodUndefined.init(inst, def);
    ZodType.init(inst, def);
  });
  function _undefined(params) {
    return _undefined$1(ZodUndefined, params);
  }
  var ZodNull = /*@__PURE__*/$constructor("ZodNull", function (inst, def) {
    $ZodNull.init(inst, def);
    ZodType.init(inst, def);
  });
  function _null(params) {
    return _null$1(ZodNull, params);
  }
  var ZodAny = /*@__PURE__*/$constructor("ZodAny", function (inst, def) {
    $ZodAny.init(inst, def);
    ZodType.init(inst, def);
  });
  function any() {
    return _any(ZodAny);
  }
  var ZodUnknown = /*@__PURE__*/$constructor("ZodUnknown", function (inst, def) {
    $ZodUnknown.init(inst, def);
    ZodType.init(inst, def);
  });
  function unknown() {
    return _unknown(ZodUnknown);
  }
  var ZodNever = /*@__PURE__*/$constructor("ZodNever", function (inst, def) {
    $ZodNever.init(inst, def);
    ZodType.init(inst, def);
  });
  function never(params) {
    return _never(ZodNever, params);
  }
  var ZodVoid = /*@__PURE__*/$constructor("ZodVoid", function (inst, def) {
    $ZodVoid.init(inst, def);
    ZodType.init(inst, def);
  });
  function _void(params) {
    return _void$1(ZodVoid, params);
  }
  var ZodDate = /*@__PURE__*/$constructor("ZodDate", function (inst, def) {
    $ZodDate.init(inst, def);
    ZodType.init(inst, def);
    inst.min = function (value, params) {
      return inst.check(_gte(value, params));
    };
    inst.max = function (value, params) {
      return inst.check(_lte(value, params));
    };
    var c = inst._zod.bag;
    inst.minDate = c.minimum ? new Date(c.minimum) : null;
    inst.maxDate = c.maximum ? new Date(c.maximum) : null;
  });
  function date$1(params) {
    return _date(ZodDate, params);
  }
  var ZodArray = /*@__PURE__*/$constructor("ZodArray", function (inst, def) {
    $ZodArray.init(inst, def);
    ZodType.init(inst, def);
    inst.element = def.element;
    inst.min = function (minLength, params) {
      return inst.check(_minLength(minLength, params));
    };
    inst.nonempty = function (params) {
      return inst.check(_minLength(1, params));
    };
    inst.max = function (maxLength, params) {
      return inst.check(_maxLength(maxLength, params));
    };
    inst.length = function (len, params) {
      return inst.check(_length(len, params));
    };
    inst.unwrap = function () {
      return inst.element;
    };
  });
  function array(element, params) {
    return _array(ZodArray, element, params);
  }
  // .keyof
  function keyof(schema) {
    var shape = schema._zod.def.shape;
    return _enum(Object.keys(shape));
  }
  var ZodObject = /*@__PURE__*/$constructor("ZodObject", function (inst, def) {
    $ZodObjectJIT.init(inst, def);
    ZodType.init(inst, def);
    defineLazy(inst, "shape", function () {
      return def.shape;
    });
    inst.keyof = function () {
      return _enum(Object.keys(inst._zod.def.shape));
    };
    inst.catchall = function (catchall) {
      return inst.clone(_objectSpread2(_objectSpread2({}, inst._zod.def), {}, {
        catchall: catchall
      }));
    };
    inst.passthrough = function () {
      return inst.clone(_objectSpread2(_objectSpread2({}, inst._zod.def), {}, {
        catchall: unknown()
      }));
    };
    inst.loose = function () {
      return inst.clone(_objectSpread2(_objectSpread2({}, inst._zod.def), {}, {
        catchall: unknown()
      }));
    };
    inst.strict = function () {
      return inst.clone(_objectSpread2(_objectSpread2({}, inst._zod.def), {}, {
        catchall: never()
      }));
    };
    inst.strip = function () {
      return inst.clone(_objectSpread2(_objectSpread2({}, inst._zod.def), {}, {
        catchall: undefined
      }));
    };
    inst.extend = function (incoming) {
      return extend(inst, incoming);
    };
    inst.safeExtend = function (incoming) {
      return safeExtend(inst, incoming);
    };
    inst.merge = function (other) {
      return merge(inst, other);
    };
    inst.pick = function (mask) {
      return pick(inst, mask);
    };
    inst.omit = function (mask) {
      return omit(inst, mask);
    };
    inst.partial = function () {
      return partial(ZodOptional, inst, arguments.length <= 0 ? undefined : arguments[0]);
    };
    inst.required = function () {
      return required(ZodNonOptional, inst, arguments.length <= 0 ? undefined : arguments[0]);
    };
  });
  function object(shape, params) {
    var def = _objectSpread2({
      type: "object",
      shape: shape !== null && shape !== void 0 ? shape : {}
    }, normalizeParams(params));
    return new ZodObject(def);
  }
  // strictObject
  function strictObject(shape, params) {
    return new ZodObject(_objectSpread2({
      type: "object",
      shape: shape,
      catchall: never()
    }, normalizeParams(params)));
  }
  // looseObject
  function looseObject(shape, params) {
    return new ZodObject(_objectSpread2({
      type: "object",
      shape: shape,
      catchall: unknown()
    }, normalizeParams(params)));
  }
  var ZodUnion = /*@__PURE__*/$constructor("ZodUnion", function (inst, def) {
    $ZodUnion.init(inst, def);
    ZodType.init(inst, def);
    inst.options = def.options;
  });
  function union(options, params) {
    return new ZodUnion(_objectSpread2({
      type: "union",
      options: options
    }, normalizeParams(params)));
  }
  var ZodDiscriminatedUnion = /*@__PURE__*/$constructor("ZodDiscriminatedUnion", function (inst, def) {
    ZodUnion.init(inst, def);
    $ZodDiscriminatedUnion.init(inst, def);
  });
  function discriminatedUnion(discriminator, options, params) {
    // const [options, params] = args;
    return new ZodDiscriminatedUnion(_objectSpread2({
      type: "union",
      options: options,
      discriminator: discriminator
    }, normalizeParams(params)));
  }
  var ZodIntersection = /*@__PURE__*/$constructor("ZodIntersection", function (inst, def) {
    $ZodIntersection.init(inst, def);
    ZodType.init(inst, def);
  });
  function intersection(left, right) {
    return new ZodIntersection({
      type: "intersection",
      left: left,
      right: right
    });
  }
  var ZodTuple = /*@__PURE__*/$constructor("ZodTuple", function (inst, def) {
    $ZodTuple.init(inst, def);
    ZodType.init(inst, def);
    inst.rest = function (rest) {
      return inst.clone(_objectSpread2(_objectSpread2({}, inst._zod.def), {}, {
        rest: rest
      }));
    };
  });
  function tuple(items, _paramsOrRest, _params) {
    var hasRest = _paramsOrRest instanceof $ZodType;
    var params = hasRest ? _params : _paramsOrRest;
    var rest = hasRest ? _paramsOrRest : null;
    return new ZodTuple(_objectSpread2({
      type: "tuple",
      items: items,
      rest: rest
    }, normalizeParams(params)));
  }
  var ZodRecord = /*@__PURE__*/$constructor("ZodRecord", function (inst, def) {
    $ZodRecord.init(inst, def);
    ZodType.init(inst, def);
    inst.keyType = def.keyType;
    inst.valueType = def.valueType;
  });
  function record(keyType, valueType, params) {
    return new ZodRecord(_objectSpread2({
      type: "record",
      keyType: keyType,
      valueType: valueType
    }, normalizeParams(params)));
  }
  // type alksjf = core.output<core.$ZodRecordKey>;
  function partialRecord(keyType, valueType, params) {
    var k = clone(keyType);
    k._zod.values = undefined;
    return new ZodRecord(_objectSpread2({
      type: "record",
      keyType: k,
      valueType: valueType
    }, normalizeParams(params)));
  }
  var ZodMap = /*@__PURE__*/$constructor("ZodMap", function (inst, def) {
    $ZodMap.init(inst, def);
    ZodType.init(inst, def);
    inst.keyType = def.keyType;
    inst.valueType = def.valueType;
  });
  function map(keyType, valueType, params) {
    return new ZodMap(_objectSpread2({
      type: "map",
      keyType: keyType,
      valueType: valueType
    }, normalizeParams(params)));
  }
  var ZodSet = /*@__PURE__*/$constructor("ZodSet", function (inst, def) {
    $ZodSet.init(inst, def);
    ZodType.init(inst, def);
    inst.min = function () {
      return inst.check(_minSize.apply(core, arguments));
    };
    inst.nonempty = function (params) {
      return inst.check(_minSize(1, params));
    };
    inst.max = function () {
      return inst.check(_maxSize.apply(core, arguments));
    };
    inst.size = function () {
      return inst.check(_size.apply(core, arguments));
    };
  });
  function set(valueType, params) {
    return new ZodSet(_objectSpread2({
      type: "set",
      valueType: valueType
    }, normalizeParams(params)));
  }
  var ZodEnum = /*@__PURE__*/$constructor("ZodEnum", function (inst, def) {
    $ZodEnum.init(inst, def);
    ZodType.init(inst, def);
    inst["enum"] = def.entries;
    inst.options = Object.values(def.entries);
    var keys = new Set(Object.keys(def.entries));
    inst.extract = function (values, params) {
      var newEntries = {};
      var _iterator = _createForOfIteratorHelper(values),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var value = _step.value;
          if (keys.has(value)) {
            newEntries[value] = def.entries[value];
          } else throw new Error("Key ".concat(value, " not found in enum"));
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      return new ZodEnum(_objectSpread2(_objectSpread2(_objectSpread2({}, def), {}, {
        checks: []
      }, normalizeParams(params)), {}, {
        entries: newEntries
      }));
    };
    inst.exclude = function (values, params) {
      var newEntries = _objectSpread2({}, def.entries);
      var _iterator2 = _createForOfIteratorHelper(values),
        _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var value = _step2.value;
          if (keys.has(value)) {
            delete newEntries[value];
          } else throw new Error("Key ".concat(value, " not found in enum"));
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
      return new ZodEnum(_objectSpread2(_objectSpread2(_objectSpread2({}, def), {}, {
        checks: []
      }, normalizeParams(params)), {}, {
        entries: newEntries
      }));
    };
  });
  function _enum(values, params) {
    var entries = Array.isArray(values) ? Object.fromEntries(values.map(function (v) {
      return [v, v];
    })) : values;
    return new ZodEnum(_objectSpread2({
      type: "enum",
      entries: entries
    }, normalizeParams(params)));
  }
  /** @deprecated This API has been merged into `z.enum()`. Use `z.enum()` instead.
   *
   * ```ts
   * enum Colors { red, green, blue }
   * z.enum(Colors);
   * ```
   */
  function nativeEnum(entries, params) {
    return new ZodEnum(_objectSpread2({
      type: "enum",
      entries: entries
    }, normalizeParams(params)));
  }
  var ZodLiteral = /*@__PURE__*/$constructor("ZodLiteral", function (inst, def) {
    $ZodLiteral.init(inst, def);
    ZodType.init(inst, def);
    inst.values = new Set(def.values);
    Object.defineProperty(inst, "value", {
      get: function get() {
        if (def.values.length > 1) {
          throw new Error("This schema contains multiple valid literal values. Use `.values` instead.");
        }
        return def.values[0];
      }
    });
  });
  function literal(value, params) {
    return new ZodLiteral(_objectSpread2({
      type: "literal",
      values: Array.isArray(value) ? value : [value]
    }, normalizeParams(params)));
  }
  var ZodFile = /*@__PURE__*/$constructor("ZodFile", function (inst, def) {
    $ZodFile.init(inst, def);
    ZodType.init(inst, def);
    inst.min = function (size, params) {
      return inst.check(_minSize(size, params));
    };
    inst.max = function (size, params) {
      return inst.check(_maxSize(size, params));
    };
    inst.mime = function (types, params) {
      return inst.check(_mime(Array.isArray(types) ? types : [types], params));
    };
  });
  function file(params) {
    return _file(ZodFile, params);
  }
  var ZodTransform = /*@__PURE__*/$constructor("ZodTransform", function (inst, def) {
    $ZodTransform.init(inst, def);
    ZodType.init(inst, def);
    inst._zod.parse = function (payload, _ctx) {
      if (_ctx.direction === "backward") {
        throw new $ZodEncodeError(inst.constructor.name);
      }
      payload.addIssue = function (issue$1) {
        if (typeof issue$1 === "string") {
          payload.issues.push(issue(issue$1, payload.value, def));
        } else {
          var _issue$code, _issue$input, _issue$inst;
          // for Zod 3 backwards compatibility
          var _issue = issue$1;
          if (_issue.fatal) _issue["continue"] = false;
          (_issue$code = _issue.code) !== null && _issue$code !== void 0 ? _issue$code : _issue.code = "custom";
          (_issue$input = _issue.input) !== null && _issue$input !== void 0 ? _issue$input : _issue.input = payload.value;
          (_issue$inst = _issue.inst) !== null && _issue$inst !== void 0 ? _issue$inst : _issue.inst = inst;
          // _issue.continue ??= true;
          payload.issues.push(issue(_issue));
        }
      };
      var output = def.transform(payload.value, payload);
      if (output instanceof Promise) {
        return output.then(function (output) {
          payload.value = output;
          return payload;
        });
      }
      payload.value = output;
      return payload;
    };
  });
  function transform(fn) {
    return new ZodTransform({
      type: "transform",
      transform: fn
    });
  }
  var ZodOptional = /*@__PURE__*/$constructor("ZodOptional", function (inst, def) {
    $ZodOptional.init(inst, def);
    ZodType.init(inst, def);
    inst.unwrap = function () {
      return inst._zod.def.innerType;
    };
  });
  function optional(innerType) {
    return new ZodOptional({
      type: "optional",
      innerType: innerType
    });
  }
  var ZodNullable = /*@__PURE__*/$constructor("ZodNullable", function (inst, def) {
    $ZodNullable.init(inst, def);
    ZodType.init(inst, def);
    inst.unwrap = function () {
      return inst._zod.def.innerType;
    };
  });
  function nullable(innerType) {
    return new ZodNullable({
      type: "nullable",
      innerType: innerType
    });
  }
  // nullish
  function nullish(innerType) {
    return optional(nullable(innerType));
  }
  var ZodDefault = /*@__PURE__*/$constructor("ZodDefault", function (inst, def) {
    $ZodDefault.init(inst, def);
    ZodType.init(inst, def);
    inst.unwrap = function () {
      return inst._zod.def.innerType;
    };
    inst.removeDefault = inst.unwrap;
  });
  function _default(innerType, defaultValue) {
    return new ZodDefault({
      type: "default",
      innerType: innerType,
      get defaultValue() {
        return typeof defaultValue === "function" ? defaultValue() : shallowClone(defaultValue);
      }
    });
  }
  var ZodPrefault = /*@__PURE__*/$constructor("ZodPrefault", function (inst, def) {
    $ZodPrefault.init(inst, def);
    ZodType.init(inst, def);
    inst.unwrap = function () {
      return inst._zod.def.innerType;
    };
  });
  function prefault(innerType, defaultValue) {
    return new ZodPrefault({
      type: "prefault",
      innerType: innerType,
      get defaultValue() {
        return typeof defaultValue === "function" ? defaultValue() : shallowClone(defaultValue);
      }
    });
  }
  var ZodNonOptional = /*@__PURE__*/$constructor("ZodNonOptional", function (inst, def) {
    $ZodNonOptional.init(inst, def);
    ZodType.init(inst, def);
    inst.unwrap = function () {
      return inst._zod.def.innerType;
    };
  });
  function nonoptional(innerType, params) {
    return new ZodNonOptional(_objectSpread2({
      type: "nonoptional",
      innerType: innerType
    }, normalizeParams(params)));
  }
  var ZodSuccess = /*@__PURE__*/$constructor("ZodSuccess", function (inst, def) {
    $ZodSuccess.init(inst, def);
    ZodType.init(inst, def);
    inst.unwrap = function () {
      return inst._zod.def.innerType;
    };
  });
  function success(innerType) {
    return new ZodSuccess({
      type: "success",
      innerType: innerType
    });
  }
  var ZodCatch = /*@__PURE__*/$constructor("ZodCatch", function (inst, def) {
    $ZodCatch.init(inst, def);
    ZodType.init(inst, def);
    inst.unwrap = function () {
      return inst._zod.def.innerType;
    };
    inst.removeCatch = inst.unwrap;
  });
  function _catch(innerType, catchValue) {
    return new ZodCatch({
      type: "catch",
      innerType: innerType,
      catchValue: typeof catchValue === "function" ? catchValue : function () {
        return catchValue;
      }
    });
  }
  var ZodNaN = /*@__PURE__*/$constructor("ZodNaN", function (inst, def) {
    $ZodNaN.init(inst, def);
    ZodType.init(inst, def);
  });
  function nan(params) {
    return _nan(ZodNaN, params);
  }
  var ZodPipe = /*@__PURE__*/$constructor("ZodPipe", function (inst, def) {
    $ZodPipe.init(inst, def);
    ZodType.init(inst, def);
    inst["in"] = def["in"];
    inst.out = def.out;
  });
  function pipe(in_, out) {
    return new ZodPipe({
      type: "pipe",
      "in": in_,
      out: out
      // ...util.normalizeParams(params),
    });
  }
  var ZodCodec = /*@__PURE__*/$constructor("ZodCodec", function (inst, def) {
    ZodPipe.init(inst, def);
    $ZodCodec.init(inst, def);
  });
  function codec(in_, out, params) {
    return new ZodCodec({
      type: "pipe",
      "in": in_,
      out: out,
      transform: params.decode,
      reverseTransform: params.encode
    });
  }
  var ZodReadonly = /*@__PURE__*/$constructor("ZodReadonly", function (inst, def) {
    $ZodReadonly.init(inst, def);
    ZodType.init(inst, def);
    inst.unwrap = function () {
      return inst._zod.def.innerType;
    };
  });
  function readonly(innerType) {
    return new ZodReadonly({
      type: "readonly",
      innerType: innerType
    });
  }
  var ZodTemplateLiteral = /*@__PURE__*/$constructor("ZodTemplateLiteral", function (inst, def) {
    $ZodTemplateLiteral.init(inst, def);
    ZodType.init(inst, def);
  });
  function templateLiteral(parts, params) {
    return new ZodTemplateLiteral(_objectSpread2({
      type: "template_literal",
      parts: parts
    }, normalizeParams(params)));
  }
  var ZodLazy = /*@__PURE__*/$constructor("ZodLazy", function (inst, def) {
    $ZodLazy.init(inst, def);
    ZodType.init(inst, def);
    inst.unwrap = function () {
      return inst._zod.def.getter();
    };
  });
  function lazy(getter) {
    return new ZodLazy({
      type: "lazy",
      getter: getter
    });
  }
  var ZodPromise = /*@__PURE__*/$constructor("ZodPromise", function (inst, def) {
    $ZodPromise.init(inst, def);
    ZodType.init(inst, def);
    inst.unwrap = function () {
      return inst._zod.def.innerType;
    };
  });
  function promise(innerType) {
    return new ZodPromise({
      type: "promise",
      innerType: innerType
    });
  }
  var ZodFunction = /*@__PURE__*/$constructor("ZodFunction", function (inst, def) {
    $ZodFunction.init(inst, def);
    ZodType.init(inst, def);
  });
  function _function(params) {
    var _params$input, _params$output;
    return new ZodFunction({
      type: "function",
      input: Array.isArray(params === null || params === void 0 ? void 0 : params.input) ? tuple(params === null || params === void 0 ? void 0 : params.input) : (_params$input = params === null || params === void 0 ? void 0 : params.input) !== null && _params$input !== void 0 ? _params$input : array(unknown()),
      output: (_params$output = params === null || params === void 0 ? void 0 : params.output) !== null && _params$output !== void 0 ? _params$output : unknown()
    });
  }
  var ZodCustom = /*@__PURE__*/$constructor("ZodCustom", function (inst, def) {
    $ZodCustom.init(inst, def);
    ZodType.init(inst, def);
  });
  // custom checks
  function check$5(fn) {
    var ch = new $ZodCheck({
      check: "custom"
      // ...util.normalizeParams(params),
    });
    ch._zod.check = fn;
    return ch;
  }
  function custom(fn, _params) {
    return _custom(ZodCustom, fn !== null && fn !== void 0 ? fn : function () {
      return true;
    }, _params);
  }
  function refine(fn) {
    var _params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    return _refine(ZodCustom, fn, _params);
  }
  // superRefine
  function superRefine(fn) {
    return _superRefine(fn);
  }
  function _instanceof(cls) {
    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
      error: "Input not instance of ".concat(cls.name)
    };
    var inst = new ZodCustom(_objectSpread2({
      type: "custom",
      check: "custom",
      fn: function fn(data) {
        return data instanceof cls;
      },
      abort: true
    }, normalizeParams(params)));
    inst._zod.bag.Class = cls;
    return inst;
  }
  // stringbool
  var stringbool = function stringbool() {
    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }
    return _stringbool.apply(core, [{
      Codec: ZodCodec,
      Boolean: ZodBoolean,
      String: ZodString
    }].concat(args));
  };
  function json(params) {
    var jsonSchema = lazy(function () {
      return union([string$1(params), number$1(), _boolean$1(), _null(), array(jsonSchema), record(string$1(), jsonSchema)]);
    });
    return jsonSchema;
  }
  // preprocess
  // /** @deprecated Use `z.pipe()` and `z.transform()` instead. */
  function preprocess(fn, schema) {
    return pipe(transform(fn), schema);
  }

  // Zod 3 compat layer
  /** @deprecated Use the raw string literal codes instead, e.g. "invalid_type". */
  var ZodIssueCode = {
    invalid_type: "invalid_type",
    too_big: "too_big",
    too_small: "too_small",
    invalid_format: "invalid_format",
    not_multiple_of: "not_multiple_of",
    unrecognized_keys: "unrecognized_keys",
    invalid_union: "invalid_union",
    invalid_key: "invalid_key",
    invalid_element: "invalid_element",
    invalid_value: "invalid_value",
    custom: "custom"
  };
  /** @deprecated Use `z.config(params)` instead. */
  function setErrorMap(map) {
    config({
      customError: map
    });
  }
  /** @deprecated Use `z.config()` instead. */
  function getErrorMap() {
    return config().customError;
  }
  /** @deprecated Do not use. Stub definition, only included for zod-to-json-schema compatibility. */
  var ZodFirstPartyTypeKind;
  (function (ZodFirstPartyTypeKind) {})(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));

  function string(params) {
    return _coercedString(ZodString, params);
  }
  function number(params) {
    return _coercedNumber(ZodNumber, params);
  }
  function _boolean(params) {
    return _coercedBoolean(ZodBoolean, params);
  }
  function bigint(params) {
    return _coercedBigint(ZodBigInt, params);
  }
  function date(params) {
    return _coercedDate(ZodDate, params);
  }

  var coerce = /*#__PURE__*/Object.freeze({
    __proto__: null,
    bigint: bigint,
    boolean: _boolean,
    date: date,
    number: number,
    string: string
  });

  config(en());

  var z = /*#__PURE__*/Object.freeze({
    __proto__: null,
    $brand: $brand,
    $input: $input,
    $output: $output,
    NEVER: NEVER,
    TimePrecision: TimePrecision,
    ZodAny: ZodAny,
    ZodArray: ZodArray,
    ZodBase64: ZodBase64,
    ZodBase64URL: ZodBase64URL,
    ZodBigInt: ZodBigInt,
    ZodBigIntFormat: ZodBigIntFormat,
    ZodBoolean: ZodBoolean,
    ZodCIDRv4: ZodCIDRv4,
    ZodCIDRv6: ZodCIDRv6,
    ZodCUID: ZodCUID,
    ZodCUID2: ZodCUID2,
    ZodCatch: ZodCatch,
    ZodCodec: ZodCodec,
    ZodCustom: ZodCustom,
    ZodCustomStringFormat: ZodCustomStringFormat,
    ZodDate: ZodDate,
    ZodDefault: ZodDefault,
    ZodDiscriminatedUnion: ZodDiscriminatedUnion,
    ZodE164: ZodE164,
    ZodEmail: ZodEmail,
    ZodEmoji: ZodEmoji,
    ZodEnum: ZodEnum,
    ZodError: ZodError,
    ZodFile: ZodFile,
    get ZodFirstPartyTypeKind () { return ZodFirstPartyTypeKind; },
    ZodFunction: ZodFunction,
    ZodGUID: ZodGUID,
    ZodIPv4: ZodIPv4,
    ZodIPv6: ZodIPv6,
    ZodISODate: ZodISODate,
    ZodISODateTime: ZodISODateTime,
    ZodISODuration: ZodISODuration,
    ZodISOTime: ZodISOTime,
    ZodIntersection: ZodIntersection,
    ZodIssueCode: ZodIssueCode,
    ZodJWT: ZodJWT,
    ZodKSUID: ZodKSUID,
    ZodLazy: ZodLazy,
    ZodLiteral: ZodLiteral,
    ZodMap: ZodMap,
    ZodNaN: ZodNaN,
    ZodNanoID: ZodNanoID,
    ZodNever: ZodNever,
    ZodNonOptional: ZodNonOptional,
    ZodNull: ZodNull,
    ZodNullable: ZodNullable,
    ZodNumber: ZodNumber,
    ZodNumberFormat: ZodNumberFormat,
    ZodObject: ZodObject,
    ZodOptional: ZodOptional,
    ZodPipe: ZodPipe,
    ZodPrefault: ZodPrefault,
    ZodPromise: ZodPromise,
    ZodReadonly: ZodReadonly,
    ZodRealError: ZodRealError,
    ZodRecord: ZodRecord,
    ZodSet: ZodSet,
    ZodString: ZodString,
    ZodStringFormat: ZodStringFormat,
    ZodSuccess: ZodSuccess,
    ZodSymbol: ZodSymbol,
    ZodTemplateLiteral: ZodTemplateLiteral,
    ZodTransform: ZodTransform,
    ZodTuple: ZodTuple,
    ZodType: ZodType,
    ZodULID: ZodULID,
    ZodURL: ZodURL,
    ZodUUID: ZodUUID,
    ZodUndefined: ZodUndefined,
    ZodUnion: ZodUnion,
    ZodUnknown: ZodUnknown,
    ZodVoid: ZodVoid,
    ZodXID: ZodXID,
    _ZodString: _ZodString,
    _default: _default,
    _function: _function,
    any: any,
    array: array,
    base64: base64,
    base64url: base64url,
    bigint: bigint$1,
    boolean: _boolean$1,
    catch: _catch,
    check: check$5,
    cidrv4: cidrv4,
    cidrv6: cidrv6,
    clone: clone,
    codec: codec,
    coerce: coerce,
    config: config,
    core: core,
    cuid: cuid,
    cuid2: cuid2,
    custom: custom,
    date: date$1,
    decode: decode,
    decodeAsync: decodeAsync,
    discriminatedUnion: discriminatedUnion,
    e164: e164,
    email: email,
    emoji: emoji,
    encode: encode,
    encodeAsync: encodeAsync,
    endsWith: _endsWith,
    enum: _enum,
    file: file,
    flattenError: flattenError,
    float32: float32,
    float64: float64,
    formatError: formatError,
    function: _function,
    getErrorMap: getErrorMap,
    globalRegistry: globalRegistry,
    gt: _gt,
    gte: _gte,
    guid: guid,
    hash: hash,
    hex: hex,
    hostname: hostname,
    httpUrl: httpUrl,
    includes: _includes,
    instanceof: _instanceof,
    int: _int,
    int32: int32,
    int64: int64,
    intersection: intersection,
    ipv4: ipv4,
    ipv6: ipv6,
    iso: iso,
    json: json,
    jwt: jwt,
    keyof: keyof,
    ksuid: ksuid,
    lazy: lazy,
    length: _length,
    literal: literal,
    locales: index,
    looseObject: looseObject,
    lowercase: _lowercase,
    lt: _lt,
    lte: _lte,
    map: map,
    maxLength: _maxLength,
    maxSize: _maxSize,
    mime: _mime,
    minLength: _minLength,
    minSize: _minSize,
    multipleOf: _multipleOf,
    nan: nan,
    nanoid: nanoid,
    nativeEnum: nativeEnum,
    negative: _negative,
    never: never,
    nonnegative: _nonnegative,
    nonoptional: nonoptional,
    nonpositive: _nonpositive,
    normalize: _normalize,
    null: _null,
    nullable: nullable,
    nullish: nullish,
    number: number$1,
    object: object,
    optional: optional,
    overwrite: _overwrite,
    parse: parse,
    parseAsync: parseAsync,
    partialRecord: partialRecord,
    pipe: pipe,
    positive: _positive,
    prefault: prefault,
    preprocess: preprocess,
    prettifyError: prettifyError,
    promise: promise,
    property: _property,
    readonly: readonly,
    record: record,
    refine: refine,
    regex: _regex,
    regexes: regexes,
    registry: registry,
    safeDecode: safeDecode,
    safeDecodeAsync: safeDecodeAsync,
    safeEncode: safeEncode,
    safeEncodeAsync: safeEncodeAsync,
    safeParse: safeParse,
    safeParseAsync: safeParseAsync,
    set: set,
    setErrorMap: setErrorMap,
    size: _size,
    startsWith: _startsWith,
    strictObject: strictObject,
    string: string$1,
    stringFormat: stringFormat,
    stringbool: stringbool,
    success: success,
    superRefine: superRefine,
    symbol: symbol,
    templateLiteral: templateLiteral,
    toJSONSchema: toJSONSchema,
    toLowerCase: _toLowerCase,
    toUpperCase: _toUpperCase,
    transform: transform,
    treeifyError: treeifyError,
    trim: _trim,
    tuple: tuple,
    uint32: uint32,
    uint64: uint64,
    ulid: ulid,
    undefined: _undefined,
    union: union,
    unknown: unknown,
    uppercase: _uppercase,
    url: url,
    util: util,
    uuid: uuid,
    uuidv4: uuidv4,
    uuidv6: uuidv6,
    uuidv7: uuidv7,
    void: _void,
    xid: xid
  });

  var ValidationTypeValidator = z.union([
      z.literal('required'),
      z.literal('email'),
      z.literal('number'),
      z.literal('code'),
      z.tuple([z.literal('equal'), z.string().min(1)]),
  ]);
  var WithOptionValidator = z.record(z.string(), ValidationTypeValidator);
  var ModeOptionValidator = z.enum(['or', 'and']);
  var LimitationOptionValidator = z.nullable(z.enum(['number', 'code']));
  var ValidationOptionValidator = z.object({
      type: ValidationTypeValidator,
      mode: ModeOptionValidator.optional(),
      with: WithOptionValidator.optional(),
      if: z
          .object({
          mode: ModeOptionValidator.optional(),
          target: z.record(z.string(), z.string()),
      })
          .optional(),
      message: z.string().optional(),
  });
  var RuleValidator = z.array(z.object({
      name: z.string(),
      limit: LimitationOptionValidator.optional(),
      validation: z
          .union([
          ValidationOptionValidator,
          z.array(ValidationOptionValidator),
      ])
          .optional(),
  }));
  var ValidatedErrorValidator = z.object({
      type: z.string(),
      message: z.string().optional(),
  });
  var ParamValidator = z.object({
      rules: RuleValidator,
      error_class: z.string(),
      error_message_class: z.string(),
      empty_error_message_class: z.string(),
      valid_class: z.string(),
      initial_error_view: z.boolean(),
      submit_button: z
          .union([
          z.string(),
          z.instanceof(HTMLInputElement),
          z.instanceof(HTMLButtonElement),
      ])
          .optional(),
      on_validate: z
          .function({
          output: z.void(),
      })
          .optional(),
      on_success: z
          .function({
          output: z.void(),
      })
          .optional(),
      on_error: z
          .function({
          input: [z.record(z.string(), z.array(ValidatedErrorValidator))],
          output: z.void(),
      })
          .optional(),
      on_submit: z
          .function({
          output: z.void(),
      })
          .optional(),
      on_failed: z
          .function({
          input: [
              z.record(z.string(), z.array(ValidatedErrorValidator)),
              z.array(z.string()),
          ],
          output: z.void(),
      })
          .optional(),
      focus_invalid_field: z.boolean().optional(),
  });
  var InitialParamValidator = ParamValidator.partial({
      error_class: true,
      error_message_class: true,
      empty_error_message_class: true,
      valid_class: true,
      initial_error_view: true,
  });
  z.object({
      validate: z.function({
          output: z.void(),
      }),
  });
  z.record(z.string(), z.instanceof(HTMLElement));
  var FormElementValidator = z.union([
      z.string(),
      z.instanceof(HTMLFormElement),
  ]);
  z.union([
      z.instanceof(HTMLInputElement),
      z.instanceof(HTMLSelectElement),
      z.instanceof(HTMLTextAreaElement),
  ]);

  var rule$3 = string$1().trim().min(1);
  /**
   * Check required of target field element's value
   * @param {string[]} values
   * @returns {boolean}
   */
  var check$4 = function (values) {
      if (!values.length) {
          return false;
      }
      return values.reduce(function (prev, current) { return prev && rule$3.safeParse(current).success; }, true);
  };

  var rule$2 = email();
  /**
   * Check Email format of target field element's value
   * @param {string[]} values
   * @returns {boolean}
   */
  var check$3 = function (values) {
      return values.reduce(function (prev, current) {
          if (!prev || !rule$3.safeParse(current).success) {
              return prev;
          }
          return prev && rule$2.safeParse(current).success;
      }, true);
  };

  var rule$1 = number();
  /**
   * Check numeric of target field element's value
   * @param {string[]} values
   * @returns {boolean}
   */
  var check$2 = function (values) {
      return values.reduce(function (prev, current) { return prev && rule$1.safeParse(current).success; }, true);
  };

  var rule = string().regex(/^[0-9-+*]*$/);
  /**
   * Check code format of target field element's value
   * @param {string[]} values
   * @returns {boolean}
   */
  var check$1 = function (values) {
      return values.reduce(function (prev, current) {
          if (!prev || !rule$3.safeParse(current).success) {
              return prev;
          }
          return prev && rule.safeParse(current).success;
      }, true);
  };

  /**
   * Convert to number format possibily
   * @param {string} value
   * @returns {string}
   */
  var convert$1 = function (value) {
      // Full width to Half width characters
      value = value.replace(/[Ａ-Ｚａ-ｚ０-９]/g, function (s) {
          return String.fromCharCode(s.charCodeAt(0) - 0xfee0);
      });
      // Remove text except for numbers
      value = value.replace(/[^0-9]/g, '');
      return value;
  };

  /**
   * Convert to code format possibily
   * @param {string} value
   * @returns {string}
   */
  var convert = function (value) {
      // Full width to Half width characters
      value = value.replace(/[Ａ-Ｚａ-ｚ０-９]/g, function (s) {
          return String.fromCharCode(s.charCodeAt(0) - 0xfee0);
      });
      // Convert dash
      value = value.replace(/[−ーー―]/g, '-');
      // Convert Plus
      value = value.replace(/[＋]/g, '+');
      // Convert asterisk
      value = value.replace(/[＊]/g, '*');
      // Remove text except for numbers
      value = value.replace(/[^0-9-+*]/g, '');
      return value;
  };

  var isCheckField = function (el) {
      var tag = el.tagName.toLowerCase();
      var type = el.getAttribute('type');
      return tag === 'input' && (type === 'radio' || type === 'checkbox');
  };
  var getElement = function (formEl, name) {
      if (!Object.hasOwn(formEl, name)) {
          if (!Object.hasOwn(formEl, "".concat(name, "[]"))) {
              return [];
          }
          name = "".concat(name, "[]");
      }
      var fields = formEl[name];
      if (fields['entries']) {
          return __spreadArray([], fields, true);
      }
      else {
          return [fields];
      }
  };
  var getValues = function (elements, limit) {
      if (limit === void 0) { limit = null; }
      var values = [];
      elements.map(function (el) {
          if (isCheckField(el)) {
              if (el.checked) {
                  values.push(el.value);
              }
          }
          else {
              switch (limit) {
                  case 'number':
                      el.value = convert$1(el.value);
                      break;
                  case 'code':
                      el.value = convert(el.value);
                      break;
              }
              values.push(el.value);
          }
      });
      return values;
  };

  var check = function (formEl, values, target) {
      var targetElement = getElement(formEl, target);
      var targetValues = getValues(targetElement);
      return values.every(function (value) { return targetValues.includes(value); });
  };

  var validate = function (formEl, elements, limit, validations) {
      var errors = [];
      var values = getValues(elements, limit);
      if (!validations) {
          return errors;
      }
      validations.map(function (validation) {
          if (!checkIf(formEl, validation)) {
              return;
          }
          if (validation.with) {
              switch (validation.mode) {
                  case 'or':
                      validateMultipleOr(formEl, validation, errors, values);
                      break;
                  case 'and':
                  default:
                      validateMultipleAnd(formEl, validation, errors, values);
                      break;
              }
          }
          else {
              validateSingle(formEl, validation, errors, values);
          }
      });
      return errors;
  };
  var checkIf = function (formEl, validation) {
      var result = true;
      if (!validation.if) {
          return result;
      }
      Object.keys(validation.if.target).map(function (name) {
          if (!validation.if) {
              return;
          }
          var ifTarget = validation.if.target[name];
          var ifElement = getElement(formEl, name);
          var ifValue = getValues(ifElement);
          if (validation.if.mode === 'or') {
              result = result || ifValue.includes(ifTarget);
          }
          else {
              result = result && ifValue.includes(ifTarget);
          }
      });
      return result;
  };
  var checkValidate = function (formEl, ruleType, values) {
      switch (ruleType) {
          case 'required':
              return check$4(values);
          case 'email':
              return check$3(values);
          case 'number':
              return check$2(values);
          case 'code':
              return check$1(values);
          default:
              if (Array.isArray(ruleType) && ruleType[0] === 'equal') {
                  return check(formEl, values, ruleType[1]);
              }
      }
  };
  var validateSingle = function (formEl, validation, errors, values) {
      if (!checkValidate(formEl, validation.type, values)) {
          errors.push({
              type: Array.isArray(validation.type)
                  ? validation.type[0]
                  : validation.type,
              message: validation.message,
          });
      }
      return errors;
  };
  var validateMultipleOr = function (formEl, validation, errors, values) {
      var result = checkValidate(formEl, validation.type, values);
      if (validation.with) {
          Object.keys(validation.with).map(function (name) {
              if (!validation.with) {
                  return;
              }
              var withType = validation.with[name];
              var withElements = getElement(formEl, name);
              var withValues = getValues(withElements);
              result = result || checkValidate(formEl, withType, withValues);
          });
      }
      if (!result) {
          errors.push({
              type: Array.isArray(validation.type)
                  ? validation.type[0]
                  : validation.type,
              message: validation.message,
          });
      }
      return errors;
  };
  var validateMultipleAnd = function (formEl, validation, errors, values) {
      var result = checkValidate(formEl, validation.type, values);
      if (validation.with) {
          Object.keys(validation.with).map(function (name) {
              if (!validation.with) {
                  return;
              }
              var withType = validation.with[name];
              var withElements = getElement(formEl, name);
              var withValues = getValues(withElements);
              result = result && checkValidate(formEl, withType, withValues);
          });
      }
      if (!result) {
          errors.push({
              type: Array.isArray(validation.type)
                  ? validation.type[0]
                  : validation.type,
              message: validation.message,
          });
      }
      return errors;
  };

  var createElement = function (formEl, name, limit, validations, params, errors) {
      var elements = getElement(formEl, name);
      var withElements = (function () {
          var results = [];
          if (!validations) {
              return results;
          }
          validations.map(function (validation) {
              if (!validation.with) {
                  return;
              }
              Object.keys(validation.with).map(function (name) {
                  var fields = getElement(formEl, name);
                  results.push.apply(results, fields);
              });
          });
          return results;
      })();
      var ifElements = (function () {
          var results = [];
          if (!validations) {
              return results;
          }
          validations.map(function (validation) {
              if (!validation.if) {
                  return;
              }
              Object.keys(validation.if.target).map(function (name) {
                  var fields = getElement(formEl, name);
                  results.push.apply(results, fields);
              });
          });
          return results;
      })();
      var equalElements = (function () {
          var results = [];
          if (!validations) {
              return results;
          }
          validations.map(function (validation) {
              if (!Array.isArray(validation.type) ||
                  validation.type[0] !== 'equal') {
                  return;
              }
              if (!validation.type[1]) {
                  return;
              }
              var fields = getElement(formEl, validation.type[1]);
              results.push.apply(results, fields);
          });
          return results;
      })();
      if (!elements.length) {
          throw Error("Not found target field element: ".concat(name));
      }
      // Prepare or Find error message field
      var messageField = (function () {
          if (!validations || !validations.length) {
              return;
          }
          var existField = document.querySelector("[data-inputfollow-error=\"".concat(name, "\"]"));
          if (existField) {
              existField.classList.add(params.error_message_class, params.empty_error_message_class);
              return existField;
          }
          var additionalField = document.createElement('ul');
          additionalField.classList.add(params.error_message_class, params.empty_error_message_class);
          additionalField.setAttribute('data-inputfollow-error', name);
          elements[0].insertAdjacentElement('afterend', additionalField);
          return additionalField;
      })();
      var addInvalidClass = function (_elements, render) {
          if (params.valid_class) {
              _elements.forEach(function (el) {
                  el.classList.remove(params.valid_class);
              });
          }
          if (render) {
              if (params.error_class) {
                  _elements.forEach(function (el) {
                      el.classList.add(params.error_class);
                  });
              }
          }
      };
      var addValidClass = function (_elements) {
          if (params.error_class) {
              _elements.forEach(function (el) {
                  el.classList.remove(params.error_class);
              });
          }
          if (params.valid_class) {
              _elements.forEach(function (el) {
                  el.classList.add(params.valid_class);
              });
          }
      };
      var validate$1 = function (init, ignored) {
          if (init === void 0) { init = false; }
          if (ignored === void 0) { ignored = false; }
          if (!name) {
              return;
          }
          var renderError = !ignored && (init !== true || params.initial_error_view);
          errors[name] = validate(formEl, elements, renderError ? limit : null, validations);
          if (!validations || !validations.length || !messageField) {
              return;
          }
          if (hasError()) {
              addInvalidClass(elements, renderError);
              addInvalidClass(withElements, renderError);
              addInvalidClass(ifElements, renderError);
              if (renderError) {
                  messageField.innerHTML = '';
                  errors[name].map(function (error) {
                      if (error.message) {
                          var messageElement = document.createElement('li');
                          messageElement.textContent = error.message;
                          messageField.appendChild(messageElement);
                      }
                  });
                  messageField.classList.remove(params.empty_error_message_class);
              }
          }
          else {
              addValidClass(elements);
              addValidClass(withElements);
              addValidClass(ifElements);
              messageField.innerHTML = '';
              messageField.classList.add(params.empty_error_message_class);
          }
      };
      var hasError = function () {
          if (!name) {
              return false;
          }
          return errors[name].length > 0;
      };
      var getErrors = function () {
          if (!name) {
              return [];
          }
          return errors[name];
      };
      var addEvents = function (_elements, useCapture) {
          if (useCapture === void 0) { useCapture = false; }
          _elements.forEach(function (el) {
              if (isCheckField(el)) {
                  el.addEventListener('input', function () {
                      validate$1();
                  }, useCapture);
              }
              else {
                  el.addEventListener('input', function () {
                      validate$1(false, true);
                  }, useCapture);
                  el.addEventListener('blur', function () {
                      validate$1();
                  }, useCapture);
              }
          });
      };
      addEvents(elements, true);
      addEvents(withElements, false);
      addEvents(ifElements, false);
      addEvents(equalElements, false);
      return {
          formEl: formEl,
          elements: elements,
          name: name,
          limit: limit,
          validations: validations,
          validate: validate$1,
          hasError: hasError,
          getErrors: getErrors,
      };
  };

  /**
   * InputFollow class
   *
   * @remarks
   * You can see {@link https://sushat4692.github.io/inputfollow.js/ | Demo}.
   *
   * @public
   */
  var InputFollow = function (formEl, params) {
      FormElementValidator.parse(formEl);
      InitialParamValidator.parse(params);
      var targetFormElement = (function () {
          /**
           * Convert formEl to HTMLFormElement if it's string
           */
          if (typeof formEl === 'string') {
              var el = document.querySelector(formEl);
              if (!el) {
                  throw new Error("Not found target form element: ".concat(formEl));
              }
              return el;
          }
          return formEl;
      })();
      if (targetFormElement.tagName.toLowerCase() !== 'form') {
          throw new Error("Target element is not <form> element");
      }
      targetFormElement.addEventListener('submit', function (e) {
          var _a, _b;
          var flag = true;
          validate();
          var errorFields = [];
          Object.keys(errors).map(function (key) {
              var error = errors[key];
              if (error.length > 0) {
                  errorFields.push(key);
                  flag = false;
              }
          });
          if (!flag) {
              e.preventDefault();
              if (typeof arrangedParams.on_failed === 'function') {
                  arrangedParams.on_failed(errors, errorFields);
              }
              if (arrangedParams.focus_invalid_field) {
                  var firstErrorField = errorFields[0];
                  var errorElements = getElements(firstErrorField);
                  (_b = (_a = errorElements[0]) === null || _a === void 0 ? void 0 : _a.elements[0]) === null || _b === void 0 ? void 0 : _b.focus();
              }
              return false;
          }
          // Call on_submit callback if it's specified, and prevent default submission
          if (typeof arrangedParams.on_submit === 'function') {
              e.preventDefault();
              arrangedParams.on_submit();
              return false;
          }
          return true;
      });
      /**
       * Find submit button if it's specified
       */
      var submitButton = (function () {
          if (!params.submit_button) {
              return null;
          }
          if (typeof params.submit_button === 'string') {
              return targetFormElement.querySelector(params.submit_button);
          }
          return params.submit_button;
      })();
      /**
       * Arranged params
       */
      var arrangedParams = _assign({
          error_class: 'has-error',
          error_message_class: 'inputfollow-error',
          empty_error_message_class: 'is-empty',
          valid_class: 'is-valid',
          initial_error_view: false,
      }, params);
      /**
       * Prepare Proxy for observing errors values
       */
      var errors = new Proxy({}, {
          set: function (target, p, value, receiver) {
              var set = Reflect.set(target, p, value, receiver);
              if (set) {
                  var flag_1 = true;
                  Object.keys(errors).map(function (key) {
                      var error = errors[key];
                      flag_1 = flag_1 && error.length <= 0;
                  });
                  if (flag_1) {
                      if (submitButton) {
                          submitButton.removeAttribute('disabled');
                      }
                      if (typeof arrangedParams.on_success === 'function') {
                          arrangedParams.on_success();
                      }
                  }
                  else {
                      if (submitButton) {
                          submitButton.setAttribute('disabled', 'disabled');
                      }
                      if (typeof arrangedParams.on_error === 'function') {
                          arrangedParams.on_error(errors);
                      }
                  }
              }
              return set;
          },
      });
      /**
       * Preparing Checking Elements
       */
      var elements = [];
      arrangedParams.rules.map(function (_a) {
          var name = _a.name, limit = _a.limit, validation = _a.validation;
          var validations = (function () {
              if (!validation) {
                  return null;
              }
              if (Array.isArray(validation)) {
                  return validation;
              }
              return [validation];
          })();
          var Element = createElement(targetFormElement, name, limit !== null && limit !== void 0 ? limit : null, validations, arrangedParams, errors);
          if (!Element) {
              return;
          }
          elements.push(Element);
      });
      /**
       * Start validating
       */
      var validate = function (init) {
          if (init === void 0) { init = false; }
          elements.map(function (element) {
              element.validate(init);
          });
          if (typeof arrangedParams.on_validate === 'function') {
              arrangedParams.on_validate();
          }
      };
      /**
       * Get target elements
       */
      var getElements = function (name) {
          return elements.filter(function (el) { return el.name === name; });
      };
      // Initial validate
      validate(true);
      return { formEl: targetFormElement, elements: elements, validate: validate, getElements: getElements };
  };

  return InputFollow;

})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
